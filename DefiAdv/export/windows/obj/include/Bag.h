// Generated by Haxe 4.2.1+bf9ff69
#ifndef INCLUDED_Bag
#define INCLUDED_Bag

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
HX_DECLARE_CLASS0(Bag)
HX_DECLARE_CLASS0(Pointer)
HX_DECLARE_CLASS0(ShopChoice)
HX_DECLARE_CLASS0(Text)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,text,FlxTypeText)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,_hx_system,FlxSound)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,FlxSave)
HX_DECLARE_CLASS2(flixel,util,FlxTimer)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Bag_obj : public  ::flixel::group::FlxTypedGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedGroup_obj super;
		typedef Bag_obj OBJ_;
		Bag_obj();

	public:
		enum { _hx_ClassId = 0x7ed6ae3c };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Bag")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"Bag"); }
		static ::hx::ObjectPtr< Bag_obj > __new();
		static ::hx::ObjectPtr< Bag_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Bag_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Bag",a8,69,32,00); }

		 ::flixel::group::FlxTypedGroup shopUi;
		 ::flixel::group::FlxTypedGroup itemUi;
		 ::flixel::group::FlxTypedGroup dealUi;
		 ::flixel::group::FlxTypedGroup diamondUi;
		 ::flixel::group::FlxTypedGroup shibaUi;
		 ::flixel::group::FlxTypedGroup nftUi;
		 ::flixel::group::FlxTypedGroup rodUi;
		 ::flixel::group::FlxTypedGroup shibaNotifUi;
		 ::flixel::group::FlxTypedGroup nftNotifUi;
		 ::flixel::FlxSprite background;
		 ::flixel::_hx_system::FlxSound check;
		 ::flixel::_hx_system::FlxSound move;
		 ::flixel::_hx_system::FlxSound cancel;
		 ::flixel::_hx_system::FlxSound noNoise;
		int bananaCounter;
		Float diamondCounter;
		 ::flixel::text::FlxText diamondText;
		 ::flixel::FlxSprite diamondIcon;
		 ::flixel::text::FlxText bananaCounterText;
		 ::flixel::FlxSprite bananaCounterIcon;
		 ::flixel::text::FlxText dealText;
		 ::flixel::text::FlxText shopCho;
		 ::Text shopText;
		::String mainChat;
		int bananaSell;
		::String buyCho;
		::String sellCho;
		::String chatCho;
		 ::Pointer pointer;
		 ::ShopChoice shopChoice;
		::Array< ::String > mainChoices;
		::Array< ::String > buyChoices;
		::Array< ::String > sellChoices;
		::Array< ::String > chatChoices;
		::String name;
		bool txt;
		int i;
		bool textRunDone;
		 ::flixel::FlxSprite enterCur;
		 ::flixel::text::FlxText sellAmoText;
		Float shibaPrizeNow;
		 ::flixel::FlxSprite shiba;
		 ::flixel::text::FlxText shibaWaveText;
		 ::flixel::util::FlxTimer shibaTimer;
		bool firstShiba;
		int shibaInvest;
		Float shibaWave;
		Float nftPrizeNow;
		 ::flixel::FlxSprite nft;
		 ::flixel::text::FlxText nftWaveText;
		 ::flixel::util::FlxTimer nftTimer;
		bool firstNft;
		int nftInvest;
		Float nftWave;
		Float rodPrizeNow;
		 ::flixel::FlxSprite rod;
		 ::flixel::text::FlxText rodWaveText;
		 ::flixel::util::FlxTimer rodTimer;
		int rodInvest;
		Float rodWave;
		Float rodWaveAdd;
		int rodNum;
		 ::flixel::util::FlxTimer notifTimer;
		 ::flixel::FlxSprite shibaNotif;
		::String shibaNewsDown;
		::String shibaNewsUp;
		 ::flixel::text::FlxText shibaNotifText;
		 ::flixel::util::FlxTimer shibaNotifTimer;
		 ::flixel::FlxSprite nftNotif;
		::String nftNewsDown;
		::String nftNewsUp;
		 ::flixel::text::FlxText nftNotifText;
		 ::flixel::util::FlxTimer nftNotifTimer;
		 ::flixel::FlxSprite bananaCoinIcon;
		 ::flixel::text::FlxText bananaCoinText;
		Float bananaCoin;
		 ::flixel::FlxSprite appleCoinIcon;
		 ::flixel::text::FlxText appleCoinText;
		Float appleCoin;
		 ::flixel::FlxSprite dexCoinIcon;
		 ::flixel::text::FlxText dexCoinText;
		Float dexCoin;
		 ::flixel::text::FlxText ufo;
		 ::flixel::util::FlxSave save;
		void bagUiShow();
		::Dynamic bagUiShow_dyn();

		void updateBag();
		::Dynamic updateBag_dyn();

		void countShibaWave();
		::Dynamic countShibaWave_dyn();

		void countNftWave(int style);
		::Dynamic countNftWave_dyn();

		void countRodWave();
		::Dynamic countRodWave_dyn();

		void countWave(::String enemy, ::Dynamic notifText,Float wave, ::flixel::text::FlxText waveText,int invest,::String newsDown,::String newsUp);
		::Dynamic countWave_dyn();

		void notification( ::flixel::group::FlxTypedGroup notifUi, ::flixel::text::FlxText notifText,::String newsDown,::String newsUp);
		::Dynamic notification_dyn();

		void redOrGreen(Float wave,int invest, ::flixel::text::FlxText waveText);
		::Dynamic redOrGreen_dyn();

		void update(Float elapsed);

		void buyAndSell();
		::Dynamic buyAndSell_dyn();

		void updateEnter();
		::Dynamic updateEnter_dyn();

		void setMainShop();
		::Dynamic setMainShop_dyn();

		void shopChatStart(::String name,bool txt);
		::Dynamic shopChatStart_dyn();

};


#endif /* INCLUDED_Bag */ 
