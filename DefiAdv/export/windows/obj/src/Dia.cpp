// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_Dia
#include <Dia.h>
#endif
#ifndef INCLUDED_NpcType
#include <NpcType.h>
#endif
#ifndef INCLUDED_Pointer
#include <Pointer.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTypeText
#include <flixel/addons/text/FlxTypeText.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_df2db1a5b47250e8_163_new,"Dia","new",0xffc6540e,"Dia.new","Dia.hx",163,0xe5986722)
HX_DEFINE_STACK_FRAME(_hx_pos_df2db1a5b47250e8_17_new,"Dia","new",0xffc6540e,"Dia.new","Dia.hx",17,0xe5986722)
HX_LOCAL_STACK_FRAME(_hx_pos_df2db1a5b47250e8_186_show,"Dia","show",0xd113898f,"Dia.show","Dia.hx",186,0xe5986722)
HX_LOCAL_STACK_FRAME(_hx_pos_df2db1a5b47250e8_168_show,"Dia","show",0xd113898f,"Dia.show","Dia.hx",168,0xe5986722)
HX_LOCAL_STACK_FRAME(_hx_pos_df2db1a5b47250e8_197_changeProfile,"Dia","changeProfile",0x3e1f16c7,"Dia.changeProfile","Dia.hx",197,0xe5986722)
HX_LOCAL_STACK_FRAME(_hx_pos_df2db1a5b47250e8_233_diaPosition,"Dia","diaPosition",0x71d517b3,"Dia.diaPosition","Dia.hx",233,0xe5986722)
HX_LOCAL_STACK_FRAME(_hx_pos_df2db1a5b47250e8_247_getDiamond,"Dia","getDiamond",0x0ef95b70,"Dia.getDiamond","Dia.hx",247,0xe5986722)
HX_LOCAL_STACK_FRAME(_hx_pos_df2db1a5b47250e8_259_saveShowTime,"Dia","saveShowTime",0x174e7299,"Dia.saveShowTime","Dia.hx",259,0xe5986722)
HX_LOCAL_STACK_FRAME(_hx_pos_df2db1a5b47250e8_264_context,"Dia","context",0x67a0889d,"Dia.context","Dia.hx",264,0xe5986722)
HX_LOCAL_STACK_FRAME(_hx_pos_df2db1a5b47250e8_497_getPointer,"Dia","getPointer",0x0400b4d9,"Dia.getPointer","Dia.hx",497,0xe5986722)
static const ::String _hx_array_data_0033f51c_11[] = {
	HX_("yes",27,29,5c,00),HX_("no",41,60,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_df2db1a5b47250e8_508_updateLr,"Dia","updateLr",0x8da58281,"Dia.updateLr","Dia.hx",508,0xe5986722)
static const int _hx_array_data_0033f51c_13[] = {
	(int)37,(int)65,
};
static const int _hx_array_data_0033f51c_14[] = {
	(int)39,(int)68,
};
HX_LOCAL_STACK_FRAME(_hx_pos_df2db1a5b47250e8_582_update,"Dia","update",0x44ca031b,"Dia.update","Dia.hx",582,0xe5986722)
static const int _hx_array_data_0033f51c_16[] = {
	(int)88,(int)27,
};
static const int _hx_array_data_0033f51c_17[] = {
	(int)82,
};
HX_LOCAL_STACK_FRAME(_hx_pos_df2db1a5b47250e8_638_updateEnter,"Dia","updateEnter",0x0061b7fd,"Dia.updateEnter","Dia.hx",638,0xe5986722)
static const int _hx_array_data_0033f51c_20[] = {
	(int)13,(int)32,
};
HX_LOCAL_STACK_FRAME(_hx_pos_df2db1a5b47250e8_649_updateEnter,"Dia","updateEnter",0x0061b7fd,"Dia.updateEnter","Dia.hx",649,0xe5986722)
HX_LOCAL_STACK_FRAME(_hx_pos_df2db1a5b47250e8_789_updateEnter,"Dia","updateEnter",0x0061b7fd,"Dia.updateEnter","Dia.hx",789,0xe5986722)
HX_LOCAL_STACK_FRAME(_hx_pos_df2db1a5b47250e8_800_updateEnter,"Dia","updateEnter",0x0061b7fd,"Dia.updateEnter","Dia.hx",800,0xe5986722)
HX_LOCAL_STACK_FRAME(_hx_pos_df2db1a5b47250e8_812_updateSkip,"Dia","updateSkip",0x68876f3a,"Dia.updateSkip","Dia.hx",812,0xe5986722)
static const int _hx_array_data_0033f51c_25[] = {
	(int)86,
};

void Dia_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite sprite){
            			HX_GC_STACKFRAME(&_hx_pos_df2db1a5b47250e8_163_new)
HXLINE( 163)			sprite->scrollFactor->set(0,0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_df2db1a5b47250e8_17_new)
HXLINE( 102)		this->updateDiamond = false;
HXLINE(  96)		this->loan = false;
HXLINE(  95)		this->loanGain = ((Float)0);
HXLINE(  94)		this->interest = ((Float)0.01);
HXLINE(  91)		this->dexPrizeSell = ((Float)0.5);
HXLINE(  90)		this->dexPrizeBuy = 4;
HXLINE(  87)		this->bananaPrize = 10;
HXLINE(  84)		this->machGain = ((Float)0);
HXLINE(  83)		this->coinOut = 10;
HXLINE(  81)		this->caAppleCoinIn = ((Float)2000);
HXLINE(  80)		this->caCoinIn = 4000;
HXLINE(  79)		this->cak = 8000000;
HXLINE(  76)		this->acCoinIn = ((Float)2000);
HXLINE(  75)		this->acAppleCoinIn = 5000;
HXLINE(  74)		this->ack = 10000000;
HXLINE(  71)		this->bcCoinIn = ((Float)1000);
HXLINE(  70)		this->bcBananaCoinIn = 10000;
HXLINE(  69)		this->bck = 10000000;
HXLINE(  64)		this->rodWave = ((Float)0);
HXLINE(  59)		this->saveStoneYes = false;
HXLINE(  58)		this->lakeTalking = false;
HXLINE(  57)		this->readDaSign = false;
HXLINE(  56)		this->talkDone = false;
HXLINE(  55)		this->talkMiss = false;
HXLINE(  54)		this->leafYes = false;
HXLINE(  53)		this->stoneTextYes = false;
HXLINE(  52)		this->saveStoneIntro = false;
HXLINE(  50)		this->pointerQ = HX_("none",b8,12,0a,49);
HXLINE(  45)		this->saveShow = HX_(":N:oui",5d,2d,9f,40);
HXLINE(  43)		this->textRunDone = false;
HXLINE(  41)		this->txt = true;
HXLINE(  34)		this->profile = 1;
HXLINE(  32)		this->i = 2;
HXLINE(  19)		this->win = false;
HXLINE( 108)		super::__construct(null());
HXLINE( 111)		this->background =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,30,30,HX_("assets/images/diaDoge.png",b5,e7,6c,81));
HXLINE( 112)		this->background->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 113)		this->add(this->background);
HXLINE( 116)		this->text =  ::flixel::addons::text::FlxTypeText_obj::__alloc( HX_CTX ,(this->background->x + 330),(this->background->y + 45),1020,HX_("text",ad,cc,f9,4c),84,true);
HXLINE( 117)		this->text->set_color(-16777216);
HXLINE( 118)		this->text->set_font(HX_("assets/data/silver.ttf",3e,fd,5b,64));
HXLINE( 119)		this->text->delay = ((Float)0.05);
HXLINE( 120)		 ::flixel::_hx_system::FlxSound _hx_tmp = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/typing.ogg",a4,35,75,3f),null(),null(),null(),null(),null(),null(),null(),null());
HXDLIN( 120)		this->text->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,_hx_tmp);
HXLINE( 121)		this->text->finishSounds = true;
HXLINE( 122)		int _hx_tmp1;
HXDLIN( 122)		::String s = HX_("X",58,00,00,00);
HXDLIN( 122)		s = s.toUpperCase();
HXDLIN( 122)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s)) {
HXLINE( 122)			_hx_tmp1 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s);
            		}
            		else {
HXLINE( 122)			_hx_tmp1 = -1;
            		}
HXDLIN( 122)		::String s1 = HX_("SHIFT",62,24,11,fa);
HXDLIN( 122)		s1 = s1.toUpperCase();
HXDLIN( 122)		int _hx_tmp2;
HXDLIN( 122)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s1)) {
HXLINE( 122)			_hx_tmp2 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s1);
            		}
            		else {
HXLINE( 122)			_hx_tmp2 = -1;
            		}
HXDLIN( 122)		this->text->skipKeys = ::Array_obj< int >::__new(2)->init(0,_hx_tmp1)->init(1,_hx_tmp2);
HXLINE( 123)		this->add(this->text);
HXLINE( 126)		Float _hx_tmp3 = this->background->x;
HXDLIN( 126)		Float _hx_tmp4 = ((_hx_tmp3 + (this->background->get_width() / ( (Float)(2) ))) - ( (Float)(30) ));
HXDLIN( 126)		this->enterCur =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp4,(this->background->y + 310),HX_("assets/images/pointer.png",ad,e2,d4,86));
HXLINE( 127)		this->enterCur->set_color(-16777216);
HXLINE( 128)		this->enterCur->set_angle(( (Float)(90) ));
HXLINE( 129)		this->add(this->enterCur);
HXLINE( 130)		this->enterCur->set_visible(false);
HXLINE( 133)		this->next = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/next.ogg",20,1f,40,58),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 134)		this->cancel = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/cancel.ogg",27,62,c6,8f),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 135)		this->check = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/check.ogg",5d,94,6a,8d),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 137)		Float _hx_tmp5 = this->background->x;
HXDLIN( 137)		Float _hx_tmp6 = (this->background->y + 60);
HXDLIN( 137)		this->coinText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp5,_hx_tmp6,this->background->get_width(),HX_("1",31,00,00,00),84,null());
HXLINE( 138)		this->coinText->set_color(-16777216);
HXLINE( 139)		this->coinText->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 140)		this->coinText->set_font(HX_("assets/data/silver.ttf",3e,fd,5b,64));
HXLINE( 141)		this->add(this->coinText);
HXLINE( 142)		this->coinText->set_visible(false);
HXLINE( 145)		this->pointer =  ::Pointer_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 146)		this->pointer->set_color(-3369207);
HXLINE( 147)		this->add(this->pointer);
HXLINE( 148)		this->pointer->set_visible(false);
HXLINE( 151)		this->minerPoster =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),HX_("assets/images/minePoster.png",e6,71,fa,ad));
HXLINE( 152)		this->minerPoster->screenCenter(null());
HXLINE( 153)		this->add(this->minerPoster);
HXLINE( 154)		this->minerPoster->set_visible(false);
HXLINE( 156)		this->save =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE( 157)		this->save->bind(HX_("DefiAdv",6f,39,37,6e),null());
HXLINE( 159)		this->set_visible(false);
HXLINE( 160)		this->set_active(false);
HXLINE( 163)		this->forEach( ::Dynamic(new _hx_Closure_0()),null());
            	}

Dynamic Dia_obj::__CreateEmpty() { return new Dia_obj; }

void *Dia_obj::_hx_vtable = 0;

Dynamic Dia_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Dia_obj > _hx_result = new Dia_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Dia_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7ccf8994) {
		if (inClassId<=(int)0x62817b24) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x62817b24;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	} else {
		return inClassId==(int)0x7ed839b0;
	}
}

void Dia_obj::show(::String name,bool txt){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Dia,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_df2db1a5b47250e8_186_show)
HXLINE( 187)			_gthis->enterCur->set_visible(true);
HXLINE( 188)			{
HXLINE( 188)				 ::Dynamic CompletionCallback = null();
HXDLIN( 188)				 ::Dynamic ProgressCallback = null();
HXDLIN( 188)				::flixel::effects::FlxFlicker_obj::flicker(( ( ::flixel::FlxObject)(_gthis->enterCur) ),0,((Float)0.5),true,true,CompletionCallback,ProgressCallback);
            			}
HXLINE( 189)			_gthis->textRunDone = true;
HXLINE( 190)			if ((_gthis->pointerQ != HX_("none",b8,12,0a,49))) {
HXLINE( 191)				_gthis->pointer->set_visible(true);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_df2db1a5b47250e8_168_show)
HXDLIN( 168)		 ::Dia _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 169)		::Array< ::String > _hx_tmp;
HXDLIN( 169)		if (txt) {
HXLINE( 169)			_hx_tmp = ::openfl::utils::Assets_obj::getText(name).split(HX_(":",3a,00,00,00));
            		}
            		else {
HXLINE( 169)			_hx_tmp = (this->dilog_boxes = name.split(HX_(":",3a,00,00,00)));
            		}
HXDLIN( 169)		this->dilog_boxes = _hx_tmp;
HXLINE( 170)		this->i = 2;
HXLINE( 172)		this->diaPosition(this->diaUpDown);
HXLINE( 174)		this->profile = 1;
HXLINE( 175)		this->changeProfile();
HXLINE( 177)		this->set_active(true);
HXLINE( 178)		this->set_visible(true);
HXLINE( 180)		{
HXLINE( 180)			 ::flixel::FlxObject Object = this->enterCur;
HXDLIN( 180)			::flixel::effects::FlxFlicker_obj::stopFlickering(Object);
            		}
HXLINE( 181)		this->enterCur->set_visible(false);
HXLINE( 182)		this->textRunDone = false;
HXLINE( 183)		this->text->resetText(this->dilog_boxes->__get(this->i));
HXLINE( 185)		this->text->start(null(),false,false,null(), ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Dia_obj,show,(void))

void Dia_obj::changeProfile(){
            	HX_STACKFRAME(&_hx_pos_df2db1a5b47250e8_197_changeProfile)
HXLINE( 198)		::String _hx_switch_0 = this->dilog_boxes->__get(this->profile);
            		if (  (_hx_switch_0==HX_("A",41,00,00,00)) ){
HXLINE( 201)			this->profilePic = HX_("assets/images/diaApe.png",60,22,35,1b);
HXDLIN( 201)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("D",44,00,00,00)) ){
HXLINE( 203)			this->profilePic = HX_("assets/images/diaDoge.png",b5,e7,6c,81);
HXDLIN( 203)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("K",4b,00,00,00)) ){
HXLINE( 219)			this->profilePic = HX_("assets/images/diaSbBlack.png",fa,a8,55,65);
HXDLIN( 219)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("L",4c,00,00,00)) ){
HXLINE( 207)			this->profilePic = HX_("assets/images/diaLake.png",9b,6b,41,9e);
HXDLIN( 207)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("M",4d,00,00,00)) ){
HXLINE( 211)			this->profilePic = HX_("assets/images/diaMing.png",e1,d1,fe,7d);
HXDLIN( 211)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("N",4e,00,00,00)) ){
HXLINE( 209)			this->profilePic = HX_("assets/images/diaNull.png",d3,02,7d,be);
HXDLIN( 209)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("P1",e1,45,00,00)) ){
HXLINE( 221)			this->profilePic = HX_("assets/images/diaP1.png",cd,34,5e,97);
HXDLIN( 221)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("P2",e2,45,00,00)) ){
HXLINE( 223)			this->profilePic = HX_("assets/images/diaP2.png",4e,c9,c4,2a);
HXDLIN( 223)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("P3",e3,45,00,00)) ){
HXLINE( 225)			this->profilePic = HX_("assets/images/diaP3.png",cf,5d,2b,be);
HXDLIN( 225)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("S",53,00,00,00)) ){
HXLINE( 205)			this->profilePic = HX_("assets/images/diaSpartan.png",1d,70,67,cf);
HXDLIN( 205)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("SB",8f,48,00,00)) ){
HXLINE( 217)			this->profilePic = HX_("assets/images/diaSbBlue.png",55,3a,cc,b4);
HXDLIN( 217)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("SG",94,48,00,00)) ){
HXLINE( 215)			this->profilePic = HX_("assets/images/diaSbGreen.png",fe,b3,7b,08);
HXDLIN( 215)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("SR",9f,48,00,00)) ){
HXLINE( 213)			this->profilePic = HX_("assets/images/diaSbRed.png",8c,3d,35,b5);
HXDLIN( 213)			goto _hx_goto_4;
            		}
            		_hx_goto_4:;
HXLINE( 228)		this->background->loadGraphic(this->profilePic,null(),null(),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Dia_obj,changeProfile,(void))

void Dia_obj::diaPosition(::String diaUpDown){
            	HX_STACKFRAME(&_hx_pos_df2db1a5b47250e8_233_diaPosition)
HXLINE( 234)		this->diaUpDown = diaUpDown;
HXLINE( 235)		if ((diaUpDown == HX_("up",5b,66,00,00))) {
HXLINE( 236)			this->background->set_y(( (Float)(30) ));
            		}
            		else {
HXLINE( 238)			 ::flixel::FlxSprite _hx_tmp = this->background;
HXDLIN( 238)			int _hx_tmp1 = ::flixel::FlxG_obj::height;
HXDLIN( 238)			_hx_tmp->set_y(((( (Float)(_hx_tmp1) ) - this->background->get_height()) - ( (Float)(30) )));
            		}
HXLINE( 239)		this->pointer->set_y((this->background->y + 225));
HXLINE( 240)		this->text->set_y((this->background->y + 45));
HXLINE( 241)		this->coinText->set_y((this->background->y + 240));
HXLINE( 242)		this->enterCur->set_y((this->background->y + 310));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Dia_obj,diaPosition,(void))

void Dia_obj::getDiamond(Float diamond, ::flixel::text::FlxText diamondUiText,Float bananaCoin,Float appleCoin,Float rodWave,Float dexCoin){
            	HX_STACKFRAME(&_hx_pos_df2db1a5b47250e8_247_getDiamond)
HXLINE( 248)		this->diamond = diamond;
HXLINE( 249)		this->diamondUiText = diamondUiText;
HXLINE( 250)		this->bananaCoin = bananaCoin;
HXLINE( 251)		this->appleCoin = appleCoin;
HXLINE( 252)		this->dexCoin = dexCoin;
HXLINE( 253)		this->rodWave = rodWave;
            	}


HX_DEFINE_DYNAMIC_FUNC6(Dia_obj,getDiamond,(void))

void Dia_obj::saveShowTime(Float money,::String place){
            	HX_STACKFRAME(&_hx_pos_df2db1a5b47250e8_259_saveShowTime)
HXDLIN( 259)		this->saveShow = ((HX_W(u":N:\u7329\u7329  ",bb66,def2) + place) + ((HX_("  ",00,1c,00,00) + money) + HX_W(u" \u80fd\u91cf\u5e63\n\u5b58\u6a94\u6210\u529f\uff01",021e,f17e)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Dia_obj,saveShowTime,(void))

void Dia_obj::context( ::NpcType npcType){
            	HX_STACKFRAME(&_hx_pos_df2db1a5b47250e8_264_context)
HXLINE( 265)		this->npcType = npcType;
HXLINE( 266)		switch((int)(npcType->_hx_getIndex())){
            			case (int)0: {
HXLINE( 269)				if (this->talkDone) {
HXLINE( 270)					this->name = HX_("assets/data/goToMiner.txt",25,76,31,2a);
            				}
            				else {
HXLINE( 273)					if (this->leafYes) {
HXLINE( 274)						this->name = HX_("assets/data/missionYes.txt",76,43,d1,08);
            					}
            					else {
HXLINE( 276)						this->name = HX_("assets/data/missionNo.txt",96,d0,7d,5b);
            					}
            				}
HXLINE( 279)				this->txt = true;
            			}
            			break;
            			case (int)1: {
HXLINE( 282)				if (this->talkMiss) {
HXLINE( 284)					this->name = HX_("assets/data/mingTalking.txt",ca,2f,02,d0);
HXLINE( 285)					this->txt = true;
            				}
            				else {
HXLINE( 289)					this->name = HX_W(u":M:\u9019\u88e1\u8996\u91ce\u771f\u597d\u3002",602f,75ee);
HXLINE( 290)					this->txt = false;
            				}
            			}
            			break;
            			case (int)2: {
HXLINE( 294)				if (this->talkMiss) {
HXLINE( 296)					this->name = HX_("assets/data/srTalk.txt",26,b8,8c,cd);
HXLINE( 297)					this->txt = true;
            				}
            				else {
HXLINE( 301)					this->name = HX_W(u":SR:\u547c\u547c\uff0c\u4eca\u5929\u5929\u6c23\u771f\u597d\u3002",c9ce,9959);
HXLINE( 302)					this->txt = false;
            				}
            			}
            			break;
            			case (int)3: {
HXLINE( 306)				if (this->talkMiss) {
HXLINE( 308)					this->name = HX_("assets/data/sbTalk.txt",16,28,76,9e);
HXLINE( 309)					this->txt = true;
            				}
            				else {
HXLINE( 313)					this->name = HX_W(u":SB:\u6700\u8fd1\u5cf6\u4e0a\u6709\u602a\u4eba\u5728\u8ce3\u5947\u602a\u7684\u6771\u897f\u5462\u3002",ec00,aa0e);
HXLINE( 314)					this->txt = false;
            				}
            			}
            			break;
            			case (int)4: {
HXLINE( 318)				if (this->talkMiss) {
HXLINE( 320)					this->name = HX_("assets/data/sgTalk.txt",1b,35,2d,bd);
HXLINE( 321)					this->txt = true;
            				}
            				else {
HXLINE( 325)					this->name = HX_W(u":SG:\u72d7\u72d7\u5e63\u9577\u5f97\u771f\u6050\u6016\u3002",776a,828a);
HXLINE( 326)					this->txt = false;
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 329)				if (this->talkDone) {
HXLINE( 331)					this->name = HX_("assets/data/kingTalk.txt",1e,6d,bd,25);
HXLINE( 332)					this->txt = true;
            				}
            				else {
HXLINE( 336)					this->name = HX_W(u":K:\u53bb\u627e\u5176\u4ed6\u5cf6\u6c11\u5011\u804a\u5929\u5427\uff01\u73fe\u5728\u7684\u4f60\u9084\u6c92\u6709\u8cc7\u683c\u8ddf\u6211\u8aaa\u8a71\u3002",cdbe,bccc);
HXLINE( 337)					this->txt = false;
            				}
            			}
            			break;
            			case (int)6: {
HXLINE( 340)				this->name = HX_W(u":N:\u88e1\u9762\u4f3c\u4e4e\u6709\u6bc0\u58de\u7684\u8a18\u5e33\u672c\uff0c\u73fe\u5df2\u7121\u6cd5\u9032\u5165\u3002",bfc4,bfcc);
HXLINE( 341)				this->txt = false;
            			}
            			break;
            			case (int)7: {
HXLINE( 344)				if (this->lakeTalking) {
HXLINE( 346)					this->name = HX_W(u":L:\u5feb\u53bb\u5192\u96aa\u5427\uff01",c609,0ff5);
HXLINE( 347)					this->txt = false;
            				}
            				else {
HXLINE( 351)					this->name = HX_("assets/data/lakeTalking.txt",50,a1,db,d0);
HXLINE( 352)					this->txt = true;
HXLINE( 353)					this->lakeTalking = true;
            				}
            			}
            			break;
            			case (int)8: {
HXLINE( 357)				if (this->saveStoneIntro) {
HXLINE( 359)					this->name = this->saveShow;
HXLINE( 360)					this->txt = false;
            				}
            				else {
HXLINE( 364)					this->name = HX_("assets/data/saveStoneIntro.txt",9f,fd,75,94);
HXLINE( 365)					this->txt = true;
HXLINE( 366)					this->saveStoneIntro = true;
HXLINE( 367)					this->saveStoneYes = true;
            				}
            			}
            			break;
            			case (int)9: {
HXLINE( 370)				if (this->stoneTextYes) {
HXLINE( 372)					this->name = HX_W(u":S:\u5982\u679c\u9084\u4e0d\u6e05\u695a\u898f\u5247\uff0c\u90a3\u500b\u770b\u677f\u4e0a\u6709\u8aaa\u660e\u53ef\u4ee5\u518d\u53bb\u78ba\u8a8d\uff01:S:\u7b49\u4f60\u6e96\u5099\u597d\uff0c\u5c31\u53ef\u4ee5\u76f4\u63a5\u5f9e\u7926\u5834\u5927\u9580\u9032\u5165\u7926\u5834\u4e86\u3002",2d87,8516);
HXLINE( 373)					this->txt = false;
            				}
            				else {
HXLINE( 377)					this->name = HX_("assets/data/spartanTalk.txt",c8,68,78,bb);
HXLINE( 378)					this->txt = true;
HXLINE( 379)					this->stoneTextYes = true;
            				}
            			}
            			break;
            			case (int)10: {
HXLINE( 382)				this->minerPoster->set_visible(true);
HXLINE( 383)				this->name = HX_W(u":N:\u7926\u5834\u898f\u5247",e428,d705);
HXLINE( 384)				this->txt = false;
HXLINE( 385)				this->background->set_visible(false);
HXLINE( 386)				this->text->set_visible(false);
            			}
            			break;
            			case (int)11: {
HXLINE( 389)				this->name = HX_("assets/data/streetSign.txt",9b,b3,85,e4);
HXLINE( 390)				this->txt = true;
HXLINE( 391)				if (!(this->readDaSign)) {
HXLINE( 392)					this->readDaSign = true;
            				}
            			}
            			break;
            			case (int)12: {
HXLINE( 394)				this->name = HX_("assets/data/appleAd.txt",06,4a,36,00);
HXLINE( 395)				this->txt = true;
            			}
            			break;
            			case (int)13: {
HXLINE( 397)				this->name = HX_W(u":N:\u4ea4\u6613\u6240",b4e4,a841);
HXLINE( 398)				this->txt = false;
            			}
            			break;
            			case (int)14: {
HXLINE( 400)				this->name = HX_("assets/data/house1Talk.txt",98,22,a6,f8);
HXLINE( 401)				this->txt = true;
            			}
            			break;
            			case (int)15: {
HXLINE( 403)				this->name = HX_W(u":N:\u662f\u5f88\u96e3\u7684\u6578\u5b78\u3002",f166,1f1b);
HXLINE( 404)				this->txt = false;
            			}
            			break;
            			case (int)16: {
HXLINE( 406)				if ((this->bananaCoin >= 10)) {
HXLINE( 408)					this->name = ((HX_W(u":N:\u4f60\u60f3\u7528\u591a\u5c11\u9999\u8549\u5e63\u8cb7\u80fd\u91cf\u5e63\uff1f\u4f60\u76ee\u524d\u6709 ",0a42,1ee1) + this->bananaCoin) + HX_W(u" \u9999\u8549\u5e63\u3002\u6309X\u9000\u51fa\uff0c\u6309R\u5168\u6578\u514c\u63db\u3002",800a,ae56));
HXLINE( 409)					this->coinText->set_visible(true);
            				}
            				else {
HXLINE( 412)					this->name = HX_W(u":N:\u4f60\u6c92\u6709\u8db3\u5920\u7684\u9999\u8549\u5e63\uff0c\u81f3\u5c11\u898110\u9999\u8549\u5e63\u3002",f6ef,3e49);
            				}
HXLINE( 413)				this->txt = false;
            			}
            			break;
            			case (int)17: {
HXLINE( 424)				if ((this->diamond >= 10)) {
HXLINE( 426)					this->name = ((HX_W(u":N:\u4f60\u60f3\u7528\u591a\u5c11\u80fd\u91cf\u5e63\u8cb7APS\u5e63\uff1f\u4f60\u76ee\u524d\u6709 ",c25a,c264) + this->diamond) + HX_W(u" \u80fd\u91cf\u5e63\u3002\u6309X\u9000\u51fa\u3002",90fc,31ac));
HXLINE( 427)					this->coinText->set_visible(true);
            				}
            				else {
HXLINE( 430)					this->name = HX_W(u":N:\u4f60\u6c92\u6709\u8db3\u5920\u7684\u80fd\u91cf\u5e63\uff0c\u81f3\u5c11\u898110\u80fd\u91cf\u5e63\u3002",0ccf,401e);
            				}
HXLINE( 431)				this->txt = false;
            			}
            			break;
            			case (int)18: {
HXLINE( 415)				if (((this->appleCoin + this->rodWave) >= 10)) {
HXLINE( 417)					this->name = ((HX_W(u":N:\u4f60\u60f3\u7528\u591a\u5c11APS\u5e63\u8cb7\u80fd\u91cf\u5e63\uff1f\u4f60\u76ee\u524d\u6709",ab00,f82f) + ::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((this->appleCoin + this->rodWave),2))) + HX_W(u"APS\u5e63\u3002\u6309X\u9000\u51fa\uff0c\u6309R\u5168\u6578\u514c\u63db\u3002",1b0e,0b70));
HXLINE( 418)					this->coinText->set_visible(true);
            				}
            				else {
HXLINE( 421)					this->name = HX_W(u":N:\u4f60\u6c92\u6709\u8db3\u5920\u7684APS\u5e63\uff0c\u81f3\u5c11\u898110APS\u5e63\u3002",6df7,b3e9);
            				}
HXLINE( 422)				this->txt = false;
            			}
            			break;
            			case (int)19: {
HXLINE( 442)				if ((this->diamond >= 10)) {
HXLINE( 444)					this->name = ((HX_W(u":N:\u4f60\u60f3\u7528\u591a\u5c11\u80fd\u91cf\u5e63\u8cb7\u9752\u86d9\u5e63\uff1f\u4f60\u76ee\u524d\u6709 ",825a,089f) + this->diamond) + HX_W(u" \u80fd\u91cf\u5e63\u3002\u6309X\u9000\u51fa\u3002",90fc,31ac));
HXLINE( 445)					this->coinText->set_visible(true);
            				}
            				else {
HXLINE( 448)					this->name = HX_W(u":N:\u4f60\u6c92\u6709\u8db3\u5920\u7684\u80fd\u91cf\u5e63\uff0c\u81f3\u5c11\u898110\u80fd\u91cf\u5e63\u3002",0ccf,401e);
            				}
HXLINE( 449)				this->txt = false;
            			}
            			break;
            			case (int)20: {
HXLINE( 433)				if ((this->dexCoin >= 10)) {
HXLINE( 435)					this->name = ((HX_W(u":N:\u4f60\u60f3\u7528\u591a\u5c11\u9752\u86d9\u5e63\u63db\u6210\u80fd\u91cf\u5e63\uff1f\u4f60\u73fe\u5728\u6709",cf15,0416) + this->dexCoin) + HX_W(u" \u9752\u86d9\u5e63\u3002\u6309X\u9000\u51fa\uff0c\u6309R\u5168\u6578\u514c\u63db\u3002",2c72,ae6c));
HXLINE( 436)					this->coinText->set_visible(true);
            				}
            				else {
HXLINE( 439)					this->name = HX_W(u":N:\u4f60\u6c92\u6709\u8db3\u5920\u7684\u9752\u86d9\u5e63\uff0c\u81f3\u5c11\u898110\u9752\u86d9\u5e63\u3002",83ef,86e6);
            				}
HXLINE( 440)				this->txt = false;
            			}
            			break;
            			case (int)21: {
HXLINE( 452)				this->name = HX_W(u":N:\u7a69\u5b9a\u5e63\u9444\u9020\u6240",2751,2ab5);
HXLINE( 453)				this->txt = false;
            			}
            			break;
            			case (int)22: {
HXLINE( 455)				this->name = HX_("assets/data/house2Talk.txt",99,8b,97,cb);
HXLINE( 456)				this->txt = true;
            			}
            			break;
            			case (int)23: {
HXLINE( 458)				if ((this->diamond >= 10)) {
HXLINE( 460)					this->name = ((HX_W(u":N:\u4f60\u60f3\u7528\u591a\u5c11\u80fd\u91cf\u5e63\u8cb7\u9999\u8549\u5e63\uff1f \u4f60\u76ee\u524d\u6709 ",01c4,8ce3) + this->diamond) + HX_W(u" \u80fd\u91cf\u5e63\u3002\u6309X\u9000\u51fa\u3002",90fc,31ac));
HXLINE( 461)					this->coinText->set_visible(true);
            				}
            				else {
HXLINE( 464)					this->name = HX_W(u":N:\u4f60\u6c92\u6709\u8db3\u5920\u7684\u80fd\u91cf\u5e63\uff0c\u81f3\u5c11\u898110\u80fd\u91cf\u5e63\u3002",0ccf,401e);
            				}
HXLINE( 465)				this->txt = false;
            			}
            			break;
            			case (int)24: {
HXLINE( 467)				this->name = HX_W(u":N:\u501f\u8cb8\u6240",a3ed,9370);
HXLINE( 468)				this->txt = false;
            			}
            			break;
            			case (int)25: {
HXLINE( 470)				this->name = HX_("assets/data/house3Talk.txt",9a,f4,88,9e);
HXLINE( 471)				this->txt = true;
            			}
            			break;
            			case (int)26: {
HXLINE( 476)				if ((this->diamond >= 10)) {
HXLINE( 478)					this->name = ((HX_W(u":N:\u4f60\u60f3\u653e\u591a\u5c11\u80fd\u91cf\u5e63\u501f\u8cb8\uff1f \u4f60\u76ee\u524d\u6709 ",a9f1,3793) + this->diamond) + HX_W(u" \u80fd\u91cf\u5e63\u3002\u6309X\u9000\u51fa\u3002",90fc,31ac));
HXLINE( 479)					this->coinText->set_visible(true);
            				}
            				else {
HXLINE( 482)					this->name = HX_W(u":N:\u4f60\u6c92\u6709\u8db3\u5920\u7684\u80fd\u91cf\u5e63\uff0c\u81f3\u5c11\u898110\u80fd\u91cf\u5e63\u3002",0ccf,401e);
            				}
HXLINE( 483)				this->txt = false;
            			}
            			break;
            			case (int)27: {
HXLINE( 473)				this->name = HX_("assets/data/dexNews.txt",33,7d,88,5d);
HXLINE( 474)				this->txt = true;
            			}
            			break;
            			case (int)28: {
HXLINE( 486)				this->name = HX_(":N:ApeStarter",df,d9,2d,b8);
HXLINE( 487)				this->txt = false;
            			}
            			break;
            		}
HXLINE( 492)		this->show(this->name,this->txt);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Dia_obj,context,(void))

void Dia_obj::getPointer(::String quest){
            	HX_STACKFRAME(&_hx_pos_df2db1a5b47250e8_497_getPointer)
HXLINE( 498)		this->pointerQ = quest;
HXLINE( 499)		if ((this->pointerQ == HX_("winGame",2e,06,3f,d5))) {
HXLINE( 502)			this->pointer->setPointer(this->text->x,(this->text->y + 90),90,::Array_obj< ::String >::fromData( _hx_array_data_0033f51c_11,2),HX_("ud",4f,66,00,00));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Dia_obj,getPointer,(void))

void Dia_obj::updateLr(){
            	HX_STACKFRAME(&_hx_pos_df2db1a5b47250e8_508_updateLr)
HXLINE( 509)		bool left = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_0033f51c_13,2),-1);
HXLINE( 510)		bool right = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_0033f51c_14,2),-1);
HXLINE( 511)		if (this->coinText->visible) {
HXLINE( 513)			if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p1BaToCoMach_dyn() )) {
HXLINE( 515)				bool _hx_tmp;
HXDLIN( 515)				if (left) {
HXLINE( 515)					_hx_tmp = (this->coinOut != 10);
            				}
            				else {
HXLINE( 515)					_hx_tmp = false;
            				}
HXDLIN( 515)				if (_hx_tmp) {
HXLINE( 516)					 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 516)					_hx_tmp->coinOut = (_hx_tmp->coinOut - 10);
            				}
HXLINE( 517)				bool _hx_tmp1;
HXDLIN( 517)				if (right) {
HXLINE( 517)					Float _hx_tmp = (( (Float)(this->coinOut) ) / ( (Float)(10) ));
HXDLIN( 517)					_hx_tmp1 = (_hx_tmp != ::Std_obj::_hx_int((this->bananaCoin / ( (Float)(10) ))));
            				}
            				else {
HXLINE( 517)					_hx_tmp1 = false;
            				}
HXDLIN( 517)				if (_hx_tmp1) {
HXLINE( 518)					 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 518)					_hx_tmp->coinOut = (_hx_tmp->coinOut + 10);
            				}
HXLINE( 519)				this->machGain = ::flixel::math::FlxMath_obj::roundDecimal((this->bcCoinIn - (( (Float)(this->bck) ) / ( (Float)((this->bcBananaCoinIn + this->coinOut)) ))),2);
HXLINE( 520)				this->coinText->set_text(((((HX_("",00,00,00,00) + this->coinOut) + HX_W(u"  \u9999\u8549\u5e63\u63db ",455d,5bdb)) + this->machGain) + HX_W(u" \u80fd\u91cf\u5e63",8260,6fb2)));
            			}
            			else {
HXLINE( 522)				if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p1ApToCoMach_dyn() )) {
HXLINE( 524)					bool _hx_tmp;
HXDLIN( 524)					if (left) {
HXLINE( 524)						_hx_tmp = (this->coinOut != 10);
            					}
            					else {
HXLINE( 524)						_hx_tmp = false;
            					}
HXDLIN( 524)					if (_hx_tmp) {
HXLINE( 525)						 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 525)						_hx_tmp->coinOut = (_hx_tmp->coinOut - 10);
            					}
HXLINE( 526)					bool _hx_tmp1;
HXDLIN( 526)					if (right) {
HXLINE( 526)						Float _hx_tmp = (( (Float)(this->coinOut) ) / ( (Float)(10) ));
HXDLIN( 526)						_hx_tmp1 = (_hx_tmp != ::Std_obj::_hx_int(((this->appleCoin + this->rodWave) / ( (Float)(10) ))));
            					}
            					else {
HXLINE( 526)						_hx_tmp1 = false;
            					}
HXDLIN( 526)					if (_hx_tmp1) {
HXLINE( 527)						 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 527)						_hx_tmp->coinOut = (_hx_tmp->coinOut + 10);
            					}
HXLINE( 528)					this->machGain = ::flixel::math::FlxMath_obj::roundDecimal((this->acCoinIn - (( (Float)(this->ack) ) / ( (Float)((this->acAppleCoinIn + this->coinOut)) ))),2);
HXLINE( 530)					this->coinText->set_text(((((HX_("",00,00,00,00) + this->coinOut) + HX_W(u"  APS\u5e63\u63db ",01b9,3aed)) + this->machGain) + HX_W(u" \u80fd\u91cf\u5e63",8260,6fb2)));
            				}
            				else {
HXLINE( 532)					if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p1CoToApMach_dyn() )) {
HXLINE( 534)						bool _hx_tmp;
HXDLIN( 534)						if (left) {
HXLINE( 534)							_hx_tmp = (this->coinOut != 10);
            						}
            						else {
HXLINE( 534)							_hx_tmp = false;
            						}
HXDLIN( 534)						if (_hx_tmp) {
HXLINE( 535)							 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 535)							_hx_tmp->coinOut = (_hx_tmp->coinOut - 10);
            						}
HXLINE( 536)						bool _hx_tmp1;
HXDLIN( 536)						if (right) {
HXLINE( 536)							Float _hx_tmp = (( (Float)(this->coinOut) ) / ( (Float)(10) ));
HXDLIN( 536)							_hx_tmp1 = (_hx_tmp != ::Std_obj::_hx_int((this->diamond / ( (Float)(10) ))));
            						}
            						else {
HXLINE( 536)							_hx_tmp1 = false;
            						}
HXDLIN( 536)						if (_hx_tmp1) {
HXLINE( 537)							 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 537)							_hx_tmp->coinOut = (_hx_tmp->coinOut + 10);
            						}
HXLINE( 538)						this->machGain = ::flixel::math::FlxMath_obj::roundDecimal((this->caAppleCoinIn - (( (Float)(this->cak) ) / ( (Float)((this->caCoinIn + this->coinOut)) ))),2);
HXLINE( 539)						this->coinText->set_text(((((HX_("",00,00,00,00) + this->coinOut) + HX_W(u"  \u80fd\u91cf\u5e63\u63db ",46ce,c67b)) + this->machGain) + HX_W(u" APS\u5e63",d00b,777a)));
            					}
            					else {
HXLINE( 541)						if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p1CoToDeMach_dyn() )) {
HXLINE( 543)							bool _hx_tmp;
HXDLIN( 543)							if (left) {
HXLINE( 543)								_hx_tmp = (this->coinOut != 10);
            							}
            							else {
HXLINE( 543)								_hx_tmp = false;
            							}
HXDLIN( 543)							if (_hx_tmp) {
HXLINE( 544)								 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 544)								_hx_tmp->coinOut = (_hx_tmp->coinOut - 10);
            							}
HXLINE( 545)							bool _hx_tmp1;
HXDLIN( 545)							if (right) {
HXLINE( 545)								Float _hx_tmp = (( (Float)(this->coinOut) ) / ( (Float)(10) ));
HXDLIN( 545)								_hx_tmp1 = (_hx_tmp != ::Std_obj::_hx_int((this->diamond / ( (Float)(10) ))));
            							}
            							else {
HXLINE( 545)								_hx_tmp1 = false;
            							}
HXDLIN( 545)							if (_hx_tmp1) {
HXLINE( 546)								 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 546)								_hx_tmp->coinOut = (_hx_tmp->coinOut + 10);
            							}
HXLINE( 547)							this->machGain = ( (Float)((this->coinOut * this->dexPrizeBuy)) );
HXLINE( 548)							this->coinText->set_text(((((HX_("",00,00,00,00) + this->coinOut) + HX_W(u" \u80fd\u91cf\u5e63\u63db ",4eae,2707)) + this->machGain) + HX_W(u" \u9752\u86d9\u5e63",f007,39ec)));
            						}
            						else {
HXLINE( 550)							if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p1DeToCoMach_dyn() )) {
HXLINE( 552)								bool _hx_tmp;
HXDLIN( 552)								if (left) {
HXLINE( 552)									_hx_tmp = (this->coinOut != 10);
            								}
            								else {
HXLINE( 552)									_hx_tmp = false;
            								}
HXDLIN( 552)								if (_hx_tmp) {
HXLINE( 553)									 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 553)									_hx_tmp->coinOut = (_hx_tmp->coinOut - 10);
            								}
HXLINE( 554)								bool _hx_tmp1;
HXDLIN( 554)								if (right) {
HXLINE( 554)									Float _hx_tmp = (( (Float)(this->coinOut) ) / ( (Float)(10) ));
HXDLIN( 554)									_hx_tmp1 = (_hx_tmp != ::Std_obj::_hx_int((this->diamond / ( (Float)(10) ))));
            								}
            								else {
HXLINE( 554)									_hx_tmp1 = false;
            								}
HXDLIN( 554)								if (_hx_tmp1) {
HXLINE( 555)									 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 555)									_hx_tmp->coinOut = (_hx_tmp->coinOut + 10);
            								}
HXLINE( 556)								this->machGain = (( (Float)(this->coinOut) ) * this->dexPrizeSell);
HXLINE( 557)								this->coinText->set_text(((((HX_("",00,00,00,00) + this->coinOut) + HX_W(u" \u9752\u86d9\u5e63\u63db ",1bd5,6b67)) + this->machGain) + HX_W(u" \u80fd\u91cf\u5e63",8260,6fb2)));
            							}
            							else {
HXLINE( 559)								if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p2Mach_dyn() )) {
HXLINE( 561)									bool _hx_tmp;
HXDLIN( 561)									if (left) {
HXLINE( 561)										_hx_tmp = (this->coinOut != 10);
            									}
            									else {
HXLINE( 561)										_hx_tmp = false;
            									}
HXDLIN( 561)									if (_hx_tmp) {
HXLINE( 562)										 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 562)										_hx_tmp->coinOut = (_hx_tmp->coinOut - 10);
            									}
HXLINE( 563)									bool _hx_tmp1;
HXDLIN( 563)									if (right) {
HXLINE( 563)										Float _hx_tmp = (( (Float)(this->coinOut) ) / ( (Float)(10) ));
HXDLIN( 563)										_hx_tmp1 = (_hx_tmp != ::Std_obj::_hx_int((this->diamond / ( (Float)(10) ))));
            									}
            									else {
HXLINE( 563)										_hx_tmp1 = false;
            									}
HXDLIN( 563)									if (_hx_tmp1) {
HXLINE( 564)										 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 564)										_hx_tmp->coinOut = (_hx_tmp->coinOut + 10);
            									}
HXLINE( 565)									this->machGain = ( (Float)((this->coinOut * this->bananaPrize)) );
HXLINE( 566)									this->coinText->set_text(((((HX_("",00,00,00,00) + this->coinOut) + HX_W(u" \u80fd\u91cf\u5e63\u63db ",4eae,2707)) + this->machGain) + HX_W(u" \u9999\u8549\u5e63",4d6f,e0ce)));
            								}
            								else {
HXLINE( 568)									if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p3Mach_dyn() )) {
HXLINE( 570)										bool _hx_tmp;
HXDLIN( 570)										if (left) {
HXLINE( 570)											_hx_tmp = (this->coinOut != 10);
            										}
            										else {
HXLINE( 570)											_hx_tmp = false;
            										}
HXDLIN( 570)										if (_hx_tmp) {
HXLINE( 571)											 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 571)											_hx_tmp->coinOut = (_hx_tmp->coinOut - 10);
            										}
HXLINE( 572)										bool _hx_tmp1;
HXDLIN( 572)										if (right) {
HXLINE( 572)											Float _hx_tmp = (( (Float)(this->coinOut) ) / ( (Float)(10) ));
HXDLIN( 572)											_hx_tmp1 = (_hx_tmp != ::Std_obj::_hx_int((this->diamond / ( (Float)(10) ))));
            										}
            										else {
HXLINE( 572)											_hx_tmp1 = false;
            										}
HXDLIN( 572)										if (_hx_tmp1) {
HXLINE( 573)											 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 573)											_hx_tmp->coinOut = (_hx_tmp->coinOut + 10);
            										}
HXLINE( 574)										this->machGain = ::flixel::math::FlxMath_obj::roundDecimal(((this->loanGain + this->coinOut) * this->interest),2);
HXLINE( 575)										this->coinText->set_text(((HX_W(u"\u5df2\u6295\u8cc7",910b,4d7d) + (this->loanGain + this->coinOut)) + ((HX_W(u"\u80fd\u91cf\u5e63 \u5229\u606f10\u79d2 ",539b,b00d) + this->machGain) + HX_W(u" \u80fd\u91cf\u5e63",8260,6fb2))));
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Dia_obj,updateLr,(void))

void Dia_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_df2db1a5b47250e8_582_update)
HXLINE( 583)		this->updateEnter();
HXLINE( 584)		this->updateSkip();
HXLINE( 585)		this->updateLr();
HXLINE( 586)		bool x = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_0033f51c_16,2),-1);
HXLINE( 587)		bool r = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_0033f51c_17,1),-1);
HXLINE( 590)		if (this->coinText->visible) {
HXLINE( 592)			if (x) {
HXLINE( 594)				this->cancel->play(null(),null(),null());
HXLINE( 595)				this->coinOut = 10;
HXLINE( 596)				 ::flixel::text::FlxText _hx_tmp = this->coinText;
HXDLIN( 596)				_hx_tmp->set_text(::Std_obj::string(this->coinOut));
HXLINE( 597)				this->coinText->set_visible(false);
HXLINE( 598)				this->set_visible(false);
HXLINE( 599)				this->set_active(false);
            			}
HXLINE( 602)			if (r) {
HXLINE( 604)				this->check->play(null(),null(),null());
HXLINE( 605)				if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p1ApToCoMach_dyn() )) {
HXLINE( 607)					this->machGain = ::flixel::math::FlxMath_obj::roundDecimal((this->acCoinIn - (( (Float)(this->ack) ) / ((this->acAppleCoinIn + this->appleCoin) + this->rodWave))),2);
HXLINE( 608)					this->appleCoin = ( (Float)(0) );
HXLINE( 609)					this->rodWave = ( (Float)(0) );
            				}
            				else {
HXLINE( 611)					if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p1BaToCoMach_dyn() )) {
HXLINE( 613)						this->machGain = ::flixel::math::FlxMath_obj::roundDecimal((this->bcCoinIn - (( (Float)(this->bck) ) / (this->bcBananaCoinIn + this->bananaCoin))),2);
HXLINE( 614)						this->bananaCoin = ( (Float)(0) );
            					}
            					else {
HXLINE( 616)						if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p1DeToCoMach_dyn() )) {
HXLINE( 618)							this->machGain = ::flixel::math::FlxMath_obj::roundDecimal((this->dexCoin * this->dexPrizeSell),2);
HXLINE( 619)							this->dexCoin = ( (Float)(0) );
            						}
            					}
            				}
HXLINE( 621)				 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 621)				_hx_tmp->diamond = (_hx_tmp->diamond + this->machGain);
HXLINE( 622)				this->name = ((HX_W(u":N:\u4f60\u5f97\u5230\u4e86 ",bc40,a52e) + this->machGain) + HX_W(u" \u80fd\u91cf\u5e63\u3002",e945,196b));
HXLINE( 623)				this->txt = false;
HXLINE( 624)				this->show(this->name,this->txt);
HXLINE( 626)				this->coinOut = 10;
HXLINE( 627)				 ::flixel::text::FlxText _hx_tmp1 = this->coinText;
HXDLIN( 627)				_hx_tmp1->set_text(::Std_obj::string(this->coinOut));
HXLINE( 628)				this->coinText->set_visible(false);
HXLINE( 629)				this->updateDiamond = true;
            			}
            		}
HXLINE( 633)		this->super::update(elapsed);
            	}


void Dia_obj::updateEnter(){
            	HX_GC_STACKFRAME(&_hx_pos_df2db1a5b47250e8_638_updateEnter)
HXDLIN( 638)		 ::Dia _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 639)		bool enter = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_0033f51c_20,2),-1);
HXLINE( 640)		bool _hx_tmp;
HXDLIN( 640)		if (enter) {
HXLINE( 640)			_hx_tmp = this->textRunDone;
            		}
            		else {
HXLINE( 640)			_hx_tmp = false;
            		}
HXDLIN( 640)		if (_hx_tmp) {
HXLINE( 642)			{
HXLINE( 642)				 ::flixel::FlxObject Object = this->enterCur;
HXDLIN( 642)				::flixel::effects::FlxFlicker_obj::stopFlickering(Object);
            			}
HXLINE( 643)			this->enterCur->set_visible(false);
HXLINE( 644)			this->next->play(null(),null(),null());
HXLINE( 646)			if (this->minerPoster->visible) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Dia,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer timer){
            					HX_GC_STACKFRAME(&_hx_pos_df2db1a5b47250e8_649_updateEnter)
HXLINE( 650)					_gthis->minerPoster->set_visible(false);
HXLINE( 651)					_gthis->background->set_visible(true);
HXLINE( 652)					_gthis->text->set_visible(true);
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 648)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(((Float)0.5), ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
HXLINE( 657)			if (this->pointer->visible) {
HXLINE( 659)				this->check->play(null(),null(),null());
HXLINE( 660)				if ((this->pointerQ == HX_("winGame",2e,06,3f,d5))) {
HXLINE( 663)					::String _hx_switch_0 = this->pointer->selected;
            					if (  (_hx_switch_0==HX_("no",41,60,00,00)) ){
HXLINE( 669)						this->name = HX_W(u":N:\u7b49\u5230\u4f60\u60f3\u96e2\u958b\u518d\u4f86\u9019\u908a\u5427\u3002",7245,422f);
HXLINE( 670)						this->txt = false;
HXLINE( 671)						this->show(this->name,this->txt);
HXLINE( 668)						goto _hx_goto_18;
            					}
            					if (  (_hx_switch_0==HX_("yes",27,29,5c,00)) ){
HXLINE( 666)						this->win = true;
HXLINE( 667)						this->set_visible(false);
HXLINE( 665)						goto _hx_goto_18;
            					}
            					_hx_goto_18:;
            				}
HXLINE( 674)				this->pointer->set_visible(false);
HXLINE( 675)				this->pointerQ = HX_("none",b8,12,0a,49);
            			}
            			else {
HXLINE( 678)				if (this->coinText->visible) {
HXLINE( 680)					this->next->play(null(),null(),null());
HXLINE( 681)					if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p1BaToCoMach_dyn() )) {
HXLINE( 683)						this->name = ((HX_W(u":N:\u4f60\u5f97\u5230\u4e86 ",bc40,a52e) + this->machGain) + HX_W(u" \u80fd\u91cf\u5e63\u3002",e945,196b));
HXLINE( 684)						this->txt = false;
HXLINE( 685)						this->show(this->name,this->txt);
HXLINE( 688)						 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 688)						_hx_tmp->diamond = (_hx_tmp->diamond + this->machGain);
HXLINE( 689)						 ::flixel::text::FlxText _hx_tmp1 = this->diamondUiText;
HXDLIN( 689)						_hx_tmp1->set_text(::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal(this->diamond,2)));
HXLINE( 690)						 ::Dia _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 690)						_hx_tmp2->bananaCoin = (_hx_tmp2->bananaCoin - ( (Float)(this->coinOut) ));
HXLINE( 693)						 ::Dia _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 693)						_hx_tmp3->bcBananaCoinIn = (_hx_tmp3->bcBananaCoinIn + this->coinOut);
HXLINE( 694)						 ::Dia _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 694)						_hx_tmp4->bcCoinIn = (_hx_tmp4->bcCoinIn - this->machGain);
            					}
            					else {
HXLINE( 696)						if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p1ApToCoMach_dyn() )) {
HXLINE( 698)							this->name = ((HX_W(u":N:\u4f60\u5f97\u5230\u4e86 ",bc40,a52e) + this->machGain) + HX_W(u" \u80fd\u91cf\u5e63\u3002",e945,196b));
HXLINE( 699)							this->txt = false;
HXLINE( 700)							this->show(this->name,this->txt);
HXLINE( 703)							 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 703)							_hx_tmp->diamond = (_hx_tmp->diamond + this->machGain);
HXLINE( 704)							 ::flixel::text::FlxText _hx_tmp1 = this->diamondUiText;
HXDLIN( 704)							_hx_tmp1->set_text(::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal(this->diamond,2)));
HXLINE( 706)							 ::Dia _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 706)							_hx_tmp2->rodWave = (_hx_tmp2->rodWave - ( (Float)(this->coinOut) ));
HXLINE( 707)							if ((this->rodWave < 0)) {
HXLINE( 709)								 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 709)								_hx_tmp->appleCoin = (_hx_tmp->appleCoin + this->rodWave);
HXLINE( 710)								this->rodWave = ( (Float)(0) );
            							}
HXLINE( 713)							 ::Dia _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 713)							_hx_tmp3->acAppleCoinIn = (_hx_tmp3->acAppleCoinIn + this->coinOut);
HXLINE( 714)							 ::Dia _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 714)							_hx_tmp4->acCoinIn = (_hx_tmp4->acCoinIn - this->machGain);
            						}
            						else {
HXLINE( 716)							if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p1CoToApMach_dyn() )) {
HXLINE( 718)								this->name = ((HX_W(u":N:\u4f60\u5f97\u5230\u4e86 ",bc40,a52e) + this->machGain) + HX_W(u" APS\u5e63\u3002",387a,7519));
HXLINE( 719)								this->txt = false;
HXLINE( 720)								this->show(this->name,this->txt);
HXLINE( 722)								 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 722)								_hx_tmp->diamond = (_hx_tmp->diamond - ( (Float)(this->coinOut) ));
HXLINE( 723)								 ::flixel::text::FlxText _hx_tmp1 = this->diamondUiText;
HXDLIN( 723)								_hx_tmp1->set_text(::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal(this->diamond,2)));
HXLINE( 724)								 ::Dia _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 724)								_hx_tmp2->appleCoin = (_hx_tmp2->appleCoin + this->machGain);
HXLINE( 726)								 ::Dia _hx_tmp3 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 726)								_hx_tmp3->caCoinIn = (_hx_tmp3->caCoinIn + this->coinOut);
HXLINE( 727)								 ::Dia _hx_tmp4 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 727)								_hx_tmp4->caAppleCoinIn = (_hx_tmp4->caAppleCoinIn - this->machGain);
            							}
            							else {
HXLINE( 730)								if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p1CoToDeMach_dyn() )) {
HXLINE( 732)									this->name = ((HX_W(u":N:\u4f60\u5f97\u5230 ",c790,7a31) + this->machGain) + HX_W(u" \u9752\u86d9\u5e63\u3002",3dfe,6a16));
HXLINE( 733)									this->txt = false;
HXLINE( 734)									this->show(this->name,this->txt);
HXLINE( 735)									 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 735)									_hx_tmp->diamond = (_hx_tmp->diamond - ( (Float)(this->coinOut) ));
HXLINE( 736)									 ::flixel::text::FlxText _hx_tmp1 = this->diamondUiText;
HXDLIN( 736)									_hx_tmp1->set_text(::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal(this->diamond,2)));
HXLINE( 737)									 ::Dia _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 737)									_hx_tmp2->dexCoin = (_hx_tmp2->dexCoin + this->machGain);
            								}
            								else {
HXLINE( 739)									if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p1DeToCoMach_dyn() )) {
HXLINE( 741)										this->name = ((HX_W(u":N:\u4f60\u5f97\u5230 ",c790,7a31) + this->machGain) + HX_W(u" \u80fd\u91cf\u5e63\u3002",e945,196b));
HXLINE( 742)										this->txt = false;
HXLINE( 743)										this->show(this->name,this->txt);
HXLINE( 744)										 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 744)										_hx_tmp->diamond = (_hx_tmp->diamond + this->machGain);
HXLINE( 745)										 ::flixel::text::FlxText _hx_tmp1 = this->diamondUiText;
HXDLIN( 745)										_hx_tmp1->set_text(::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal(this->diamond,2)));
HXLINE( 746)										 ::Dia _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 746)										_hx_tmp2->dexCoin = (_hx_tmp2->dexCoin - ( (Float)(this->coinOut) ));
            									}
            									else {
HXLINE( 749)										if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p2Mach_dyn() )) {
HXLINE( 751)											this->name = ((HX_W(u":N:\u4f60\u5f97\u5230 ",c790,7a31) + this->machGain) + HX_W(u" \u9999\u8549\u5e63\u3002",3196,436b));
HXLINE( 752)											this->txt = false;
HXLINE( 753)											this->show(this->name,this->txt);
HXLINE( 754)											 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 754)											_hx_tmp->diamond = (_hx_tmp->diamond - ( (Float)(this->coinOut) ));
HXLINE( 755)											 ::flixel::text::FlxText _hx_tmp1 = this->diamondUiText;
HXDLIN( 755)											_hx_tmp1->set_text(::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal(this->diamond,2)));
HXLINE( 756)											 ::Dia _hx_tmp2 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 756)											_hx_tmp2->bananaCoin = (_hx_tmp2->bananaCoin + this->machGain);
            										}
            										else {
HXLINE( 758)											if (::hx::IsPointerEq( this->npcType,::NpcType_obj::p3Mach_dyn() )) {
HXLINE( 760)												this->name = ((HX_W(u":N:\u4f60\u5171\u6295\u8cc7\u4e86",5335,a701) + (this->coinOut + this->loanGain)) + HX_W(u"\u80fd\u91cf\u5e63\u3002",3925,615c));
HXLINE( 761)												this->txt = false;
HXLINE( 762)												this->show(this->name,this->txt);
HXLINE( 763)												 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 763)												_hx_tmp->diamond = (_hx_tmp->diamond - ( (Float)(this->coinOut) ));
HXLINE( 764)												 ::Dia _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 764)												_hx_tmp1->loanGain = (_hx_tmp1->loanGain + this->coinOut);
HXLINE( 765)												 ::flixel::text::FlxText _hx_tmp2 = this->diamondUiText;
HXDLIN( 765)												_hx_tmp2->set_text(::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal(this->diamond,2)));
HXLINE( 766)												if (!(this->loan)) {
HXLINE( 768)													this->loan = true;
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXLINE( 771)					this->coinOut = 10;
HXLINE( 772)					 ::flixel::text::FlxText _hx_tmp = this->coinText;
HXDLIN( 772)					_hx_tmp->set_text(::Std_obj::string(this->coinOut));
HXLINE( 773)					this->coinText->set_visible(false);
HXLINE( 774)					this->updateDiamond = true;
            				}
            				else {
HXLINE( 779)					this->next->play(null(),null(),null());
HXLINE( 780)					 ::Dia _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 780)					_hx_tmp->profile = (_hx_tmp->profile + 2);
HXLINE( 781)					this->changeProfile();
HXLINE( 782)					 ::Dia _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 782)					_hx_tmp1->i = (_hx_tmp1->i + 2);
HXLINE( 785)					if ((this->i > this->dilog_boxes->length)) {
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::Dia,_gthis) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_df2db1a5b47250e8_789_updateEnter)
HXLINE( 790)							_gthis->set_visible(false);
HXLINE( 791)							_gthis->set_active(false);
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE( 787)						this->text->resetText(HX_("  ",00,1c,00,00));
HXLINE( 788)						this->text->start(null(),false,false,null(), ::Dynamic(new _hx_Closure_1(_gthis)));
            					}
            					else {
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_2, ::Dia,_gthis) HXARGC(0)
            						void _hx_run(){
            							HX_GC_STACKFRAME(&_hx_pos_df2db1a5b47250e8_800_updateEnter)
HXLINE( 801)							_gthis->textRunDone = true;
HXLINE( 802)							_gthis->enterCur->set_visible(true);
HXLINE( 803)							{
HXLINE( 803)								 ::Dynamic CompletionCallback = null();
HXDLIN( 803)								 ::Dynamic ProgressCallback = null();
HXDLIN( 803)								::flixel::effects::FlxFlicker_obj::flicker(( ( ::flixel::FlxObject)(_gthis->enterCur) ),0,((Float)0.5),true,true,CompletionCallback,ProgressCallback);
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE( 797)						this->textRunDone = false;
HXLINE( 798)						this->text->resetText(this->dilog_boxes->__get(this->i));
HXLINE( 799)						this->text->start(null(),false,false,null(), ::Dynamic(new _hx_Closure_2(_gthis)));
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Dia_obj,updateEnter,(void))

void Dia_obj::updateSkip(){
            	HX_STACKFRAME(&_hx_pos_df2db1a5b47250e8_812_updateSkip)
HXLINE( 813)		bool vKey = false;
HXLINE( 814)		vKey = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_0033f51c_25,1),-1);
HXLINE( 815)		if (vKey) {
HXLINE( 817)			this->set_visible(false);
HXLINE( 818)			this->set_active(false);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Dia_obj,updateSkip,(void))


::hx::ObjectPtr< Dia_obj > Dia_obj::__new() {
	::hx::ObjectPtr< Dia_obj > __this = new Dia_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Dia_obj > Dia_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Dia_obj *__this = (Dia_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Dia_obj), true, "Dia"));
	*(void **)__this = Dia_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Dia_obj::Dia_obj()
{
}

void Dia_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Dia);
	HX_MARK_MEMBER_NAME(win,"win");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(text,"text");
	HX_MARK_MEMBER_NAME(enterCur,"enterCur");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(check,"check");
	HX_MARK_MEMBER_NAME(cancel,"cancel");
	HX_MARK_MEMBER_NAME(minerPoster,"minerPoster");
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_MEMBER_NAME(profile,"profile");
	HX_MARK_MEMBER_NAME(profilePic,"profilePic");
	HX_MARK_MEMBER_NAME(npcType,"npcType");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(dilog_boxes,"dilog_boxes");
	HX_MARK_MEMBER_NAME(txt,"txt");
	HX_MARK_MEMBER_NAME(textRunDone,"textRunDone");
	HX_MARK_MEMBER_NAME(saveShow,"saveShow");
	HX_MARK_MEMBER_NAME(diaUpDown,"diaUpDown");
	HX_MARK_MEMBER_NAME(pointer,"pointer");
	HX_MARK_MEMBER_NAME(pointerQ,"pointerQ");
	HX_MARK_MEMBER_NAME(saveStoneIntro,"saveStoneIntro");
	HX_MARK_MEMBER_NAME(stoneTextYes,"stoneTextYes");
	HX_MARK_MEMBER_NAME(leafYes,"leafYes");
	HX_MARK_MEMBER_NAME(talkMiss,"talkMiss");
	HX_MARK_MEMBER_NAME(talkDone,"talkDone");
	HX_MARK_MEMBER_NAME(readDaSign,"readDaSign");
	HX_MARK_MEMBER_NAME(lakeTalking,"lakeTalking");
	HX_MARK_MEMBER_NAME(saveStoneYes,"saveStoneYes");
	HX_MARK_MEMBER_NAME(appleCoin,"appleCoin");
	HX_MARK_MEMBER_NAME(bananaCoin,"bananaCoin");
	HX_MARK_MEMBER_NAME(dexCoin,"dexCoin");
	HX_MARK_MEMBER_NAME(rodWave,"rodWave");
	HX_MARK_MEMBER_NAME(coinText,"coinText");
	HX_MARK_MEMBER_NAME(bck,"bck");
	HX_MARK_MEMBER_NAME(bcBananaCoinIn,"bcBananaCoinIn");
	HX_MARK_MEMBER_NAME(bcCoinIn,"bcCoinIn");
	HX_MARK_MEMBER_NAME(ack,"ack");
	HX_MARK_MEMBER_NAME(acAppleCoinIn,"acAppleCoinIn");
	HX_MARK_MEMBER_NAME(acCoinIn,"acCoinIn");
	HX_MARK_MEMBER_NAME(cak,"cak");
	HX_MARK_MEMBER_NAME(caCoinIn,"caCoinIn");
	HX_MARK_MEMBER_NAME(caAppleCoinIn,"caAppleCoinIn");
	HX_MARK_MEMBER_NAME(coinOut,"coinOut");
	HX_MARK_MEMBER_NAME(machGain,"machGain");
	HX_MARK_MEMBER_NAME(bananaPrize,"bananaPrize");
	HX_MARK_MEMBER_NAME(dexPrizeBuy,"dexPrizeBuy");
	HX_MARK_MEMBER_NAME(dexPrizeSell,"dexPrizeSell");
	HX_MARK_MEMBER_NAME(interest,"interest");
	HX_MARK_MEMBER_NAME(loanGain,"loanGain");
	HX_MARK_MEMBER_NAME(loan,"loan");
	HX_MARK_MEMBER_NAME(diamond,"diamond");
	HX_MARK_MEMBER_NAME(diamondUiText,"diamondUiText");
	HX_MARK_MEMBER_NAME(updateDiamond,"updateDiamond");
	HX_MARK_MEMBER_NAME(save,"save");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Dia_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(win,"win");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(text,"text");
	HX_VISIT_MEMBER_NAME(enterCur,"enterCur");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(check,"check");
	HX_VISIT_MEMBER_NAME(cancel,"cancel");
	HX_VISIT_MEMBER_NAME(minerPoster,"minerPoster");
	HX_VISIT_MEMBER_NAME(i,"i");
	HX_VISIT_MEMBER_NAME(profile,"profile");
	HX_VISIT_MEMBER_NAME(profilePic,"profilePic");
	HX_VISIT_MEMBER_NAME(npcType,"npcType");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(dilog_boxes,"dilog_boxes");
	HX_VISIT_MEMBER_NAME(txt,"txt");
	HX_VISIT_MEMBER_NAME(textRunDone,"textRunDone");
	HX_VISIT_MEMBER_NAME(saveShow,"saveShow");
	HX_VISIT_MEMBER_NAME(diaUpDown,"diaUpDown");
	HX_VISIT_MEMBER_NAME(pointer,"pointer");
	HX_VISIT_MEMBER_NAME(pointerQ,"pointerQ");
	HX_VISIT_MEMBER_NAME(saveStoneIntro,"saveStoneIntro");
	HX_VISIT_MEMBER_NAME(stoneTextYes,"stoneTextYes");
	HX_VISIT_MEMBER_NAME(leafYes,"leafYes");
	HX_VISIT_MEMBER_NAME(talkMiss,"talkMiss");
	HX_VISIT_MEMBER_NAME(talkDone,"talkDone");
	HX_VISIT_MEMBER_NAME(readDaSign,"readDaSign");
	HX_VISIT_MEMBER_NAME(lakeTalking,"lakeTalking");
	HX_VISIT_MEMBER_NAME(saveStoneYes,"saveStoneYes");
	HX_VISIT_MEMBER_NAME(appleCoin,"appleCoin");
	HX_VISIT_MEMBER_NAME(bananaCoin,"bananaCoin");
	HX_VISIT_MEMBER_NAME(dexCoin,"dexCoin");
	HX_VISIT_MEMBER_NAME(rodWave,"rodWave");
	HX_VISIT_MEMBER_NAME(coinText,"coinText");
	HX_VISIT_MEMBER_NAME(bck,"bck");
	HX_VISIT_MEMBER_NAME(bcBananaCoinIn,"bcBananaCoinIn");
	HX_VISIT_MEMBER_NAME(bcCoinIn,"bcCoinIn");
	HX_VISIT_MEMBER_NAME(ack,"ack");
	HX_VISIT_MEMBER_NAME(acAppleCoinIn,"acAppleCoinIn");
	HX_VISIT_MEMBER_NAME(acCoinIn,"acCoinIn");
	HX_VISIT_MEMBER_NAME(cak,"cak");
	HX_VISIT_MEMBER_NAME(caCoinIn,"caCoinIn");
	HX_VISIT_MEMBER_NAME(caAppleCoinIn,"caAppleCoinIn");
	HX_VISIT_MEMBER_NAME(coinOut,"coinOut");
	HX_VISIT_MEMBER_NAME(machGain,"machGain");
	HX_VISIT_MEMBER_NAME(bananaPrize,"bananaPrize");
	HX_VISIT_MEMBER_NAME(dexPrizeBuy,"dexPrizeBuy");
	HX_VISIT_MEMBER_NAME(dexPrizeSell,"dexPrizeSell");
	HX_VISIT_MEMBER_NAME(interest,"interest");
	HX_VISIT_MEMBER_NAME(loanGain,"loanGain");
	HX_VISIT_MEMBER_NAME(loan,"loan");
	HX_VISIT_MEMBER_NAME(diamond,"diamond");
	HX_VISIT_MEMBER_NAME(diamondUiText,"diamondUiText");
	HX_VISIT_MEMBER_NAME(updateDiamond,"updateDiamond");
	HX_VISIT_MEMBER_NAME(save,"save");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Dia_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { return ::hx::Val( i ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"win") ) { return ::hx::Val( win ); }
		if (HX_FIELD_EQ(inName,"txt") ) { return ::hx::Val( txt ); }
		if (HX_FIELD_EQ(inName,"bck") ) { return ::hx::Val( bck ); }
		if (HX_FIELD_EQ(inName,"ack") ) { return ::hx::Val( ack ); }
		if (HX_FIELD_EQ(inName,"cak") ) { return ::hx::Val( cak ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { return ::hx::Val( text ); }
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"loan") ) { return ::hx::Val( loan ); }
		if (HX_FIELD_EQ(inName,"save") ) { return ::hx::Val( save ); }
		if (HX_FIELD_EQ(inName,"show") ) { return ::hx::Val( show_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"check") ) { return ::hx::Val( check ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cancel") ) { return ::hx::Val( cancel ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { return ::hx::Val( profile ); }
		if (HX_FIELD_EQ(inName,"npcType") ) { return ::hx::Val( npcType ); }
		if (HX_FIELD_EQ(inName,"pointer") ) { return ::hx::Val( pointer ); }
		if (HX_FIELD_EQ(inName,"leafYes") ) { return ::hx::Val( leafYes ); }
		if (HX_FIELD_EQ(inName,"dexCoin") ) { return ::hx::Val( dexCoin ); }
		if (HX_FIELD_EQ(inName,"rodWave") ) { return ::hx::Val( rodWave ); }
		if (HX_FIELD_EQ(inName,"coinOut") ) { return ::hx::Val( coinOut ); }
		if (HX_FIELD_EQ(inName,"diamond") ) { return ::hx::Val( diamond ); }
		if (HX_FIELD_EQ(inName,"context") ) { return ::hx::Val( context_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"enterCur") ) { return ::hx::Val( enterCur ); }
		if (HX_FIELD_EQ(inName,"saveShow") ) { return ::hx::Val( saveShow ); }
		if (HX_FIELD_EQ(inName,"pointerQ") ) { return ::hx::Val( pointerQ ); }
		if (HX_FIELD_EQ(inName,"talkMiss") ) { return ::hx::Val( talkMiss ); }
		if (HX_FIELD_EQ(inName,"talkDone") ) { return ::hx::Val( talkDone ); }
		if (HX_FIELD_EQ(inName,"coinText") ) { return ::hx::Val( coinText ); }
		if (HX_FIELD_EQ(inName,"bcCoinIn") ) { return ::hx::Val( bcCoinIn ); }
		if (HX_FIELD_EQ(inName,"acCoinIn") ) { return ::hx::Val( acCoinIn ); }
		if (HX_FIELD_EQ(inName,"caCoinIn") ) { return ::hx::Val( caCoinIn ); }
		if (HX_FIELD_EQ(inName,"machGain") ) { return ::hx::Val( machGain ); }
		if (HX_FIELD_EQ(inName,"interest") ) { return ::hx::Val( interest ); }
		if (HX_FIELD_EQ(inName,"loanGain") ) { return ::hx::Val( loanGain ); }
		if (HX_FIELD_EQ(inName,"updateLr") ) { return ::hx::Val( updateLr_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"diaUpDown") ) { return ::hx::Val( diaUpDown ); }
		if (HX_FIELD_EQ(inName,"appleCoin") ) { return ::hx::Val( appleCoin ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return ::hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"profilePic") ) { return ::hx::Val( profilePic ); }
		if (HX_FIELD_EQ(inName,"readDaSign") ) { return ::hx::Val( readDaSign ); }
		if (HX_FIELD_EQ(inName,"bananaCoin") ) { return ::hx::Val( bananaCoin ); }
		if (HX_FIELD_EQ(inName,"getDiamond") ) { return ::hx::Val( getDiamond_dyn() ); }
		if (HX_FIELD_EQ(inName,"getPointer") ) { return ::hx::Val( getPointer_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateSkip") ) { return ::hx::Val( updateSkip_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"minerPoster") ) { return ::hx::Val( minerPoster ); }
		if (HX_FIELD_EQ(inName,"dilog_boxes") ) { return ::hx::Val( dilog_boxes ); }
		if (HX_FIELD_EQ(inName,"textRunDone") ) { return ::hx::Val( textRunDone ); }
		if (HX_FIELD_EQ(inName,"lakeTalking") ) { return ::hx::Val( lakeTalking ); }
		if (HX_FIELD_EQ(inName,"bananaPrize") ) { return ::hx::Val( bananaPrize ); }
		if (HX_FIELD_EQ(inName,"dexPrizeBuy") ) { return ::hx::Val( dexPrizeBuy ); }
		if (HX_FIELD_EQ(inName,"diaPosition") ) { return ::hx::Val( diaPosition_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateEnter") ) { return ::hx::Val( updateEnter_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"stoneTextYes") ) { return ::hx::Val( stoneTextYes ); }
		if (HX_FIELD_EQ(inName,"saveStoneYes") ) { return ::hx::Val( saveStoneYes ); }
		if (HX_FIELD_EQ(inName,"dexPrizeSell") ) { return ::hx::Val( dexPrizeSell ); }
		if (HX_FIELD_EQ(inName,"saveShowTime") ) { return ::hx::Val( saveShowTime_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"acAppleCoinIn") ) { return ::hx::Val( acAppleCoinIn ); }
		if (HX_FIELD_EQ(inName,"caAppleCoinIn") ) { return ::hx::Val( caAppleCoinIn ); }
		if (HX_FIELD_EQ(inName,"diamondUiText") ) { return ::hx::Val( diamondUiText ); }
		if (HX_FIELD_EQ(inName,"updateDiamond") ) { return ::hx::Val( updateDiamond ); }
		if (HX_FIELD_EQ(inName,"changeProfile") ) { return ::hx::Val( changeProfile_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"saveStoneIntro") ) { return ::hx::Val( saveStoneIntro ); }
		if (HX_FIELD_EQ(inName,"bcBananaCoinIn") ) { return ::hx::Val( bcBananaCoinIn ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Dia_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"win") ) { win=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"txt") ) { txt=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bck") ) { bck=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ack") ) { ack=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cak") ) { cak=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"text") ) { text=inValue.Cast<  ::flixel::addons::text::FlxTypeText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loan") ) { loan=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"save") ) { save=inValue.Cast<  ::flixel::util::FlxSave >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"check") ) { check=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cancel") ) { cancel=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"profile") ) { profile=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"npcType") ) { npcType=inValue.Cast<  ::NpcType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointer") ) { pointer=inValue.Cast<  ::Pointer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"leafYes") ) { leafYes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dexCoin") ) { dexCoin=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rodWave") ) { rodWave=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"coinOut") ) { coinOut=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diamond") ) { diamond=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"enterCur") ) { enterCur=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"saveShow") ) { saveShow=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointerQ") ) { pointerQ=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"talkMiss") ) { talkMiss=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"talkDone") ) { talkDone=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"coinText") ) { coinText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bcCoinIn") ) { bcCoinIn=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"acCoinIn") ) { acCoinIn=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caCoinIn") ) { caCoinIn=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"machGain") ) { machGain=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"interest") ) { interest=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loanGain") ) { loanGain=inValue.Cast< Float >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"diaUpDown") ) { diaUpDown=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"appleCoin") ) { appleCoin=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"profilePic") ) { profilePic=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"readDaSign") ) { readDaSign=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bananaCoin") ) { bananaCoin=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"minerPoster") ) { minerPoster=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dilog_boxes") ) { dilog_boxes=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textRunDone") ) { textRunDone=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lakeTalking") ) { lakeTalking=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bananaPrize") ) { bananaPrize=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dexPrizeBuy") ) { dexPrizeBuy=inValue.Cast< int >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"stoneTextYes") ) { stoneTextYes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"saveStoneYes") ) { saveStoneYes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dexPrizeSell") ) { dexPrizeSell=inValue.Cast< Float >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"acAppleCoinIn") ) { acAppleCoinIn=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"caAppleCoinIn") ) { caAppleCoinIn=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diamondUiText") ) { diamondUiText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"updateDiamond") ) { updateDiamond=inValue.Cast< bool >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"saveStoneIntro") ) { saveStoneIntro=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bcBananaCoinIn") ) { bcBananaCoinIn=inValue.Cast< int >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Dia_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("win",1c,a8,5a,00));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("text",ad,cc,f9,4c));
	outFields->push(HX_("enterCur",48,0f,8c,43));
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("check",c8,98,b6,45));
	outFields->push(HX_("cancel",7a,ed,33,b8));
	outFields->push(HX_("minerPoster",ac,04,d3,a8));
	outFields->push(HX_("i",69,00,00,00));
	outFields->push(HX_("profile",29,49,49,f3));
	outFields->push(HX_("profilePic",a1,26,41,dc));
	outFields->push(HX_("npcType",3b,fd,be,de));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("dilog_boxes",d9,d5,2d,6e));
	outFields->push(HX_("txt",70,6e,58,00));
	outFields->push(HX_("textRunDone",40,00,2b,ab));
	outFields->push(HX_("saveShow",da,6e,0c,00));
	outFields->push(HX_("diaUpDown",b9,9a,1d,44));
	outFields->push(HX_("pointer",bd,c0,21,51));
	outFields->push(HX_("pointerQ",f4,e4,66,ac));
	outFields->push(HX_("saveStoneIntro",64,79,c3,53));
	outFields->push(HX_("stoneTextYes",95,9c,cf,ee));
	outFields->push(HX_("leafYes",29,74,a7,0a));
	outFields->push(HX_("talkMiss",48,3e,1e,aa));
	outFields->push(HX_("talkDone",ce,db,2f,a4));
	outFields->push(HX_("readDaSign",50,fa,36,06));
	outFields->push(HX_("lakeTalking",a7,13,d4,d9));
	outFields->push(HX_("saveStoneYes",1f,aa,a2,96));
	outFields->push(HX_("appleCoin",0b,1c,90,a7));
	outFields->push(HX_("bananaCoin",96,8c,07,e1));
	outFields->push(HX_("dexCoin",08,53,21,e5));
	outFields->push(HX_("rodWave",60,83,09,b4));
	outFields->push(HX_("coinText",de,4a,b0,af));
	outFields->push(HX_("bck",8a,b3,4a,00));
	outFields->push(HX_("bcBananaCoinIn",7c,5d,51,23));
	outFields->push(HX_("bcCoinIn",77,4c,3b,f3));
	outFields->push(HX_("ack",49,f1,49,00));
	outFields->push(HX_("acAppleCoinIn",0e,3f,01,80));
	outFields->push(HX_("acCoinIn",58,da,08,ba));
	outFields->push(HX_("cak",0d,74,4b,00));
	outFields->push(HX_("caCoinIn",14,d1,42,d9));
	outFields->push(HX_("caAppleCoinIn",d2,5e,03,88));
	outFields->push(HX_("coinOut",7d,b3,6e,34));
	outFields->push(HX_("machGain",18,c0,55,c2));
	outFields->push(HX_("bananaPrize",ed,af,c4,83));
	outFields->push(HX_("dexPrizeBuy",cb,a4,0f,f7));
	outFields->push(HX_("dexPrizeSell",6d,fe,d0,41));
	outFields->push(HX_("interest",aa,a2,6f,28));
	outFields->push(HX_("loanGain",cf,8e,00,77));
	outFields->push(HX_("loan",30,9a,b7,47));
	outFields->push(HX_("diamond",54,67,1a,5c));
	outFields->push(HX_("diamondUiText",95,2b,a8,dc));
	outFields->push(HX_("updateDiamond",4b,cc,88,27));
	outFields->push(HX_("save",3d,8b,4d,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Dia_obj_sMemberStorageInfo[] = {
	{::hx::fsBool,(int)offsetof(Dia_obj,win),HX_("win",1c,a8,5a,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Dia_obj,background),HX_("background",ee,93,1d,26)},
	{::hx::fsObject /*  ::flixel::addons::text::FlxTypeText */ ,(int)offsetof(Dia_obj,text),HX_("text",ad,cc,f9,4c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Dia_obj,enterCur),HX_("enterCur",48,0f,8c,43)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(Dia_obj,next),HX_("next",f3,84,02,49)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(Dia_obj,check),HX_("check",c8,98,b6,45)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(Dia_obj,cancel),HX_("cancel",7a,ed,33,b8)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Dia_obj,minerPoster),HX_("minerPoster",ac,04,d3,a8)},
	{::hx::fsInt,(int)offsetof(Dia_obj,i),HX_("i",69,00,00,00)},
	{::hx::fsInt,(int)offsetof(Dia_obj,profile),HX_("profile",29,49,49,f3)},
	{::hx::fsString,(int)offsetof(Dia_obj,profilePic),HX_("profilePic",a1,26,41,dc)},
	{::hx::fsObject /*  ::NpcType */ ,(int)offsetof(Dia_obj,npcType),HX_("npcType",3b,fd,be,de)},
	{::hx::fsString,(int)offsetof(Dia_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Dia_obj,dilog_boxes),HX_("dilog_boxes",d9,d5,2d,6e)},
	{::hx::fsBool,(int)offsetof(Dia_obj,txt),HX_("txt",70,6e,58,00)},
	{::hx::fsBool,(int)offsetof(Dia_obj,textRunDone),HX_("textRunDone",40,00,2b,ab)},
	{::hx::fsString,(int)offsetof(Dia_obj,saveShow),HX_("saveShow",da,6e,0c,00)},
	{::hx::fsString,(int)offsetof(Dia_obj,diaUpDown),HX_("diaUpDown",b9,9a,1d,44)},
	{::hx::fsObject /*  ::Pointer */ ,(int)offsetof(Dia_obj,pointer),HX_("pointer",bd,c0,21,51)},
	{::hx::fsString,(int)offsetof(Dia_obj,pointerQ),HX_("pointerQ",f4,e4,66,ac)},
	{::hx::fsBool,(int)offsetof(Dia_obj,saveStoneIntro),HX_("saveStoneIntro",64,79,c3,53)},
	{::hx::fsBool,(int)offsetof(Dia_obj,stoneTextYes),HX_("stoneTextYes",95,9c,cf,ee)},
	{::hx::fsBool,(int)offsetof(Dia_obj,leafYes),HX_("leafYes",29,74,a7,0a)},
	{::hx::fsBool,(int)offsetof(Dia_obj,talkMiss),HX_("talkMiss",48,3e,1e,aa)},
	{::hx::fsBool,(int)offsetof(Dia_obj,talkDone),HX_("talkDone",ce,db,2f,a4)},
	{::hx::fsBool,(int)offsetof(Dia_obj,readDaSign),HX_("readDaSign",50,fa,36,06)},
	{::hx::fsBool,(int)offsetof(Dia_obj,lakeTalking),HX_("lakeTalking",a7,13,d4,d9)},
	{::hx::fsBool,(int)offsetof(Dia_obj,saveStoneYes),HX_("saveStoneYes",1f,aa,a2,96)},
	{::hx::fsFloat,(int)offsetof(Dia_obj,appleCoin),HX_("appleCoin",0b,1c,90,a7)},
	{::hx::fsFloat,(int)offsetof(Dia_obj,bananaCoin),HX_("bananaCoin",96,8c,07,e1)},
	{::hx::fsFloat,(int)offsetof(Dia_obj,dexCoin),HX_("dexCoin",08,53,21,e5)},
	{::hx::fsFloat,(int)offsetof(Dia_obj,rodWave),HX_("rodWave",60,83,09,b4)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Dia_obj,coinText),HX_("coinText",de,4a,b0,af)},
	{::hx::fsInt,(int)offsetof(Dia_obj,bck),HX_("bck",8a,b3,4a,00)},
	{::hx::fsInt,(int)offsetof(Dia_obj,bcBananaCoinIn),HX_("bcBananaCoinIn",7c,5d,51,23)},
	{::hx::fsFloat,(int)offsetof(Dia_obj,bcCoinIn),HX_("bcCoinIn",77,4c,3b,f3)},
	{::hx::fsInt,(int)offsetof(Dia_obj,ack),HX_("ack",49,f1,49,00)},
	{::hx::fsInt,(int)offsetof(Dia_obj,acAppleCoinIn),HX_("acAppleCoinIn",0e,3f,01,80)},
	{::hx::fsFloat,(int)offsetof(Dia_obj,acCoinIn),HX_("acCoinIn",58,da,08,ba)},
	{::hx::fsInt,(int)offsetof(Dia_obj,cak),HX_("cak",0d,74,4b,00)},
	{::hx::fsInt,(int)offsetof(Dia_obj,caCoinIn),HX_("caCoinIn",14,d1,42,d9)},
	{::hx::fsFloat,(int)offsetof(Dia_obj,caAppleCoinIn),HX_("caAppleCoinIn",d2,5e,03,88)},
	{::hx::fsInt,(int)offsetof(Dia_obj,coinOut),HX_("coinOut",7d,b3,6e,34)},
	{::hx::fsFloat,(int)offsetof(Dia_obj,machGain),HX_("machGain",18,c0,55,c2)},
	{::hx::fsInt,(int)offsetof(Dia_obj,bananaPrize),HX_("bananaPrize",ed,af,c4,83)},
	{::hx::fsInt,(int)offsetof(Dia_obj,dexPrizeBuy),HX_("dexPrizeBuy",cb,a4,0f,f7)},
	{::hx::fsFloat,(int)offsetof(Dia_obj,dexPrizeSell),HX_("dexPrizeSell",6d,fe,d0,41)},
	{::hx::fsFloat,(int)offsetof(Dia_obj,interest),HX_("interest",aa,a2,6f,28)},
	{::hx::fsFloat,(int)offsetof(Dia_obj,loanGain),HX_("loanGain",cf,8e,00,77)},
	{::hx::fsBool,(int)offsetof(Dia_obj,loan),HX_("loan",30,9a,b7,47)},
	{::hx::fsFloat,(int)offsetof(Dia_obj,diamond),HX_("diamond",54,67,1a,5c)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Dia_obj,diamondUiText),HX_("diamondUiText",95,2b,a8,dc)},
	{::hx::fsBool,(int)offsetof(Dia_obj,updateDiamond),HX_("updateDiamond",4b,cc,88,27)},
	{::hx::fsObject /*  ::flixel::util::FlxSave */ ,(int)offsetof(Dia_obj,save),HX_("save",3d,8b,4d,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Dia_obj_sStaticStorageInfo = 0;
#endif

static ::String Dia_obj_sMemberFields[] = {
	HX_("win",1c,a8,5a,00),
	HX_("background",ee,93,1d,26),
	HX_("text",ad,cc,f9,4c),
	HX_("enterCur",48,0f,8c,43),
	HX_("next",f3,84,02,49),
	HX_("check",c8,98,b6,45),
	HX_("cancel",7a,ed,33,b8),
	HX_("minerPoster",ac,04,d3,a8),
	HX_("i",69,00,00,00),
	HX_("profile",29,49,49,f3),
	HX_("profilePic",a1,26,41,dc),
	HX_("npcType",3b,fd,be,de),
	HX_("name",4b,72,ff,48),
	HX_("dilog_boxes",d9,d5,2d,6e),
	HX_("txt",70,6e,58,00),
	HX_("textRunDone",40,00,2b,ab),
	HX_("saveShow",da,6e,0c,00),
	HX_("diaUpDown",b9,9a,1d,44),
	HX_("pointer",bd,c0,21,51),
	HX_("pointerQ",f4,e4,66,ac),
	HX_("saveStoneIntro",64,79,c3,53),
	HX_("stoneTextYes",95,9c,cf,ee),
	HX_("leafYes",29,74,a7,0a),
	HX_("talkMiss",48,3e,1e,aa),
	HX_("talkDone",ce,db,2f,a4),
	HX_("readDaSign",50,fa,36,06),
	HX_("lakeTalking",a7,13,d4,d9),
	HX_("saveStoneYes",1f,aa,a2,96),
	HX_("appleCoin",0b,1c,90,a7),
	HX_("bananaCoin",96,8c,07,e1),
	HX_("dexCoin",08,53,21,e5),
	HX_("rodWave",60,83,09,b4),
	HX_("coinText",de,4a,b0,af),
	HX_("bck",8a,b3,4a,00),
	HX_("bcBananaCoinIn",7c,5d,51,23),
	HX_("bcCoinIn",77,4c,3b,f3),
	HX_("ack",49,f1,49,00),
	HX_("acAppleCoinIn",0e,3f,01,80),
	HX_("acCoinIn",58,da,08,ba),
	HX_("cak",0d,74,4b,00),
	HX_("caCoinIn",14,d1,42,d9),
	HX_("caAppleCoinIn",d2,5e,03,88),
	HX_("coinOut",7d,b3,6e,34),
	HX_("machGain",18,c0,55,c2),
	HX_("bananaPrize",ed,af,c4,83),
	HX_("dexPrizeBuy",cb,a4,0f,f7),
	HX_("dexPrizeSell",6d,fe,d0,41),
	HX_("interest",aa,a2,6f,28),
	HX_("loanGain",cf,8e,00,77),
	HX_("loan",30,9a,b7,47),
	HX_("diamond",54,67,1a,5c),
	HX_("diamondUiText",95,2b,a8,dc),
	HX_("updateDiamond",4b,cc,88,27),
	HX_("save",3d,8b,4d,4c),
	HX_("show",fd,d4,52,4c),
	HX_("changeProfile",99,ed,1d,54),
	HX_("diaPosition",05,36,92,c7),
	HX_("getDiamond",5e,ed,7b,ab),
	HX_("saveShowTime",07,dc,0b,c7),
	HX_("context",ef,95,77,19),
	HX_("getPointer",c7,46,83,a0),
	HX_("updateLr",ef,1c,fa,77),
	HX_("update",09,86,05,87),
	HX_("updateEnter",4f,d6,1e,56),
	HX_("updateSkip",28,01,0a,05),
	::String(null()) };

::hx::Class Dia_obj::__mClass;

void Dia_obj::__register()
{
	Dia_obj _hx_dummy;
	Dia_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Dia",1c,f5,33,00);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Dia_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Dia_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Dia_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Dia_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

