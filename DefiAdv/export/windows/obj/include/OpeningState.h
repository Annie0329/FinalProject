// Generated by Haxe 4.2.1+bf9ff69
#ifndef INCLUDED_OpeningState
#define INCLUDED_OpeningState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(Dia)
HX_DECLARE_CLASS0(OpeningState)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS3(flixel,addons,text,FlxTypeText)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES OpeningState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef OpeningState_obj OBJ_;
		OpeningState_obj();

	public:
		enum { _hx_ClassId = 0x13d93141 };

		void __construct(bool openAni);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="OpeningState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"OpeningState"); }
		static ::hx::ObjectPtr< OpeningState_obj > __new(bool openAni);
		static ::hx::ObjectPtr< OpeningState_obj > __alloc(::hx::Ctx *_hx_ctx,bool openAni);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~OpeningState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("OpeningState",b9,0f,63,c6); }

		bool openAni;
		 ::flixel::text::FlxText guide;
		 ::flixel::FlxSprite openingAnimation;
		 ::Dia dia;
		int i;
		 ::flixel::addons::text::FlxTypeText openText;
		::Array< ::String > dilog_boxes;
		bool textRunDone;
		::String name;
		::String diaName;
		 ::flixel::text::FlxText ufo;
		void create();

		void update(Float elapsed);

};


#endif /* INCLUDED_OpeningState */ 
