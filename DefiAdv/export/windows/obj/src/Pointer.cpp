// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_Pointer
#include <Pointer.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af9ee80fccd8c64b_7_new,"Pointer","new",0xbaab9c0f,"Pointer.new","Pointer.hx",7,0xb637da41)
static const ::String _hx_array_data_1e72e89d_1[] = {
	HX_("oui1",4e,d2,b7,49),HX_("oui2",4f,d2,b7,49),HX_("oui3",50,d2,b7,49),
};
HX_LOCAL_STACK_FRAME(_hx_pos_af9ee80fccd8c64b_28_update,"Pointer","update",0x3f0af1ba,"Pointer.update","Pointer.hx",28,0xb637da41)
HX_LOCAL_STACK_FRAME(_hx_pos_af9ee80fccd8c64b_41_setPointer,"Pointer","setPointer",0x0c847d6c,"Pointer.setPointer","Pointer.hx",41,0xb637da41)
HX_LOCAL_STACK_FRAME(_hx_pos_af9ee80fccd8c64b_65_movePointer,"Pointer","movePointer",0x343f8c5b,"Pointer.movePointer","Pointer.hx",65,0xb637da41)
static const int _hx_array_data_1e72e89d_5[] = {
	(int)38,(int)87,
};
static const int _hx_array_data_1e72e89d_6[] = {
	(int)40,(int)83,
};
static const int _hx_array_data_1e72e89d_7[] = {
	(int)37,(int)65,
};
static const int _hx_array_data_1e72e89d_8[] = {
	(int)39,(int)68,
};

void Pointer_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_af9ee80fccd8c64b_7_new)
HXLINE(  18)		this->selected = HX_("none",b8,12,0a,49);
HXLINE(  17)		this->order = 1;
HXLINE(  16)		this->dir = HX_("none",b8,12,0a,49);
HXLINE(  15)		this->choNum = 0;
HXLINE(  14)		this->cho = ::Array_obj< ::String >::fromData( _hx_array_data_1e72e89d_1,3);
HXLINE(  13)		this->bar = 0;
HXLINE(  12)		this->anoPos = ((Float)0);
HXLINE(  11)		this->start = ((Float)0);
HXLINE(  22)		super::__construct(x,y,null());
HXLINE(  23)		this->loadGraphic(HX_("assets/images/pointer.png",ad,e2,d4,86),null(),null(),null(),null(),null());
HXLINE(  24)		this->move = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/movePointer.ogg",41,36,ef,61),null(),null(),null(),null(),null(),null(),null(),null());
            	}

Dynamic Pointer_obj::__CreateEmpty() { return new Pointer_obj; }

void *Pointer_obj::_hx_vtable = 0;

Dynamic Pointer_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Pointer_obj > _hx_result = new Pointer_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Pointer_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2c01639b) {
		if (inClassId<=(int)0x18c03415) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x18c03415;
		} else {
			return inClassId==(int)0x2c01639b;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Pointer_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af9ee80fccd8c64b_28_update)
HXLINE(  29)		this->super::update(elapsed);
HXLINE(  30)		this->movePointer();
HXLINE(  33)		if ((this->dir == HX_("ud",4f,66,00,00))) {
HXLINE(  34)			this->order = ::Std_obj::_hx_int(((this->y - this->start) / ( (Float)(this->bar) )));
            		}
            		else {
HXLINE(  36)			this->order = ::Std_obj::_hx_int(((this->x - this->start) / ( (Float)(this->bar) )));
            		}
HXLINE(  37)		this->selected = this->cho->__get(this->order);
            	}


void Pointer_obj::setPointer(Float pointerX,Float pointerY,int pointerBar,::Array< ::String > pointerCho,::String pointerDir){
            	HX_STACKFRAME(&_hx_pos_af9ee80fccd8c64b_41_setPointer)
HXLINE(  42)		this->set_x(pointerX);
HXLINE(  43)		this->set_y(pointerY);
HXLINE(  44)		this->bar = pointerBar;
HXLINE(  46)		this->cho = ::Array_obj< ::String >::__new(0);
HXLINE(  47)		this->cho = this->cho->concat(pointerCho);
HXLINE(  49)		this->choNum = (this->cho->length - 1);
HXLINE(  50)		this->dir = pointerDir;
HXLINE(  51)		if ((this->dir == HX_("ud",4f,66,00,00))) {
HXLINE(  53)			this->anoPos = this->x;
HXLINE(  54)			this->start = this->y;
            		}
            		else {
HXLINE(  58)			this->start = this->x;
HXLINE(  59)			this->anoPos = this->y;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC5(Pointer_obj,setPointer,(void))

void Pointer_obj::movePointer(){
            	HX_STACKFRAME(&_hx_pos_af9ee80fccd8c64b_65_movePointer)
HXLINE(  66)		bool up = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_1e72e89d_5,2),-1);
HXLINE(  67)		bool down = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_1e72e89d_6,2),-1);
HXLINE(  68)		bool left = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_1e72e89d_7,2),-1);
HXLINE(  69)		bool right = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_1e72e89d_8,2),-1);
HXLINE(  71)		if (this->visible) {
HXLINE(  74)			if ((this->dir == HX_("ud",4f,66,00,00))) {
HXLINE(  76)				if (up) {
HXLINE(  78)					if ((this->y == this->start)) {
HXLINE(  79)						this->set_y((this->start + (this->bar * this->choNum)));
            					}
            					else {
HXLINE(  81)						this->set_y((this->y - ( (Float)(this->bar) )));
            					}
HXLINE(  82)					this->move->play(true,null(),null());
            				}
HXLINE(  84)				if (down) {
HXLINE(  86)					if ((this->y == (this->start + (this->bar * this->choNum)))) {
HXLINE(  87)						this->set_y(this->start);
            					}
            					else {
HXLINE(  89)						this->set_y((this->y + this->bar));
            					}
HXLINE(  90)					this->move->play(true,null(),null());
            				}
            			}
HXLINE(  95)			if ((this->dir == HX_("lr",86,5e,00,00))) {
HXLINE(  97)				if (right) {
HXLINE(  99)					if ((this->x == (this->start + (this->bar * this->choNum)))) {
HXLINE( 100)						this->set_x(this->start);
            					}
            					else {
HXLINE( 102)						this->set_x((this->x + this->bar));
            					}
HXLINE( 103)					this->move->play(true,null(),null());
            				}
HXLINE( 105)				if (left) {
HXLINE( 107)					if ((this->x == this->start)) {
HXLINE( 108)						this->set_x((this->start + (this->bar * this->choNum)));
            					}
            					else {
HXLINE( 110)						this->set_x((this->x - ( (Float)(this->bar) )));
            					}
HXLINE( 111)					this->move->play(true,null(),null());
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Pointer_obj,movePointer,(void))


::hx::ObjectPtr< Pointer_obj > Pointer_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	::hx::ObjectPtr< Pointer_obj > __this = new Pointer_obj();
	__this->__construct(__o_x,__o_y);
	return __this;
}

::hx::ObjectPtr< Pointer_obj > Pointer_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	Pointer_obj *__this = (Pointer_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Pointer_obj), true, "Pointer"));
	*(void **)__this = Pointer_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y);
	return __this;
}

Pointer_obj::Pointer_obj()
{
}

void Pointer_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Pointer);
	HX_MARK_MEMBER_NAME(move,"move");
	HX_MARK_MEMBER_NAME(start,"start");
	HX_MARK_MEMBER_NAME(anoPos,"anoPos");
	HX_MARK_MEMBER_NAME(bar,"bar");
	HX_MARK_MEMBER_NAME(cho,"cho");
	HX_MARK_MEMBER_NAME(choNum,"choNum");
	HX_MARK_MEMBER_NAME(dir,"dir");
	HX_MARK_MEMBER_NAME(order,"order");
	HX_MARK_MEMBER_NAME(selected,"selected");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Pointer_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(move,"move");
	HX_VISIT_MEMBER_NAME(start,"start");
	HX_VISIT_MEMBER_NAME(anoPos,"anoPos");
	HX_VISIT_MEMBER_NAME(bar,"bar");
	HX_VISIT_MEMBER_NAME(cho,"cho");
	HX_VISIT_MEMBER_NAME(choNum,"choNum");
	HX_VISIT_MEMBER_NAME(dir,"dir");
	HX_VISIT_MEMBER_NAME(order,"order");
	HX_VISIT_MEMBER_NAME(selected,"selected");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Pointer_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { return ::hx::Val( bar ); }
		if (HX_FIELD_EQ(inName,"cho") ) { return ::hx::Val( cho ); }
		if (HX_FIELD_EQ(inName,"dir") ) { return ::hx::Val( dir ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"move") ) { return ::hx::Val( move ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { return ::hx::Val( start ); }
		if (HX_FIELD_EQ(inName,"order") ) { return ::hx::Val( order ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"anoPos") ) { return ::hx::Val( anoPos ); }
		if (HX_FIELD_EQ(inName,"choNum") ) { return ::hx::Val( choNum ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { return ::hx::Val( selected ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"setPointer") ) { return ::hx::Val( setPointer_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"movePointer") ) { return ::hx::Val( movePointer_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Pointer_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"bar") ) { bar=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cho") ) { cho=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dir") ) { dir=inValue.Cast< ::String >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"move") ) { move=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"start") ) { start=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"order") ) { order=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"anoPos") ) { anoPos=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"choNum") ) { choNum=inValue.Cast< int >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"selected") ) { selected=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Pointer_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("move",11,e3,60,48));
	outFields->push(HX_("start",62,74,0b,84));
	outFields->push(HX_("anoPos",d2,93,4d,68));
	outFields->push(HX_("bar",d3,b1,4a,00));
	outFields->push(HX_("cho",2a,7a,4b,00));
	outFields->push(HX_("choNum",3c,52,9b,c0));
	outFields->push(HX_("dir",4d,3d,4c,00));
	outFields->push(HX_("order",8e,f0,20,35));
	outFields->push(HX_("selected",5b,2a,6d,b1));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Pointer_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(Pointer_obj,move),HX_("move",11,e3,60,48)},
	{::hx::fsFloat,(int)offsetof(Pointer_obj,start),HX_("start",62,74,0b,84)},
	{::hx::fsFloat,(int)offsetof(Pointer_obj,anoPos),HX_("anoPos",d2,93,4d,68)},
	{::hx::fsInt,(int)offsetof(Pointer_obj,bar),HX_("bar",d3,b1,4a,00)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Pointer_obj,cho),HX_("cho",2a,7a,4b,00)},
	{::hx::fsInt,(int)offsetof(Pointer_obj,choNum),HX_("choNum",3c,52,9b,c0)},
	{::hx::fsString,(int)offsetof(Pointer_obj,dir),HX_("dir",4d,3d,4c,00)},
	{::hx::fsInt,(int)offsetof(Pointer_obj,order),HX_("order",8e,f0,20,35)},
	{::hx::fsString,(int)offsetof(Pointer_obj,selected),HX_("selected",5b,2a,6d,b1)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Pointer_obj_sStaticStorageInfo = 0;
#endif

static ::String Pointer_obj_sMemberFields[] = {
	HX_("move",11,e3,60,48),
	HX_("start",62,74,0b,84),
	HX_("anoPos",d2,93,4d,68),
	HX_("bar",d3,b1,4a,00),
	HX_("cho",2a,7a,4b,00),
	HX_("choNum",3c,52,9b,c0),
	HX_("dir",4d,3d,4c,00),
	HX_("order",8e,f0,20,35),
	HX_("selected",5b,2a,6d,b1),
	HX_("update",09,86,05,87),
	HX_("setPointer",3b,e5,00,a4),
	HX_("movePointer",ac,f9,9d,29),
	::String(null()) };

::hx::Class Pointer_obj::__mClass;

void Pointer_obj::__register()
{
	Pointer_obj _hx_dummy;
	Pointer_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Pointer",9d,e8,72,1e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Pointer_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Pointer_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Pointer_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Pointer_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

