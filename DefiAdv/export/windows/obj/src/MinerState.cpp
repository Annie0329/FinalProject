// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_Bag
#include <Bag.h>
#endif
#ifndef INCLUDED_CombatHUD
#include <CombatHUD.h>
#endif
#ifndef INCLUDED_Dia
#include <Dia.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_EnemyType
#include <EnemyType.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_MinerState
#include <MinerState.h>
#endif
#ifndef INCLUDED_MissionText
#include <MissionText.h>
#endif
#ifndef INCLUDED_NPC
#include <NPC.h>
#endif
#ifndef INCLUDED_NpcType
#include <NpcType.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StreetState
#include <StreetState.h>
#endif
#ifndef INCLUDED_Tip
#include <Tip.h>
#endif
#ifndef INCLUDED_TipText
#include <TipText.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_ogmo_FlxOgmo3Loader
#include <flixel/addons/editors/ogmo/FlxOgmo3Loader.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_cdd610f322c9d27c_18_new,"MinerState","new",0x9b9d2d24,"MinerState.new","MinerState.hx",18,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_95_create,"MinerState","create",0xa5955cb8,"MinerState.create","MinerState.hx",95,0x57f1c2cc)
static const int _hx_array_data_02f70b32_2[] = {
	(int)0,(int)1,(int)2,(int)3,
};
static const int _hx_array_data_02f70b32_3[] = {
	(int)0,(int)1,(int)2,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_249_placeEntities,"MinerState","placeEntities",0xa0f05fec,"MinerState.placeEntities","MinerState.hx",249,0x57f1c2cc)
static const int _hx_array_data_02f70b32_6[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,
};
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_299_saveFile,"MinerState","saveFile",0x06b14515,"MinerState.saveFile","MinerState.hx",299,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_331_loadFile,"MinerState","loadFile",0xc3977c7e,"MinerState.loadFile","MinerState.hx",331,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_404_update,"MinerState","update",0xb08b7bc5,"MinerState.update","MinerState.hx",404,0x57f1c2cc)
static const int _hx_array_data_02f70b32_10[] = {
	(int)69,
};
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_455_npcTalk,"MinerState","npcTalk",0x0a5dd271,"MinerState.npcTalk","MinerState.hx",455,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_465_goToMonument,"MinerState","goToMonument",0xf0b809e6,"MinerState.goToMonument","MinerState.hx",465,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_462_goToMonument,"MinerState","goToMonument",0xf0b809e6,"MinerState.goToMonument","MinerState.hx",462,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_473_goToStreet,"MinerState","goToStreet",0x2239c1e2,"MinerState.goToStreet","MinerState.hx",473,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_478_goToStreet,"MinerState","goToStreet",0x2239c1e2,"MinerState.goToStreet","MinerState.hx",478,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_506_timeToStop,"MinerState","timeToStop",0x5b5826c6,"MinerState.timeToStop","MinerState.hx",506,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_531_playerGotStone,"MinerState","playerGotStone",0x3f5645b6,"MinerState.playerGotStone","MinerState.hx",531,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_520_playerGotStone,"MinerState","playerGotStone",0x3f5645b6,"MinerState.playerGotStone","MinerState.hx",520,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_541_enemyGotStone,"MinerState","enemyGotStone",0x179693a5,"MinerState.enemyGotStone","MinerState.hx",541,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_537_enemyGotStone,"MinerState","enemyGotStone",0x179693a5,"MinerState.enemyGotStone","MinerState.hx",537,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_547_touchMiner,"MinerState","touchMiner",0x3d72d9fc,"MinerState.touchMiner","MinerState.hx",547,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_552_touchMiner,"MinerState","touchMiner",0x3d72d9fc,"MinerState.touchMiner","MinerState.hx",552,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_584_updateInCombat,"MinerState","updateInCombat",0x2e1a5ede,"MinerState.updateInCombat","MinerState.hx",584,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_603_stoneInsideBox,"MinerState","stoneInsideBox",0xb27d8806,"MinerState.stoneInsideBox","MinerState.hx",603,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_618_stoneInsideBox,"MinerState","stoneInsideBox",0xb27d8806,"MinerState.stoneInsideBox","MinerState.hx",618,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_629_updateTimer,"MinerState","updateTimer",0xc4a7e9c0,"MinerState.updateTimer","MinerState.hx",629,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_650_updateTimer,"MinerState","updateTimer",0xc4a7e9c0,"MinerState.updateTimer","MinerState.hx",650,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_663_minerGameOver,"MinerState","minerGameOver",0xefdc51c9,"MinerState.minerGameOver","MinerState.hx",663,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_682_shopOpen,"MinerState","shopOpen",0xb8a8949c,"MinerState.shopOpen","MinerState.hx",682,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_680_shopOpen,"MinerState","shopOpen",0xb8a8949c,"MinerState.shopOpen","MinerState.hx",680,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_690_updateTalking,"MinerState","updateTalking",0x6b7535f1,"MinerState.updateTalking","MinerState.hx",690,0x57f1c2cc)
static const int _hx_array_data_02f70b32_32[] = {
	(int)13,(int)32,
};
static const int _hx_array_data_02f70b32_33[] = {
	(int)65,(int)83,(int)87,(int)68,(int)38,(int)40,(int)37,(int)39,
};
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_720_updateWhenDiaInvisible,"MinerState","updateWhenDiaInvisible",0x2cb3c210,"MinerState.updateWhenDiaInvisible","MinerState.hx",720,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_751_updateWhenDiaInvisible,"MinerState","updateWhenDiaInvisible",0x2cb3c210,"MinerState.updateWhenDiaInvisible","MinerState.hx",751,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_772_playerUpDown,"MinerState","playerUpDown",0x9d89dd5a,"MinerState.playerUpDown","MinerState.hx",772,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_780_updateF4,"MinerState","updateF4",0x8735f433,"MinerState.updateF4","MinerState.hx",780,0x57f1c2cc)
static const int _hx_array_data_02f70b32_38[] = {
	(int)115,
};
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_787_updateF4,"MinerState","updateF4",0x8735f433,"MinerState.updateF4","MinerState.hx",787,0x57f1c2cc)
HX_LOCAL_STACK_FRAME(_hx_pos_cdd610f322c9d27c_794_updateC,"MinerState","updateC",0xc980d0de,"MinerState.updateC","MinerState.hx",794,0x57f1c2cc)
static const int _hx_array_data_02f70b32_41[] = {
	(int)67,
};

void MinerState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_18_new)
HXLINE(  87)		this->torch = null();
HXLINE(  79)		this->finalScore = 0;
HXLINE(  77)		this->minerTimeSet = 60;
HXLINE(  73)		this->stoneYes = false;
HXLINE(  70)		this->stoneCounter = 0;
HXLINE(  69)		this->stone = null();
HXLINE(  65)		this->roadEnd = 4320;
HXLINE(  64)		this->roadStart = 2400;
HXLINE(  60)		this->streetYes = false;
HXLINE(  59)		this->streetOpen = false;
HXLINE(  58)		this->minerGateX = ((Float)0);
HXLINE(  52)		this->meetStarter = false;
HXLINE(  46)		this->inCombat = false;
HXLINE(  42)		this->talkYes = false;
HXLINE(  41)		this->txt = true;
HXLINE(  35)		this->stoneGoal = 5;
HXLINE(  18)		super::__construct(MaxSize);
            	}

Dynamic MinerState_obj::__CreateEmpty() { return new MinerState_obj; }

void *MinerState_obj::_hx_vtable = 0;

Dynamic MinerState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MinerState_obj > _hx_result = new MinerState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MinerState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x1aba2df2) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x1aba2df2;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void MinerState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_cdd610f322c9d27c_95_create)
HXLINE(  96)		this->map =  ::flixel::addons::editors::ogmo::FlxOgmo3Loader_obj::__alloc( HX_CTX ,HX_("assets/data/deFiMap.ogmo",49,bf,cf,04),HX_("assets/data/minerMap.json",40,3e,04,5b));
HXLINE(  99)		this->cancel = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/cancel.ogg",27,62,c6,8f),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 100)		this->minerPunch = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/minerPunch.ogg",dc,57,44,ec),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 101)		this->gateSlide = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/gateSlide.ogg",bb,df,dd,9b),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 102)		this->touchEnemy = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/touchEnemy.ogg",36,b4,7a,db),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 103)		this->openBag = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/openBag.ogg",b3,d3,d1,28),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 104)		this->doorTele = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/doorTele.ogg",65,65,21,35),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 105)		this->saveNoise = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/save.ogg",6a,12,2d,60),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 108)		this->ground = this->map->loadTilemap(HX_("assets/images/mtSmall.png",50,bb,bc,ad),HX_("ground",87,22,28,1c),null());
HXLINE( 109)		this->ground->follow(null(),null(),null());
HXLINE( 110)		this->add(this->ground);
HXLINE( 113)		this->road = this->map->loadTilemap(HX_("assets/images/mtSmall.png",50,bb,bc,ad),HX_("road",e0,e1,ae,4b),null());
HXLINE( 114)		this->road->follow(null(),null(),null());
HXLINE( 115)		this->add(this->road);
HXLINE( 118)		this->walls = this->map->loadTilemap(HX_("assets/images/mtSmall.png",50,bb,bc,ad),HX_("wall",0a,5d,f2,4e),null());
HXLINE( 119)		this->walls->follow(null(),null(),null());
HXLINE( 120)		this->add(this->walls);
HXLINE( 122)		this->minerGate =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),HX_("assets/images/minerGate.png",da,d7,63,56));
HXLINE( 123)		this->minerGate->set_immovable(true);
HXLINE( 124)		this->add(this->minerGate);
HXLINE( 126)		this->torch =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 127)		this->add(this->torch);
HXLINE( 130)		this->monumentDoor =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->loadGraphic(HX_("assets/images/minerDoor.png",bd,bc,65,6d),true,360,480,null(),null());
HXLINE( 131)		this->monumentDoor->animation->add(HX_("glow",8d,4e,67,44),::Array_obj< int >::fromData( _hx_array_data_02f70b32_2,4),3,true,null(),null());
HXLINE( 132)		this->monumentDoor->setSize(( (Float)(360) ),( (Float)(120) ));
HXLINE( 133)		this->monumentDoor->offset->set(0,360);
HXLINE( 134)		this->monumentDoor->set_immovable(true);
HXLINE( 135)		this->add(this->monumentDoor);
HXLINE( 136)		this->monumentDoor->animation->play(HX_("glow",8d,4e,67,44),null(),null(),null());
HXLINE( 139)		this->streetDoor =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->loadGraphic(HX_("assets/images/minerDoor.png",bd,bc,65,6d),true,360,480,null(),null());
HXLINE( 140)		this->streetDoor->animation->add(HX_("glowStreet",70,c2,e9,c2),::Array_obj< int >::fromData( _hx_array_data_02f70b32_3,4),3,true,null(),null());
HXLINE( 141)		this->streetDoor->setSize(( (Float)(360) ),( (Float)(120) ));
HXLINE( 142)		this->streetDoor->offset->set(0,360);
HXLINE( 143)		this->streetDoor->set_immovable(true);
HXLINE( 144)		this->add(this->streetDoor);
HXLINE( 145)		this->streetDoor->animation->play(HX_("glowStreet",70,c2,e9,c2),null(),null(),null());
HXLINE( 148)		this->shop =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(240,240,0,null(),null());
HXLINE( 149)		this->shop->set_immovable(true);
HXLINE( 150)		this->add(this->shop);
HXLINE( 153)		this->stone =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 154)		this->stoneSound = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/pickUp.ogg",49,1b,7f,aa),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 155)		this->add(this->stone);
HXLINE( 158)		this->box =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),HX_("assets/images/boxEmpty.png",e8,56,dd,5f));
HXLINE( 159)		this->box->set_immovable(true);
HXLINE( 160)		this->add(this->box);
HXLINE( 163)		this->enemy =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 164)		this->add(this->enemy);
HXLINE( 166)		this->npc =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 167)		this->add(this->npc);
HXLINE( 170)		this->player =  ::Player_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 171)		this->add(this->player);
HXLINE( 172)		::flixel::FlxG_obj::camera->follow(this->player,::flixel::FlxCameraFollowStyle_obj::TOPDOWN_TIGHT_dyn(),1);
HXLINE( 175)		this->through = this->map->loadTilemap(HX_("assets/images/mtSmall.png",50,bb,bc,ad),HX_("through",45,48,3d,5a),null());
HXLINE( 176)		this->through->follow(null(),null(),null());
HXLINE( 177)		this->add(this->through);
HXLINE( 180)		this->tip =  ::Tip_obj::__alloc( HX_CTX );
HXLINE( 181)		this->add(this->tip);
HXLINE( 184)		this->bag =  ::Bag_obj::__alloc( HX_CTX );
HXLINE( 185)		this->add(this->bag);
HXLINE( 188)		this->combatHud =  ::CombatHUD_obj::__alloc( HX_CTX );
HXLINE( 189)		this->add(this->combatHud);
HXLINE( 192)		this->dia =  ::Dia_obj::__alloc( HX_CTX );
HXLINE( 193)		this->add(this->dia);
HXLINE( 196)		this->stoneCounterIcon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,(::flixel::FlxG_obj::width - 327),30,null())->loadGraphic(HX_("assets/images/stoneIcon.png",2e,08,bd,4d),null(),null(),null(),null(),null());
HXLINE( 197)		this->stoneCounterIcon->scrollFactor->set(0,0);
HXLINE( 198)		this->add(this->stoneCounterIcon);
HXLINE( 199)		this->stoneCounterIcon->set_visible(false);
HXLINE( 202)		Float _hx_tmp = (this->stoneCounterIcon->x + 135);
HXDLIN( 202)		Float _hx_tmp1 = this->stoneCounterIcon->y;
HXDLIN( 202)		this->stoneCounterText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp,((_hx_tmp1 + (this->stoneCounterIcon->get_height() / ( (Float)(2) ))) - ( (Float)(39) )),0,HX_("0/5",56,95,24,00),60,null());
HXLINE( 203)		this->stoneCounterText->scrollFactor->set(0,0);
HXLINE( 204)		this->stoneCounterText->set_color(-16777216);
HXLINE( 205)		this->add(this->stoneCounterText);
HXLINE( 206)		this->stoneCounterText->set_visible(false);
HXLINE( 209)		Float _hx_tmp2 = this->stoneCounterIcon->x;
HXDLIN( 209)		Float _hx_tmp3 = this->stoneCounterIcon->y;
HXDLIN( 209)		this->minerTimerIcon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp2,((_hx_tmp3 + this->stoneCounterIcon->get_height()) + 30),HX_("assets/images/minerTimerIcon.png",85,96,7a,c9));
HXLINE( 210)		this->minerTimerIcon->scrollFactor->set(0,0);
HXLINE( 211)		this->add(this->minerTimerIcon);
HXLINE( 212)		this->minerTimerIcon->set_visible(false);
HXLINE( 214)		Float _hx_tmp4 = this->minerTimerIcon->x;
HXDLIN( 214)		Float _hx_tmp5 = (this->minerTimerIcon->y + 75);
HXDLIN( 214)		this->minerTimerText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp4,_hx_tmp5,this->minerTimerIcon->get_width(),HX_("0",30,00,00,00),60,null());
HXLINE( 215)		this->minerTimerText->set_color(-16777216);
HXLINE( 216)		this->minerTimerText->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 217)		this->minerTimerText->scrollFactor->set(0,0);
HXLINE( 218)		this->add(this->minerTimerText);
HXLINE( 219)		this->minerTimerText->set_visible(false);
HXLINE( 222)		this->ufo =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,600,HX_("ufo",fe,20,59,00),60,null());
HXLINE( 224)		this->ufo->scrollFactor->set(0,0);
HXLINE( 225)		this->add(this->ufo);
HXLINE( 226)		this->ufo->set_visible(false);
HXLINE( 229)		this->save =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE( 230)		this->save->bind(HX_("DefiAdv",6f,39,37,6e),null());
HXLINE( 232)		this->loadFile();
HXLINE( 235)		this->map->loadEntities(this->placeEntities_dyn(),HX_("entities",41,96,95,92));
HXLINE( 239)		::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/minerTheme.ogg",a1,5e,ce,5c),((Float)0.3),true,null());
HXLINE( 241)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 243)		::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),true,null(),null());
HXLINE( 244)		this->super::create();
            	}


void MinerState_obj::placeEntities( ::Dynamic entity){
            	HX_GC_STACKFRAME(&_hx_pos_cdd610f322c9d27c_249_placeEntities)
HXLINE( 250)		int x = ( (int)(entity->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXLINE( 251)		int y = ( (int)(entity->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXLINE( 253)		::String _hx_switch_0 = ( (::String)(entity->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
            		if (  (_hx_switch_0==HX_("box",0b,be,4a,00)) ){
HXLINE( 278)			this->box->setPosition((x - 6),y);
HXLINE( 279)			this->boxPos = this->box->y;
HXLINE( 277)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("minerGate",2a,44,a5,59)) ){
HXLINE( 265)			this->minerGate->setPosition(x,y);
HXLINE( 266)			this->minerGateX = this->minerGate->x;
HXLINE( 264)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("minerSign",5c,da,99,61)) ){
HXLINE( 271)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->npc;
HXDLIN( 271)			_hx_tmp->add( ::NPC_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::NpcType_obj::minerSign_dyn())).StaticCast<  ::NPC >();
HXDLIN( 271)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("monumentDoor",55,37,bd,9c)) ){
HXLINE( 261)			this->monumentDoor->setPosition((x + 84),y);
HXDLIN( 261)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("saveStone",e8,17,c3,12)) ){
HXLINE( 256)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->npc;
HXDLIN( 256)			_hx_tmp->add( ::NPC_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::NpcType_obj::saveStone_dyn())).StaticCast<  ::NPC >();
HXDLIN( 256)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("shop",f6,d4,52,4c)) ){
HXLINE( 259)			this->shop->setPosition(x,y);
HXDLIN( 259)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("spartan",53,b4,ad,9b)) ){
HXLINE( 269)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->npc;
HXDLIN( 269)			_hx_tmp->add( ::NPC_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::NpcType_obj::spartan_dyn())).StaticCast<  ::NPC >();
HXDLIN( 269)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("spartanMiner",2c,a1,5a,f9)) ){
HXLINE( 282)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->enemy;
HXDLIN( 282)			_hx_tmp->add( ::Enemy_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::EnemyType_obj::spartanMiner_dyn())).StaticCast<  ::Enemy >();
HXDLIN( 282)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("starter",4f,29,1b,35)) ){
HXLINE( 285)			if (!(this->meetStarter)) {
HXLINE( 286)				 ::flixel::group::FlxTypedGroup _hx_tmp = this->enemy;
HXDLIN( 286)				_hx_tmp->add( ::Enemy_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::EnemyType_obj::starter_dyn())).StaticCast<  ::Enemy >();
            			}
HXLINE( 285)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("stone",65,10,16,84)) ){
HXLINE( 274)			 ::flixel::FlxSprite s =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,x,y,HX_("assets/images/stone.png",15,bf,65,9e));
HXLINE( 275)			this->stone->add(s).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 273)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("streetDoor",11,f3,13,31)) ){
HXLINE( 263)			this->streetDoor->setPosition((x + 84),y);
HXDLIN( 263)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("torch",fc,d0,30,14)) ){
HXLINE( 289)			 ::flixel::FlxSprite t =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,x,y,null())->loadGraphic(HX_("assets/images/torch.png",2c,17,62,24),true,120,240,null(),null());
HXLINE( 290)			t->animation->add(HX_("burn",4f,14,20,41),::Array_obj< int >::fromData( _hx_array_data_02f70b32_6,5),6,true,null(),null());
HXLINE( 291)			t->animation->play(HX_("burn",4f,14,20,41),null(),null(),null());
HXLINE( 292)			t->set_immovable(true);
HXLINE( 293)			this->torch->add(t).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 288)			goto _hx_goto_4;
            		}
            		_hx_goto_4:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(MinerState_obj,placeEntities,(void))

void MinerState_obj::saveFile(){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_299_saveFile)
HXLINE( 302)		this->save->data->__SetField(HX_("bananaValue",cc,cc,f1,ec),this->bag->bananaCounter,::hx::paccDynamic);
HXLINE( 303)		this->save->data->__SetField(HX_("diamondValue",7d,77,b0,a2),this->bag->diamondCounter,::hx::paccDynamic);
HXLINE( 305)		this->save->data->__SetField(HX_("shibaInvest",48,fd,8d,02),this->bag->shibaInvest,::hx::paccDynamic);
HXLINE( 306)		this->save->data->__SetField(HX_("shibaWave",4c,70,e1,4f),this->bag->shibaWave,::hx::paccDynamic);
HXLINE( 308)		this->save->data->__SetField(HX_("nftInvest",51,c2,fb,19),this->bag->nftInvest,::hx::paccDynamic);
HXLINE( 309)		this->save->data->__SetField(HX_("nftWave",15,b1,e6,aa),this->bag->nftWave,::hx::paccDynamic);
HXLINE( 310)		this->save->data->__SetField(HX_("nftStyle",55,4a,eb,9d),this->combatHud->nftStyleNum,::hx::paccDynamic);
HXLINE( 312)		this->save->data->__SetField(HX_("bananaCoin",96,8c,07,e1),this->bag->bananaCoin,::hx::paccDynamic);
HXLINE( 313)		this->save->data->__SetField(HX_("appleCoin",0b,1c,90,a7),this->bag->appleCoin,::hx::paccDynamic);
HXLINE( 316)		this->save->data->__SetField(HX_("saveStoneIntro",64,79,c3,53),this->dia->saveStoneIntro,::hx::paccDynamic);
HXLINE( 319)		this->save->data->__SetField(HX_("playerPos",b3,bc,c6,00),this->player->getPosition(null()),::hx::paccDynamic);
HXLINE( 322)		this->save->data->__SetField(HX_("meetStarter",48,6a,9b,e2),this->meetStarter,::hx::paccDynamic);
HXLINE( 323)		this->save->data->__SetField(HX_("streetYes",e4,6c,51,08),this->streetYes,::hx::paccDynamic);
HXLINE( 324)		this->save->data->__SetField(HX_("stoneTextYes",95,9c,cf,ee),this->dia->stoneTextYes,::hx::paccDynamic);
HXLINE( 325)		this->save->data->__SetField(HX_("place",c7,f4,8d,c4),HX_("miner",7f,72,68,08),::hx::paccDynamic);
HXLINE( 326)		this->save->data->__SetField(HX_("buyStarter",a9,22,1b,10),this->combatHud->buyStarter,::hx::paccDynamic);
            	}


HX_DEFINE_DYNAMIC_FUNC0(MinerState_obj,saveFile,(void))

void MinerState_obj::loadFile(){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_331_loadFile)
HXLINE( 334)		this->bag->diamondUi->set_visible(true);
HXLINE( 335)		this->bag->bananaCounter = ( (int)(this->save->data->__Field(HX_("bananaValue",cc,cc,f1,ec),::hx::paccDynamic)) );
HXLINE( 336)		this->bag->diamondCounter = ( (Float)(this->save->data->__Field(HX_("diamondValue",7d,77,b0,a2),::hx::paccDynamic)) );
HXLINE( 338)		this->bag->shibaInvest = ( (int)(this->save->data->__Field(HX_("shibaInvest",48,fd,8d,02),::hx::paccDynamic)) );
HXLINE( 339)		this->bag->shibaWave = ( (Float)(this->save->data->__Field(HX_("shibaWave",4c,70,e1,4f),::hx::paccDynamic)) );
HXLINE( 341)		this->bag->nftInvest = ( (int)(this->save->data->__Field(HX_("nftInvest",51,c2,fb,19),::hx::paccDynamic)) );
HXLINE( 342)		this->bag->nftWave = ( (Float)(this->save->data->__Field(HX_("nftWave",15,b1,e6,aa),::hx::paccDynamic)) );
HXLINE( 343)		this->combatHud->nftStyleNum = ( (int)(this->save->data->__Field(HX_("nftStyle",55,4a,eb,9d),::hx::paccDynamic)) );
HXLINE( 345)		this->bag->bananaCoin = ( (Float)(this->save->data->__Field(HX_("bananaCoin",96,8c,07,e1),::hx::paccDynamic)) );
HXLINE( 346)		this->bag->appleCoin = ( (Float)(this->save->data->__Field(HX_("appleCoin",0b,1c,90,a7),::hx::paccDynamic)) );
HXLINE( 347)		this->bag->updateBag();
HXLINE( 348)		this->tip->set_visible(true);
HXLINE( 349)		this->tip->set_active(true);
HXLINE( 352)		if ((this->bag->shibaInvest != 0)) {
HXLINE( 354)			this->bag->firstShiba = true;
HXLINE( 355)			this->bag->shibaNotifText->set_text(HX_("done",82,f0,6d,42));
HXLINE( 356)			this->bag->countShibaWave();
            		}
            		else {
HXLINE( 359)			this->bag->shibaUi->set_visible(false);
            		}
HXLINE( 362)		if ((this->bag->nftInvest != 0)) {
HXLINE( 364)			this->bag->firstNft = true;
HXLINE( 365)			this->bag->nftNotifText->set_text(HX_("done",82,f0,6d,42));
HXLINE( 366)			this->bag->countNftWave(this->combatHud->nftStyleNum);
            		}
            		else {
HXLINE( 369)			this->bag->nftUi->set_visible(false);
            		}
HXLINE( 371)		this->dia->saveStoneIntro = ( (bool)(this->save->data->__Field(HX_("saveStoneIntro",64,79,c3,53),::hx::paccDynamic)) );
HXLINE( 374)		this->meetStarter = ( (bool)(this->save->data->__Field(HX_("meetStarter",48,6a,9b,e2),::hx::paccDynamic)) );
HXLINE( 375)		this->streetYes = ( (bool)(this->save->data->__Field(HX_("streetYes",e4,6c,51,08),::hx::paccDynamic)) );
HXLINE( 376)		this->dia->stoneTextYes = ( (bool)(this->save->data->__Field(HX_("stoneTextYes",95,9c,cf,ee),::hx::paccDynamic)) );
HXLINE( 377)		this->combatHud->buyStarter = ( (bool)(this->save->data->__Field(HX_("buyStarter",a9,22,1b,10),::hx::paccDynamic)) );
HXLINE( 378)		bool _hx_tmp;
HXDLIN( 378)		if (::hx::IsNotNull( this->save->data->__Field(HX_("playerPos",b3,bc,c6,00),::hx::paccDynamic) )) {
HXLINE( 378)			_hx_tmp = ::hx::IsNotNull( this->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic) );
            		}
            		else {
HXLINE( 378)			_hx_tmp = false;
            		}
HXDLIN( 378)		if (_hx_tmp) {
HXLINE( 380)			if (::hx::IsEq( this->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic),HX_("miner",7f,72,68,08) )) {
HXLINE( 382)				this->player->setPosition( ::Dynamic(this->save->data->__Field(HX_("playerPos",b3,bc,c6,00),::hx::paccDynamic))->__Field(HX_("x",78,00,00,00),::hx::paccDynamic), ::Dynamic(this->save->data->__Field(HX_("playerPos",b3,bc,c6,00),::hx::paccDynamic))->__Field(HX_("y",79,00,00,00),::hx::paccDynamic));
HXLINE( 383)				this->tip->missionGetText(::MissionText_obj::exploreMiner_dyn());
            			}
            			else {
HXLINE( 385)				if (::hx::IsEq( this->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic),HX_("monument",47,ea,c5,03) )) {
HXLINE( 388)					this->player->setPosition(429,6060);
HXLINE( 389)					this->tip->missionGetText(::MissionText_obj::exploreMiner_dyn());
HXLINE( 390)					this->saveFile();
            				}
            				else {
HXLINE( 392)					if (::hx::IsEq( this->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic),HX_("street",03,18,2d,11) )) {
HXLINE( 394)						this->player->setPosition(4629,6060);
HXLINE( 395)						this->tip->missionGetText(::MissionText_obj::minerFin_dyn());
HXLINE( 396)						this->saveFile();
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MinerState_obj,loadFile,(void))

void MinerState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_404_update)
HXLINE( 405)		this->super::update(elapsed);
HXLINE( 406)		this->updateWhenDiaInvisible();
HXLINE( 407)		this->updateInCombat();
HXLINE( 408)		this->updateTalking();
HXLINE( 409)		this->updateF4();
HXLINE( 410)		this->updateC();
HXLINE( 411)		this->updateTimer();
HXLINE( 414)		 ::flixel::text::FlxText _hx_tmp = this->ufo;
HXDLIN( 414)		_hx_tmp->set_text(::Std_obj::string( ::Dynamic(this->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic))));
HXLINE( 415)		bool e = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_02f70b32_10,1),-1);
HXLINE( 416)		if (e) {
HXLINE( 418)			 ::Bag fh = this->bag;
HXDLIN( 418)			fh->diamondCounter = (fh->diamondCounter + 300);
HXLINE( 419)			this->bag->updateBag();
            		}
HXLINE( 425)		::flixel::FlxG_obj::overlap(this->player,this->ground,null(),null());
HXLINE( 426)		::flixel::FlxG_obj::overlap(this->player,this->road,null(),null());
HXLINE( 427)		{
HXLINE( 427)			 ::Dynamic NotifyCallback = null();
HXDLIN( 427)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->walls) ),NotifyCallback,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE( 428)		::flixel::FlxG_obj::overlap(this->player,this->through,null(),null());
HXLINE( 429)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->minerGate) ),this->timeToStop_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 431)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->npc) ),this->npcTalk_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 433)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->shop) ),this->shopOpen_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 434)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->monumentDoor) ),this->goToMonument_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 435)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->streetDoor) ),this->goToStreet_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 437)		::flixel::FlxG_obj::overlap(this->player,this->stone,this->playerGotStone_dyn(),null());
HXLINE( 438)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->box) ),this->stoneInsideBox_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 439)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->enemy) ),this->touchMiner_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 441)		{
HXLINE( 441)			 ::Dynamic NotifyCallback1 = null();
HXDLIN( 441)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->enemy) ),( ( ::flixel::FlxBasic)(this->walls) ),NotifyCallback1,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE( 442)		{
HXLINE( 442)			 ::Dynamic NotifyCallback2 = null();
HXDLIN( 442)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->enemy) ),( ( ::flixel::FlxBasic)(this->road) ),NotifyCallback2,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE( 443)		::flixel::FlxG_obj::overlap(this->enemy,this->stone,this->enemyGotStone_dyn(),null());
HXLINE( 444)		{
HXLINE( 444)			 ::flixel::FlxBasic ObjectOrGroup2 = null();
HXDLIN( 444)			 ::Dynamic NotifyCallback3 = null();
HXDLIN( 444)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->enemy) ),ObjectOrGroup2,NotifyCallback3,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE( 445)		{
HXLINE( 445)			 ::Dynamic NotifyCallback4 = null();
HXDLIN( 445)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->enemy) ),( ( ::flixel::FlxBasic)(this->npc) ),NotifyCallback4,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE( 447)		{
HXLINE( 447)			 ::flixel::FlxBasic ObjectOrGroup21 = null();
HXDLIN( 447)			 ::Dynamic NotifyCallback5 = null();
HXDLIN( 447)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->stone) ),ObjectOrGroup21,NotifyCallback5,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE( 448)		{
HXLINE( 448)			 ::Dynamic NotifyCallback6 = null();
HXDLIN( 448)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->stone) ),( ( ::flixel::FlxBasic)(this->walls) ),NotifyCallback6,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE( 450)		{
HXLINE( 450)			 ::Dynamic NotifyCallback7 = null();
HXDLIN( 450)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->box) ),( ( ::flixel::FlxBasic)(this->walls) ),NotifyCallback7,::flixel::FlxObject_obj::separate_dyn());
            		}
            	}


void MinerState_obj::npcTalk( ::Player player, ::NPC npc){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_455_npcTalk)
HXLINE( 456)		this->talkYes = true;
HXLINE( 457)		this->npcType = npc->type;
            	}


HX_DEFINE_DYNAMIC_FUNC2(MinerState_obj,npcTalk,(void))

void MinerState_obj::goToMonument( ::Player player, ::flixel::FlxSprite monumentDoor){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MinerState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_GC_STACKFRAME(&_hx_pos_cdd610f322c9d27c_465_goToMonument)
HXLINE( 466)			_gthis->saveFile();
HXLINE( 467)			{
HXLINE( 467)				 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,true);
HXDLIN( 467)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 467)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_462_goToMonument)
HXDLIN( 462)		 ::MinerState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 463)		this->doorTele->play(null(),null(),null());
HXLINE( 464)		::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),false, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(MinerState_obj,goToMonument,(void))

void MinerState_obj::goToStreet( ::Player player, ::flixel::FlxSprite streetDoor){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_473_goToStreet)
HXDLIN( 473)		 ::MinerState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 474)		if (this->streetYes) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MinerState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_cdd610f322c9d27c_478_goToStreet)
HXLINE( 479)				_gthis->saveFile();
HXLINE( 480)				{
HXLINE( 480)					 ::flixel::FlxState nextState =  ::StreetState_obj::__alloc( HX_CTX ,null());
HXDLIN( 480)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 480)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 476)			this->doorTele->play(null(),null(),null());
HXLINE( 477)			::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),false, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            		else {
HXLINE( 485)			if ((this->bag->diamondCounter >= 300)) {
HXLINE( 487)				this->name = HX_W(u":N:\u4f60\u6709300\u80fd\u91cf\u5e63\u4e86\uff0c\u6b61\u8fce\u901a\u904e\u6b64\u50b3\u9001\u9ede\uff0c\u9032\u5165\u4e0b\u4e00\u95dc\uff01",bc8b,4cc3);
HXLINE( 488)				this->txt = false;
HXLINE( 489)				this->playerUpDown();
HXLINE( 490)				this->dia->show(this->name,this->txt);
HXLINE( 491)				this->streetOpen = true;
            			}
            			else {
HXLINE( 495)				this->name = HX_W(u":N:\u4f60\u9700\u8981300\u80fd\u91cf\u5e63\u624d\u80fd\u901a\u904e\u6b64\u50b3\u9001\u9ede\u3002",74fb,6981);
HXLINE( 496)				this->txt = false;
HXLINE( 497)				this->playerUpDown();
HXLINE( 498)				this->dia->show(this->name,this->txt);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MinerState_obj,goToStreet,(void))

void MinerState_obj::timeToStop( ::Player player, ::flixel::FlxSprite minerGate){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_506_timeToStop)
HXDLIN( 506)		if ((player->y <= minerGate->y)) {
HXLINE( 508)			this->minerTimerText->set_visible(false);
HXLINE( 509)			::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),false,this->minerGameOver_dyn(),null());
            		}
            		else {
HXLINE( 511)			if ((minerGate->x == this->minerGateX)) {
HXLINE( 513)				this->gateSlide->play(null(),null(),null());
HXLINE( 514)				Float minerGate1 = minerGate->x;
HXDLIN( 514)				::flixel::tweens::FlxTween_obj::tween(minerGate, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("x",78,00,00,00),(minerGate1 + minerGate->get_width()))),2,null());
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MinerState_obj,timeToStop,(void))

void MinerState_obj::playerGotStone( ::Player player, ::flixel::FlxSprite stone){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,stone) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer timer){
            			HX_GC_STACKFRAME(&_hx_pos_cdd610f322c9d27c_531_playerGotStone)
HXLINE( 531)			stone->revive();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_cdd610f322c9d27c_520_playerGotStone)
HXLINE( 521)		this->stoneCounter++;
HXLINE( 522)		this->stoneSound->play(true,null(),null());
HXLINE( 523)		 ::flixel::text::FlxText _hx_tmp = this->stoneCounterText;
HXDLIN( 523)		_hx_tmp->set_text((::Std_obj::string(this->stoneCounter) + HX_("/5",26,29,00,00)));
HXLINE( 524)		stone->kill();
HXLINE( 525)		if ((this->stoneCounter >= this->stoneGoal)) {
HXLINE( 526)			this->stoneCounterText->set_color(-65536);
            		}
            		else {
HXLINE( 528)			this->stoneCounterText->set_color(-16777216);
            		}
HXLINE( 529)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(3, ::Dynamic(new _hx_Closure_0(stone)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(MinerState_obj,playerGotStone,(void))

void MinerState_obj::enemyGotStone( ::Enemy enemy, ::flixel::FlxSprite stone){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::flixel::FlxSprite,stone) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer timer){
            			HX_GC_STACKFRAME(&_hx_pos_cdd610f322c9d27c_541_enemyGotStone)
HXLINE( 541)			stone->revive();
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_cdd610f322c9d27c_537_enemyGotStone)
HXLINE( 538)		stone->kill();
HXLINE( 539)		 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(3, ::Dynamic(new _hx_Closure_0(stone)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(MinerState_obj,enemyGotStone,(void))

void MinerState_obj::touchMiner( ::Player player, ::Enemy enemy){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_547_touchMiner)
HXDLIN( 547)		 ::MinerState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 548)		if (::hx::IsPointerEq( enemy->type,::EnemyType_obj::spartanMiner_dyn() )) {
HXLINE( 550)			if ((this->stoneCounter > 0)) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MinerState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_552_touchMiner)
HXLINE( 553)					_gthis->stoneCounter--;
HXLINE( 554)					_gthis->minerPunch->play(true,null(),null());
HXLINE( 555)					 ::flixel::text::FlxText _gthis1 = _gthis->stoneCounterText;
HXDLIN( 555)					_gthis1->set_text((::Std_obj::string(_gthis->stoneCounter) + HX_("/5",26,29,00,00)));
HXLINE( 556)					if ((_gthis->stoneCounter >= _gthis->stoneGoal)) {
HXLINE( 557)						_gthis->stoneCounterText->set_color(-65536);
            					}
            					else {
HXLINE( 559)						_gthis->stoneCounterText->set_color(-16777216);
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 551)				::flixel::FlxG_obj::camera->shake(((Float)0.01),((Float)0.1), ::Dynamic(new _hx_Closure_0(_gthis)),null(),null());
            			}
            		}
            		else {
HXLINE( 563)			if ((this->bag->diamondCounter >= 5)) {
HXLINE( 565)				this->touchEnemy->play(null(),null(),null());
HXLINE( 566)				this->inCombat = true;
HXLINE( 567)				player->set_active(false);
HXLINE( 568)				enemy->set_active(false);
HXLINE( 569)				this->combatHud->initCombat(this->bag->diamondCounter,this->bag->diamondText,this->bag->bananaCoin,this->bag->appleCoin,this->bag->dexCoin,enemy);
            			}
            			else {
HXLINE( 573)				this->name = HX_W(u":N:\u4f60\u6c92\u6709\u8db3\u5920\u7684\u80fd\u91cf\u5e63\uff01\u4f60\u9700\u8981\u81f3\u5c11 5 \u80fd\u91cf\u5e63\uff01",a78b,ce16);
HXLINE( 574)				this->txt = false;
HXLINE( 575)				this->playerUpDown();
HXLINE( 576)				this->dia->show(this->name,this->txt);
HXLINE( 577)				this->combatHud->enemy = enemy;
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MinerState_obj,touchMiner,(void))

void MinerState_obj::updateInCombat(){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_584_updateInCombat)
HXDLIN( 584)		bool _hx_tmp;
HXDLIN( 584)		if (this->inCombat) {
HXDLIN( 584)			_hx_tmp = !(this->combatHud->visible);
            		}
            		else {
HXDLIN( 584)			_hx_tmp = false;
            		}
HXDLIN( 584)		if (_hx_tmp) {
HXLINE( 586)			if (::hx::IsPointerEq( this->combatHud->enemy->type,::EnemyType_obj::starter_dyn() )) {
HXLINE( 588)				this->meetStarter = true;
HXLINE( 589)				this->combatHud->enemy->kill();
            			}
HXLINE( 592)			this->bag->diamondCounter = this->combatHud->diamond;
HXLINE( 593)			this->bag->bananaCoin = this->combatHud->bananaCoin;
HXLINE( 594)			this->bag->appleCoin = this->combatHud->appleCoin;
HXLINE( 595)			this->bag->dexCoin = this->combatHud->dexCoin;
HXLINE( 596)			this->bag->updateBag();
HXLINE( 597)			this->inCombat = false;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MinerState_obj,updateInCombat,(void))

void MinerState_obj::stoneInsideBox( ::Player player, ::flixel::FlxSprite box){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_603_stoneInsideBox)
HXDLIN( 603)		 ::MinerState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 604)		if ((this->stoneCounter >= this->stoneGoal)) {
            			HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::MinerState,_gthis, ::flixel::FlxSprite,box) HXARGC(1)
            			void _hx_run( ::flixel::tweens::FlxTween _){
            				HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_618_stoneInsideBox)
HXLINE( 619)				box->set_y(( (Float)(_gthis->roadStart) ));
HXLINE( 620)				box->loadGraphic(HX_("assets/images/boxEmpty.png",e8,56,dd,5f),null(),null(),null(),null(),null());
HXLINE( 621)				::flixel::tweens::FlxTween_obj::tween(box, ::Dynamic(::hx::Anon_obj::Create(1)
            					->setFixed(0,HX_("y",79,00,00,00),_gthis->boxPos)),2,null());
            			}
            			HX_END_LOCAL_FUNC1((void))

HXLINE( 606)			int car = ::Std_obj::_hx_int((( (Float)(this->stoneCounter) ) / ( (Float)(this->stoneGoal) )));
HXLINE( 607)			 ::Bag fh = this->bag;
HXDLIN( 607)			Float fh1 = fh->diamondCounter;
HXDLIN( 607)			fh->diamondCounter = (fh1 + ::Std_obj::_hx_int(( (Float)((car * 50)) )));
HXLINE( 608)			 ::MinerState _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 608)			_hx_tmp->finalScore = (_hx_tmp->finalScore + car);
HXLINE( 609)			this->stoneCounter = ::hx::Mod(this->stoneCounter,this->stoneGoal);
HXLINE( 610)			 ::flixel::text::FlxText _hx_tmp1 = this->stoneCounterText;
HXDLIN( 610)			_hx_tmp1->set_text((::Std_obj::string(this->stoneCounter) + HX_("/5",26,29,00,00)));
HXLINE( 611)			this->stoneCounterText->set_color(-16777216);
HXLINE( 612)			box->loadGraphic(HX_("assets/images/boxFull.png",aa,d9,9b,68),null(),null(),null(),null(),null());
HXLINE( 614)			this->bag->updateBag();
HXLINE( 616)			::flixel::tweens::FlxTween_obj::tween(box, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("y",79,00,00,00),this->roadEnd)),2, ::Dynamic(::hx::Anon_obj::Create(1)
            				->setFixed(0,HX_("onComplete",f8,d4,7e,5d), ::Dynamic(new _hx_Closure_0(_gthis,box)))));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(MinerState_obj,stoneInsideBox,(void))

void MinerState_obj::updateTimer(){
            	HX_GC_STACKFRAME(&_hx_pos_cdd610f322c9d27c_629_updateTimer)
HXDLIN( 629)		 ::MinerState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 631)		if (this->minerTimerIcon->visible) {
HXLINE( 634)			 ::flixel::text::FlxText _hx_tmp = this->minerTimerText;
HXDLIN( 634)			 ::flixel::util::FlxTimer _this = this->timer;
HXDLIN( 634)			_hx_tmp->set_text(::Std_obj::string(::Std_obj::_hx_int((_this->time - _this->_timeCounter))));
HXLINE( 635)			 ::flixel::util::FlxTimer _this1 = this->timer;
HXDLIN( 635)			if ((::Std_obj::_hx_int((_this1->time - _this1->_timeCounter)) <= 5)) {
HXLINE( 636)				this->minerTimerText->set_color(-65536);
            			}
            			else {
HXLINE( 638)				this->minerTimerText->set_color(-16777216);
            			}
HXLINE( 640)			if (this->timer->finished) {
HXLINE( 641)				this->player->set_active(false);
            			}
            		}
            		else {
HXLINE( 645)			bool _hx_tmp;
HXDLIN( 645)			bool _hx_tmp1;
HXDLIN( 645)			if ((this->player->y <= (this->minerGate->y - ( (Float)(150) )))) {
HXLINE( 645)				Float _hx_tmp = this->player->x;
HXDLIN( 645)				Float _hx_tmp2 = this->minerGate->x;
HXDLIN( 645)				_hx_tmp1 = (_hx_tmp < (_hx_tmp2 + this->minerGate->get_width()));
            			}
            			else {
HXLINE( 645)				_hx_tmp1 = false;
            			}
HXDLIN( 645)			if (_hx_tmp1) {
HXLINE( 645)				Float _hx_tmp1 = this->minerGate->x;
HXDLIN( 645)				Float _hx_tmp2 = this->minerGateX;
HXDLIN( 645)				_hx_tmp = (_hx_tmp1 == (_hx_tmp2 + this->minerGate->get_width()));
            			}
            			else {
HXLINE( 645)				_hx_tmp = false;
            			}
HXDLIN( 645)			if (_hx_tmp) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MinerState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer timer){
            					HX_GC_STACKFRAME(&_hx_pos_cdd610f322c9d27c_650_updateTimer)
HXLINE( 651)					_gthis->minerTimerText->set_visible(false);
HXLINE( 652)					::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),false,_gthis->minerGameOver_dyn(),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 647)				this->tip->tipGetText(::TipText_obj::miner_dyn());
HXLINE( 648)				this->minerGate->set_x(this->minerGateX);
HXLINE( 649)				this->timer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(this->minerTimeSet, ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXLINE( 654)				this->minerTimerText->set_visible(true);
HXLINE( 655)				this->minerTimerIcon->set_visible(true);
HXLINE( 656)				this->stoneCounterIcon->set_visible(true);
HXLINE( 657)				this->stoneCounterText->set_visible(true);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MinerState_obj,updateTimer,(void))

void MinerState_obj::minerGameOver(){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_663_minerGameOver)
HXLINE( 664)		this->player->setPosition(this->minerGate->x,(this->minerGate->y + 600));
HXLINE( 665)		this->minerTimerIcon->set_visible(false);
HXLINE( 666)		this->stoneCounterIcon->set_visible(false);
HXLINE( 667)		this->stoneCounterText->set_visible(false);
HXLINE( 668)		::String _hx_tmp = ((HX_W(u":N:\u606d\u559c\u4f60\u7e3d\u5171\u6253\u5305\u4e86",e6d5,e283) + ::Std_obj::string((this->finalScore * 5))) + HX_W(u" \u9846\u5c0f\u77f3\u982d\uff0c\u8cfa\u4e86",e8af,f804));
HXDLIN( 668)		this->name = ((_hx_tmp + ::Std_obj::string((this->finalScore * 50))) + HX_W(u"\u80fd\u91cf\u5e63\uff01",8874,6165));
HXLINE( 669)		this->playerUpDown();
HXLINE( 670)		this->dia->show(this->name,false);
HXLINE( 671)		this->stoneCounter = 0;
HXLINE( 672)		this->finalScore = 0;
HXLINE( 673)		 ::flixel::text::FlxText _hx_tmp1 = this->stoneCounterText;
HXDLIN( 673)		_hx_tmp1->set_text((::Std_obj::string(this->stoneCounter) + HX_("/5",26,29,00,00)));
HXLINE( 674)		this->timer->cancel();
HXLINE( 675)		::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),true,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(MinerState_obj,minerGameOver,(void))

void MinerState_obj::shopOpen( ::Player player, ::flixel::FlxSprite shop){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MinerState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_682_shopOpen)
HXLINE( 683)			_gthis->bag->buyAndSell();
HXLINE( 684)			::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/shopTheme.ogg",9e,e2,37,1e),((Float)0.3),true,null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_680_shopOpen)
HXDLIN( 680)		 ::MinerState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 681)		::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),false, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(MinerState_obj,shopOpen,(void))

void MinerState_obj::updateTalking(){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_690_updateTalking)
HXLINE( 691)		bool enter = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_02f70b32_32,2),-1);
HXLINE( 694)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_02f70b32_33,8),2)) {
HXLINE( 695)			this->talkYes = false;
            		}
HXLINE( 698)		bool _hx_tmp;
HXDLIN( 698)		bool _hx_tmp1;
HXDLIN( 698)		bool _hx_tmp2;
HXDLIN( 698)		bool _hx_tmp3;
HXDLIN( 698)		if (this->talkYes) {
HXLINE( 698)			_hx_tmp3 = enter;
            		}
            		else {
HXLINE( 698)			_hx_tmp3 = false;
            		}
HXDLIN( 698)		if (_hx_tmp3) {
HXLINE( 698)			_hx_tmp2 = !(this->bag->dealUi->visible);
            		}
            		else {
HXLINE( 698)			_hx_tmp2 = false;
            		}
HXDLIN( 698)		if (_hx_tmp2) {
HXLINE( 698)			_hx_tmp1 = !(this->bag->itemUi->visible);
            		}
            		else {
HXLINE( 698)			_hx_tmp1 = false;
            		}
HXDLIN( 698)		if (_hx_tmp1) {
HXLINE( 698)			_hx_tmp = !(this->bag->shopUi->visible);
            		}
            		else {
HXLINE( 698)			_hx_tmp = false;
            		}
HXDLIN( 698)		if (_hx_tmp) {
HXLINE( 700)			this->talkYes = false;
HXLINE( 701)			this->playerUpDown();
HXLINE( 704)			if (::hx::IsPointerEq( this->npcType,::NpcType_obj::saveStone_dyn() )) {
HXLINE( 706)				this->saveFile();
HXLINE( 707)				this->dia->saveShowTime(this->bag->diamondCounter,HX_W(u"\u7926\u5834",37b0,388f));
HXLINE( 708)				if (this->dia->saveStoneIntro) {
HXLINE( 709)					this->saveNoise->play(null(),null(),null());
            				}
            			}
            			else {
HXLINE( 711)				if (::hx::IsPointerEq( this->npcType,::NpcType_obj::spartan_dyn() )) {
HXLINE( 712)					this->stoneYes = true;
            				}
            			}
HXLINE( 714)			this->dia->context(this->npcType);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MinerState_obj,updateTalking,(void))

void MinerState_obj::updateWhenDiaInvisible(){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_720_updateWhenDiaInvisible)
HXDLIN( 720)		 ::MinerState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 722)		bool _hx_tmp;
HXDLIN( 722)		bool _hx_tmp1;
HXDLIN( 722)		bool _hx_tmp2;
HXDLIN( 722)		bool _hx_tmp3;
HXDLIN( 722)		if (!(this->dia->visible)) {
HXLINE( 722)			_hx_tmp3 = this->bag->shopUi->visible;
            		}
            		else {
HXLINE( 722)			_hx_tmp3 = true;
            		}
HXDLIN( 722)		if (!(_hx_tmp3)) {
HXLINE( 722)			_hx_tmp2 = this->bag->dealUi->visible;
            		}
            		else {
HXLINE( 722)			_hx_tmp2 = true;
            		}
HXDLIN( 722)		if (!(_hx_tmp2)) {
HXLINE( 722)			_hx_tmp1 = this->bag->itemUi->visible;
            		}
            		else {
HXLINE( 722)			_hx_tmp1 = true;
            		}
HXDLIN( 722)		if (!(_hx_tmp1)) {
HXLINE( 722)			_hx_tmp = this->combatHud->visible;
            		}
            		else {
HXLINE( 722)			_hx_tmp = true;
            		}
HXDLIN( 722)		if (_hx_tmp) {
HXLINE( 724)			this->player->set_active(false);
HXLINE( 725)			this->enemy->set_active(false);
            		}
            		else {
HXLINE( 729)			this->player->set_active(true);
HXLINE( 730)			this->enemy->set_active(true);
            		}
HXLINE( 734)		if (!(this->dia->visible)) {
HXLINE( 737)			if (this->stoneYes) {
HXLINE( 739)				this->tip->tipGetText(::TipText_obj::minerSign_dyn());
HXLINE( 740)				this->tip->missionGetText(::MissionText_obj::minerFin_dyn());
HXLINE( 741)				this->stoneYes = false;
            			}
HXLINE( 744)			if (this->streetOpen) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MinerState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_cdd610f322c9d27c_751_updateWhenDiaInvisible)
HXLINE( 752)					_gthis->saveFile();
HXLINE( 753)					{
HXLINE( 753)						 ::flixel::FlxState nextState =  ::StreetState_obj::__alloc( HX_CTX ,null());
HXDLIN( 753)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 753)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 746)				this->streetOpen = false;
HXLINE( 747)				this->streetYes = true;
HXLINE( 749)				this->doorTele->play(null(),null(),null());
HXLINE( 750)				::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),false, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
HXLINE( 757)			if (this->dia->saveStoneYes) {
HXLINE( 759)				this->dia->saveStoneYes = false;
HXLINE( 760)				this->name = ((HX_W(u":N:\u7329\u7329  \u7926\u5834  ",3116,6966) + this->bag->diamondCounter) + HX_W(u"\u80fd\u91cf\u5e63\n\u5b58\u6a94\u6210\u529f\uff01",463e,47f1));
HXLINE( 761)				this->saveNoise->play(null(),null(),null());
HXLINE( 762)				this->dia->show(this->name,false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MinerState_obj,updateWhenDiaInvisible,(void))

void MinerState_obj::playerUpDown(){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_772_playerUpDown)
HXDLIN( 772)		Float _hx_tmp = this->player->y;
HXDLIN( 772)		Float _hx_tmp1 = (_hx_tmp - (this->player->get_height() / ( (Float)(2) )));
HXDLIN( 772)		if (((_hx_tmp1 - (::flixel::FlxG_obj::camera->scroll->y * this->player->scrollFactor->y)) > (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )))) {
HXLINE( 773)			this->dia->diaUpDown = HX_("up",5b,66,00,00);
            		}
            		else {
HXLINE( 775)			this->dia->diaUpDown = HX_("down",62,f8,6d,42);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MinerState_obj,playerUpDown,(void))

void MinerState_obj::updateF4(){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_780_updateF4)
HXLINE( 781)		bool f4 = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_02f70b32_38,1),-1);
HXLINE( 782)		bool _hx_tmp;
HXDLIN( 782)		if (f4) {
HXLINE( 782)			_hx_tmp = !(this->dia->visible);
            		}
            		else {
HXLINE( 782)			_hx_tmp = false;
            		}
HXDLIN( 782)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_cdd610f322c9d27c_787_updateF4)
HXLINE( 787)				 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN( 787)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 787)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 784)			this->cancel->play(true,null(),null());
HXLINE( 785)			::flixel::FlxG_obj::camera->fade(-16777216,((Float).33),false, ::Dynamic(new _hx_Closure_0()),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MinerState_obj,updateF4,(void))

void MinerState_obj::updateC(){
            	HX_STACKFRAME(&_hx_pos_cdd610f322c9d27c_794_updateC)
HXLINE( 795)		bool c = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_02f70b32_41,1),-1);
HXLINE( 796)		bool _hx_tmp;
HXDLIN( 796)		bool _hx_tmp1;
HXDLIN( 796)		bool _hx_tmp2;
HXDLIN( 796)		bool _hx_tmp3;
HXDLIN( 796)		if (c) {
HXLINE( 796)			_hx_tmp3 = !(this->dia->visible);
            		}
            		else {
HXLINE( 796)			_hx_tmp3 = false;
            		}
HXDLIN( 796)		if (_hx_tmp3) {
HXLINE( 796)			_hx_tmp2 = !(this->bag->dealUi->visible);
            		}
            		else {
HXLINE( 796)			_hx_tmp2 = false;
            		}
HXDLIN( 796)		if (_hx_tmp2) {
HXLINE( 796)			_hx_tmp1 = !(this->bag->itemUi->visible);
            		}
            		else {
HXLINE( 796)			_hx_tmp1 = false;
            		}
HXDLIN( 796)		if (_hx_tmp1) {
HXLINE( 796)			_hx_tmp = !(this->bag->shopUi->visible);
            		}
            		else {
HXLINE( 796)			_hx_tmp = false;
            		}
HXDLIN( 796)		if (_hx_tmp) {
HXLINE( 798)			this->openBag->play(null(),null(),null());
HXLINE( 799)			this->bag->bagUiShow();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(MinerState_obj,updateC,(void))


::hx::ObjectPtr< MinerState_obj > MinerState_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< MinerState_obj > __this = new MinerState_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< MinerState_obj > MinerState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	MinerState_obj *__this = (MinerState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MinerState_obj), true, "MinerState"));
	*(void **)__this = MinerState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

MinerState_obj::MinerState_obj()
{
}

void MinerState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MinerState);
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(tip,"tip");
	HX_MARK_MEMBER_NAME(bag,"bag");
	HX_MARK_MEMBER_NAME(cancel,"cancel");
	HX_MARK_MEMBER_NAME(minerPunch,"minerPunch");
	HX_MARK_MEMBER_NAME(gateSlide,"gateSlide");
	HX_MARK_MEMBER_NAME(touchEnemy,"touchEnemy");
	HX_MARK_MEMBER_NAME(openBag,"openBag");
	HX_MARK_MEMBER_NAME(doorTele,"doorTele");
	HX_MARK_MEMBER_NAME(saveNoise,"saveNoise");
	HX_MARK_MEMBER_NAME(stoneGoal,"stoneGoal");
	HX_MARK_MEMBER_NAME(dia,"dia");
	HX_MARK_MEMBER_NAME(diaUpDown,"diaUpDown");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(txt,"txt");
	HX_MARK_MEMBER_NAME(talkYes,"talkYes");
	HX_MARK_MEMBER_NAME(enemy,"enemy");
	HX_MARK_MEMBER_NAME(inCombat,"inCombat");
	HX_MARK_MEMBER_NAME(combatHud,"combatHud");
	HX_MARK_MEMBER_NAME(npc,"npc");
	HX_MARK_MEMBER_NAME(npcType,"npcType");
	HX_MARK_MEMBER_NAME(meetStarter,"meetStarter");
	HX_MARK_MEMBER_NAME(shop,"shop");
	HX_MARK_MEMBER_NAME(monumentDoor,"monumentDoor");
	HX_MARK_MEMBER_NAME(streetDoor,"streetDoor");
	HX_MARK_MEMBER_NAME(minerGate,"minerGate");
	HX_MARK_MEMBER_NAME(minerGateX,"minerGateX");
	HX_MARK_MEMBER_NAME(streetOpen,"streetOpen");
	HX_MARK_MEMBER_NAME(streetYes,"streetYes");
	HX_MARK_MEMBER_NAME(box,"box");
	HX_MARK_MEMBER_NAME(roadStart,"roadStart");
	HX_MARK_MEMBER_NAME(roadEnd,"roadEnd");
	HX_MARK_MEMBER_NAME(boxPos,"boxPos");
	HX_MARK_MEMBER_NAME(stone,"stone");
	HX_MARK_MEMBER_NAME(stoneCounter,"stoneCounter");
	HX_MARK_MEMBER_NAME(stoneCounterText,"stoneCounterText");
	HX_MARK_MEMBER_NAME(stoneCounterIcon,"stoneCounterIcon");
	HX_MARK_MEMBER_NAME(stoneYes,"stoneYes");
	HX_MARK_MEMBER_NAME(minerTimerText,"minerTimerText");
	HX_MARK_MEMBER_NAME(minerTimerIcon,"minerTimerIcon");
	HX_MARK_MEMBER_NAME(timer,"timer");
	HX_MARK_MEMBER_NAME(minerTimeSet,"minerTimeSet");
	HX_MARK_MEMBER_NAME(stoneSound,"stoneSound");
	HX_MARK_MEMBER_NAME(finalScore,"finalScore");
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(through,"through");
	HX_MARK_MEMBER_NAME(walls,"walls");
	HX_MARK_MEMBER_NAME(road,"road");
	HX_MARK_MEMBER_NAME(ground,"ground");
	HX_MARK_MEMBER_NAME(torch,"torch");
	HX_MARK_MEMBER_NAME(ufo,"ufo");
	HX_MARK_MEMBER_NAME(save,"save");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MinerState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(tip,"tip");
	HX_VISIT_MEMBER_NAME(bag,"bag");
	HX_VISIT_MEMBER_NAME(cancel,"cancel");
	HX_VISIT_MEMBER_NAME(minerPunch,"minerPunch");
	HX_VISIT_MEMBER_NAME(gateSlide,"gateSlide");
	HX_VISIT_MEMBER_NAME(touchEnemy,"touchEnemy");
	HX_VISIT_MEMBER_NAME(openBag,"openBag");
	HX_VISIT_MEMBER_NAME(doorTele,"doorTele");
	HX_VISIT_MEMBER_NAME(saveNoise,"saveNoise");
	HX_VISIT_MEMBER_NAME(stoneGoal,"stoneGoal");
	HX_VISIT_MEMBER_NAME(dia,"dia");
	HX_VISIT_MEMBER_NAME(diaUpDown,"diaUpDown");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(txt,"txt");
	HX_VISIT_MEMBER_NAME(talkYes,"talkYes");
	HX_VISIT_MEMBER_NAME(enemy,"enemy");
	HX_VISIT_MEMBER_NAME(inCombat,"inCombat");
	HX_VISIT_MEMBER_NAME(combatHud,"combatHud");
	HX_VISIT_MEMBER_NAME(npc,"npc");
	HX_VISIT_MEMBER_NAME(npcType,"npcType");
	HX_VISIT_MEMBER_NAME(meetStarter,"meetStarter");
	HX_VISIT_MEMBER_NAME(shop,"shop");
	HX_VISIT_MEMBER_NAME(monumentDoor,"monumentDoor");
	HX_VISIT_MEMBER_NAME(streetDoor,"streetDoor");
	HX_VISIT_MEMBER_NAME(minerGate,"minerGate");
	HX_VISIT_MEMBER_NAME(minerGateX,"minerGateX");
	HX_VISIT_MEMBER_NAME(streetOpen,"streetOpen");
	HX_VISIT_MEMBER_NAME(streetYes,"streetYes");
	HX_VISIT_MEMBER_NAME(box,"box");
	HX_VISIT_MEMBER_NAME(roadStart,"roadStart");
	HX_VISIT_MEMBER_NAME(roadEnd,"roadEnd");
	HX_VISIT_MEMBER_NAME(boxPos,"boxPos");
	HX_VISIT_MEMBER_NAME(stone,"stone");
	HX_VISIT_MEMBER_NAME(stoneCounter,"stoneCounter");
	HX_VISIT_MEMBER_NAME(stoneCounterText,"stoneCounterText");
	HX_VISIT_MEMBER_NAME(stoneCounterIcon,"stoneCounterIcon");
	HX_VISIT_MEMBER_NAME(stoneYes,"stoneYes");
	HX_VISIT_MEMBER_NAME(minerTimerText,"minerTimerText");
	HX_VISIT_MEMBER_NAME(minerTimerIcon,"minerTimerIcon");
	HX_VISIT_MEMBER_NAME(timer,"timer");
	HX_VISIT_MEMBER_NAME(minerTimeSet,"minerTimeSet");
	HX_VISIT_MEMBER_NAME(stoneSound,"stoneSound");
	HX_VISIT_MEMBER_NAME(finalScore,"finalScore");
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(through,"through");
	HX_VISIT_MEMBER_NAME(walls,"walls");
	HX_VISIT_MEMBER_NAME(road,"road");
	HX_VISIT_MEMBER_NAME(ground,"ground");
	HX_VISIT_MEMBER_NAME(torch,"torch");
	HX_VISIT_MEMBER_NAME(ufo,"ufo");
	HX_VISIT_MEMBER_NAME(save,"save");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MinerState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"tip") ) { return ::hx::Val( tip ); }
		if (HX_FIELD_EQ(inName,"bag") ) { return ::hx::Val( bag ); }
		if (HX_FIELD_EQ(inName,"dia") ) { return ::hx::Val( dia ); }
		if (HX_FIELD_EQ(inName,"txt") ) { return ::hx::Val( txt ); }
		if (HX_FIELD_EQ(inName,"npc") ) { return ::hx::Val( npc ); }
		if (HX_FIELD_EQ(inName,"box") ) { return ::hx::Val( box ); }
		if (HX_FIELD_EQ(inName,"map") ) { return ::hx::Val( map ); }
		if (HX_FIELD_EQ(inName,"ufo") ) { return ::hx::Val( ufo ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"shop") ) { return ::hx::Val( shop ); }
		if (HX_FIELD_EQ(inName,"road") ) { return ::hx::Val( road ); }
		if (HX_FIELD_EQ(inName,"save") ) { return ::hx::Val( save ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"enemy") ) { return ::hx::Val( enemy ); }
		if (HX_FIELD_EQ(inName,"stone") ) { return ::hx::Val( stone ); }
		if (HX_FIELD_EQ(inName,"timer") ) { return ::hx::Val( timer ); }
		if (HX_FIELD_EQ(inName,"walls") ) { return ::hx::Val( walls ); }
		if (HX_FIELD_EQ(inName,"torch") ) { return ::hx::Val( torch ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return ::hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"cancel") ) { return ::hx::Val( cancel ); }
		if (HX_FIELD_EQ(inName,"boxPos") ) { return ::hx::Val( boxPos ); }
		if (HX_FIELD_EQ(inName,"ground") ) { return ::hx::Val( ground ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"openBag") ) { return ::hx::Val( openBag ); }
		if (HX_FIELD_EQ(inName,"talkYes") ) { return ::hx::Val( talkYes ); }
		if (HX_FIELD_EQ(inName,"npcType") ) { return ::hx::Val( npcType ); }
		if (HX_FIELD_EQ(inName,"roadEnd") ) { return ::hx::Val( roadEnd ); }
		if (HX_FIELD_EQ(inName,"through") ) { return ::hx::Val( through ); }
		if (HX_FIELD_EQ(inName,"npcTalk") ) { return ::hx::Val( npcTalk_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateC") ) { return ::hx::Val( updateC_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"doorTele") ) { return ::hx::Val( doorTele ); }
		if (HX_FIELD_EQ(inName,"inCombat") ) { return ::hx::Val( inCombat ); }
		if (HX_FIELD_EQ(inName,"stoneYes") ) { return ::hx::Val( stoneYes ); }
		if (HX_FIELD_EQ(inName,"saveFile") ) { return ::hx::Val( saveFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadFile") ) { return ::hx::Val( loadFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"shopOpen") ) { return ::hx::Val( shopOpen_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateF4") ) { return ::hx::Val( updateF4_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gateSlide") ) { return ::hx::Val( gateSlide ); }
		if (HX_FIELD_EQ(inName,"saveNoise") ) { return ::hx::Val( saveNoise ); }
		if (HX_FIELD_EQ(inName,"stoneGoal") ) { return ::hx::Val( stoneGoal ); }
		if (HX_FIELD_EQ(inName,"diaUpDown") ) { return ::hx::Val( diaUpDown ); }
		if (HX_FIELD_EQ(inName,"combatHud") ) { return ::hx::Val( combatHud ); }
		if (HX_FIELD_EQ(inName,"minerGate") ) { return ::hx::Val( minerGate ); }
		if (HX_FIELD_EQ(inName,"streetYes") ) { return ::hx::Val( streetYes ); }
		if (HX_FIELD_EQ(inName,"roadStart") ) { return ::hx::Val( roadStart ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"minerPunch") ) { return ::hx::Val( minerPunch ); }
		if (HX_FIELD_EQ(inName,"touchEnemy") ) { return ::hx::Val( touchEnemy ); }
		if (HX_FIELD_EQ(inName,"streetDoor") ) { return ::hx::Val( streetDoor ); }
		if (HX_FIELD_EQ(inName,"minerGateX") ) { return ::hx::Val( minerGateX ); }
		if (HX_FIELD_EQ(inName,"streetOpen") ) { return ::hx::Val( streetOpen ); }
		if (HX_FIELD_EQ(inName,"stoneSound") ) { return ::hx::Val( stoneSound ); }
		if (HX_FIELD_EQ(inName,"finalScore") ) { return ::hx::Val( finalScore ); }
		if (HX_FIELD_EQ(inName,"goToStreet") ) { return ::hx::Val( goToStreet_dyn() ); }
		if (HX_FIELD_EQ(inName,"timeToStop") ) { return ::hx::Val( timeToStop_dyn() ); }
		if (HX_FIELD_EQ(inName,"touchMiner") ) { return ::hx::Val( touchMiner_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"meetStarter") ) { return ::hx::Val( meetStarter ); }
		if (HX_FIELD_EQ(inName,"updateTimer") ) { return ::hx::Val( updateTimer_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"monumentDoor") ) { return ::hx::Val( monumentDoor ); }
		if (HX_FIELD_EQ(inName,"stoneCounter") ) { return ::hx::Val( stoneCounter ); }
		if (HX_FIELD_EQ(inName,"minerTimeSet") ) { return ::hx::Val( minerTimeSet ); }
		if (HX_FIELD_EQ(inName,"goToMonument") ) { return ::hx::Val( goToMonument_dyn() ); }
		if (HX_FIELD_EQ(inName,"playerUpDown") ) { return ::hx::Val( playerUpDown_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"placeEntities") ) { return ::hx::Val( placeEntities_dyn() ); }
		if (HX_FIELD_EQ(inName,"enemyGotStone") ) { return ::hx::Val( enemyGotStone_dyn() ); }
		if (HX_FIELD_EQ(inName,"minerGameOver") ) { return ::hx::Val( minerGameOver_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTalking") ) { return ::hx::Val( updateTalking_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"minerTimerText") ) { return ::hx::Val( minerTimerText ); }
		if (HX_FIELD_EQ(inName,"minerTimerIcon") ) { return ::hx::Val( minerTimerIcon ); }
		if (HX_FIELD_EQ(inName,"playerGotStone") ) { return ::hx::Val( playerGotStone_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateInCombat") ) { return ::hx::Val( updateInCombat_dyn() ); }
		if (HX_FIELD_EQ(inName,"stoneInsideBox") ) { return ::hx::Val( stoneInsideBox_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"stoneCounterText") ) { return ::hx::Val( stoneCounterText ); }
		if (HX_FIELD_EQ(inName,"stoneCounterIcon") ) { return ::hx::Val( stoneCounterIcon ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"updateWhenDiaInvisible") ) { return ::hx::Val( updateWhenDiaInvisible_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MinerState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"tip") ) { tip=inValue.Cast<  ::Tip >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bag") ) { bag=inValue.Cast<  ::Bag >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dia") ) { dia=inValue.Cast<  ::Dia >(); return inValue; }
		if (HX_FIELD_EQ(inName,"txt") ) { txt=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"npc") ) { npc=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"box") ) { box=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"map") ) { map=inValue.Cast<  ::flixel::addons::editors::ogmo::FlxOgmo3Loader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ufo") ) { ufo=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shop") ) { shop=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"road") ) { road=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"save") ) { save=inValue.Cast<  ::flixel::util::FlxSave >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"enemy") ) { enemy=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stone") ) { stone=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"timer") ) { timer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"walls") ) { walls=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"torch") ) { torch=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cancel") ) { cancel=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"boxPos") ) { boxPos=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ground") ) { ground=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"openBag") ) { openBag=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"talkYes") ) { talkYes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"npcType") ) { npcType=inValue.Cast<  ::NpcType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"roadEnd") ) { roadEnd=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"through") ) { through=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"doorTele") ) { doorTele=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inCombat") ) { inCombat=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stoneYes") ) { stoneYes=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"gateSlide") ) { gateSlide=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"saveNoise") ) { saveNoise=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stoneGoal") ) { stoneGoal=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diaUpDown") ) { diaUpDown=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combatHud") ) { combatHud=inValue.Cast<  ::CombatHUD >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minerGate") ) { minerGate=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"streetYes") ) { streetYes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"roadStart") ) { roadStart=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"minerPunch") ) { minerPunch=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"touchEnemy") ) { touchEnemy=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"streetDoor") ) { streetDoor=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minerGateX") ) { minerGateX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"streetOpen") ) { streetOpen=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stoneSound") ) { stoneSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"finalScore") ) { finalScore=inValue.Cast< int >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"meetStarter") ) { meetStarter=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"monumentDoor") ) { monumentDoor=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stoneCounter") ) { stoneCounter=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minerTimeSet") ) { minerTimeSet=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"minerTimerText") ) { minerTimerText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minerTimerIcon") ) { minerTimerIcon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"stoneCounterText") ) { stoneCounterText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stoneCounterIcon") ) { stoneCounterIcon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MinerState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("player",61,eb,b8,37));
	outFields->push(HX_("tip",5b,61,58,00));
	outFields->push(HX_("bag",c8,b1,4a,00));
	outFields->push(HX_("cancel",7a,ed,33,b8));
	outFields->push(HX_("minerPunch",af,4e,c5,52));
	outFields->push(HX_("gateSlide",26,f3,f8,d6));
	outFields->push(HX_("touchEnemy",09,f6,0b,6a));
	outFields->push(HX_("openBag",1e,60,27,40));
	outFields->push(HX_("doorTele",b8,2e,a1,9c));
	outFields->push(HX_("saveNoise",1d,97,6f,2e));
	outFields->push(HX_("stoneGoal",18,5c,19,07));
	outFields->push(HX_("dia",3c,3d,4c,00));
	outFields->push(HX_("diaUpDown",b9,9a,1d,44));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("txt",70,6e,58,00));
	outFields->push(HX_("talkYes",5b,2b,9c,16));
	outFields->push(HX_("enemy",48,12,7b,70));
	outFields->push(HX_("inCombat",f9,59,a4,4f));
	outFields->push(HX_("combatHud",e3,10,9a,6a));
	outFields->push(HX_("npc",e1,d9,53,00));
	outFields->push(HX_("npcType",3b,fd,be,de));
	outFields->push(HX_("meetStarter",48,6a,9b,e2));
	outFields->push(HX_("shop",f6,d4,52,4c));
	outFields->push(HX_("monumentDoor",55,37,bd,9c));
	outFields->push(HX_("streetDoor",11,f3,13,31));
	outFields->push(HX_("minerGate",2a,44,a5,59));
	outFields->push(HX_("minerGateX",ee,60,f6,16));
	outFields->push(HX_("streetOpen",6d,05,5a,38));
	outFields->push(HX_("streetYes",e4,6c,51,08));
	outFields->push(HX_("box",0b,be,4a,00));
	outFields->push(HX_("roadStart",62,36,eb,90));
	outFields->push(HX_("roadEnd",db,45,58,02));
	outFields->push(HX_("boxPos",49,70,02,68));
	outFields->push(HX_("stone",65,10,16,84));
	outFields->push(HX_("stoneCounter",17,cd,5d,6d));
	outFields->push(HX_("stoneCounterText",64,9d,d2,7a));
	outFields->push(HX_("stoneCounterIcon",30,b8,8b,73));
	outFields->push(HX_("stoneYes",c2,5d,1a,84));
	outFields->push(HX_("minerTimerText",93,24,02,d8));
	outFields->push(HX_("minerTimerIcon",5f,3f,bb,d0));
	outFields->push(HX_("timer",c5,bf,35,10));
	outFields->push(HX_("minerTimeSet",d6,60,a3,d1));
	outFields->push(HX_("stoneSound",2a,5e,f5,17));
	outFields->push(HX_("finalScore",fc,b7,90,b2));
	outFields->push(HX_("map",9c,0a,53,00));
	outFields->push(HX_("through",45,48,3d,5a));
	outFields->push(HX_("walls",29,0c,1f,c5));
	outFields->push(HX_("road",e0,e1,ae,4b));
	outFields->push(HX_("ground",87,22,28,1c));
	outFields->push(HX_("torch",fc,d0,30,14));
	outFields->push(HX_("ufo",fe,20,59,00));
	outFields->push(HX_("save",3d,8b,4d,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MinerState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Player */ ,(int)offsetof(MinerState_obj,player),HX_("player",61,eb,b8,37)},
	{::hx::fsObject /*  ::Tip */ ,(int)offsetof(MinerState_obj,tip),HX_("tip",5b,61,58,00)},
	{::hx::fsObject /*  ::Bag */ ,(int)offsetof(MinerState_obj,bag),HX_("bag",c8,b1,4a,00)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(MinerState_obj,cancel),HX_("cancel",7a,ed,33,b8)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(MinerState_obj,minerPunch),HX_("minerPunch",af,4e,c5,52)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(MinerState_obj,gateSlide),HX_("gateSlide",26,f3,f8,d6)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(MinerState_obj,touchEnemy),HX_("touchEnemy",09,f6,0b,6a)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(MinerState_obj,openBag),HX_("openBag",1e,60,27,40)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(MinerState_obj,doorTele),HX_("doorTele",b8,2e,a1,9c)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(MinerState_obj,saveNoise),HX_("saveNoise",1d,97,6f,2e)},
	{::hx::fsInt,(int)offsetof(MinerState_obj,stoneGoal),HX_("stoneGoal",18,5c,19,07)},
	{::hx::fsObject /*  ::Dia */ ,(int)offsetof(MinerState_obj,dia),HX_("dia",3c,3d,4c,00)},
	{::hx::fsString,(int)offsetof(MinerState_obj,diaUpDown),HX_("diaUpDown",b9,9a,1d,44)},
	{::hx::fsString,(int)offsetof(MinerState_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsBool,(int)offsetof(MinerState_obj,txt),HX_("txt",70,6e,58,00)},
	{::hx::fsBool,(int)offsetof(MinerState_obj,talkYes),HX_("talkYes",5b,2b,9c,16)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MinerState_obj,enemy),HX_("enemy",48,12,7b,70)},
	{::hx::fsBool,(int)offsetof(MinerState_obj,inCombat),HX_("inCombat",f9,59,a4,4f)},
	{::hx::fsObject /*  ::CombatHUD */ ,(int)offsetof(MinerState_obj,combatHud),HX_("combatHud",e3,10,9a,6a)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MinerState_obj,npc),HX_("npc",e1,d9,53,00)},
	{::hx::fsObject /*  ::NpcType */ ,(int)offsetof(MinerState_obj,npcType),HX_("npcType",3b,fd,be,de)},
	{::hx::fsBool,(int)offsetof(MinerState_obj,meetStarter),HX_("meetStarter",48,6a,9b,e2)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MinerState_obj,shop),HX_("shop",f6,d4,52,4c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MinerState_obj,monumentDoor),HX_("monumentDoor",55,37,bd,9c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MinerState_obj,streetDoor),HX_("streetDoor",11,f3,13,31)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MinerState_obj,minerGate),HX_("minerGate",2a,44,a5,59)},
	{::hx::fsFloat,(int)offsetof(MinerState_obj,minerGateX),HX_("minerGateX",ee,60,f6,16)},
	{::hx::fsBool,(int)offsetof(MinerState_obj,streetOpen),HX_("streetOpen",6d,05,5a,38)},
	{::hx::fsBool,(int)offsetof(MinerState_obj,streetYes),HX_("streetYes",e4,6c,51,08)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MinerState_obj,box),HX_("box",0b,be,4a,00)},
	{::hx::fsInt,(int)offsetof(MinerState_obj,roadStart),HX_("roadStart",62,36,eb,90)},
	{::hx::fsInt,(int)offsetof(MinerState_obj,roadEnd),HX_("roadEnd",db,45,58,02)},
	{::hx::fsFloat,(int)offsetof(MinerState_obj,boxPos),HX_("boxPos",49,70,02,68)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MinerState_obj,stone),HX_("stone",65,10,16,84)},
	{::hx::fsInt,(int)offsetof(MinerState_obj,stoneCounter),HX_("stoneCounter",17,cd,5d,6d)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MinerState_obj,stoneCounterText),HX_("stoneCounterText",64,9d,d2,7a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MinerState_obj,stoneCounterIcon),HX_("stoneCounterIcon",30,b8,8b,73)},
	{::hx::fsBool,(int)offsetof(MinerState_obj,stoneYes),HX_("stoneYes",c2,5d,1a,84)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MinerState_obj,minerTimerText),HX_("minerTimerText",93,24,02,d8)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MinerState_obj,minerTimerIcon),HX_("minerTimerIcon",5f,3f,bb,d0)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(MinerState_obj,timer),HX_("timer",c5,bf,35,10)},
	{::hx::fsInt,(int)offsetof(MinerState_obj,minerTimeSet),HX_("minerTimeSet",d6,60,a3,d1)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(MinerState_obj,stoneSound),HX_("stoneSound",2a,5e,f5,17)},
	{::hx::fsInt,(int)offsetof(MinerState_obj,finalScore),HX_("finalScore",fc,b7,90,b2)},
	{::hx::fsObject /*  ::flixel::addons::editors::ogmo::FlxOgmo3Loader */ ,(int)offsetof(MinerState_obj,map),HX_("map",9c,0a,53,00)},
	{::hx::fsObject /*  ::flixel::tile::FlxTilemap */ ,(int)offsetof(MinerState_obj,through),HX_("through",45,48,3d,5a)},
	{::hx::fsObject /*  ::flixel::tile::FlxTilemap */ ,(int)offsetof(MinerState_obj,walls),HX_("walls",29,0c,1f,c5)},
	{::hx::fsObject /*  ::flixel::tile::FlxTilemap */ ,(int)offsetof(MinerState_obj,road),HX_("road",e0,e1,ae,4b)},
	{::hx::fsObject /*  ::flixel::tile::FlxTilemap */ ,(int)offsetof(MinerState_obj,ground),HX_("ground",87,22,28,1c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(MinerState_obj,torch),HX_("torch",fc,d0,30,14)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MinerState_obj,ufo),HX_("ufo",fe,20,59,00)},
	{::hx::fsObject /*  ::flixel::util::FlxSave */ ,(int)offsetof(MinerState_obj,save),HX_("save",3d,8b,4d,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MinerState_obj_sStaticStorageInfo = 0;
#endif

static ::String MinerState_obj_sMemberFields[] = {
	HX_("player",61,eb,b8,37),
	HX_("tip",5b,61,58,00),
	HX_("bag",c8,b1,4a,00),
	HX_("cancel",7a,ed,33,b8),
	HX_("minerPunch",af,4e,c5,52),
	HX_("gateSlide",26,f3,f8,d6),
	HX_("touchEnemy",09,f6,0b,6a),
	HX_("openBag",1e,60,27,40),
	HX_("doorTele",b8,2e,a1,9c),
	HX_("saveNoise",1d,97,6f,2e),
	HX_("stoneGoal",18,5c,19,07),
	HX_("dia",3c,3d,4c,00),
	HX_("diaUpDown",b9,9a,1d,44),
	HX_("name",4b,72,ff,48),
	HX_("txt",70,6e,58,00),
	HX_("talkYes",5b,2b,9c,16),
	HX_("enemy",48,12,7b,70),
	HX_("inCombat",f9,59,a4,4f),
	HX_("combatHud",e3,10,9a,6a),
	HX_("npc",e1,d9,53,00),
	HX_("npcType",3b,fd,be,de),
	HX_("meetStarter",48,6a,9b,e2),
	HX_("shop",f6,d4,52,4c),
	HX_("monumentDoor",55,37,bd,9c),
	HX_("streetDoor",11,f3,13,31),
	HX_("minerGate",2a,44,a5,59),
	HX_("minerGateX",ee,60,f6,16),
	HX_("streetOpen",6d,05,5a,38),
	HX_("streetYes",e4,6c,51,08),
	HX_("box",0b,be,4a,00),
	HX_("roadStart",62,36,eb,90),
	HX_("roadEnd",db,45,58,02),
	HX_("boxPos",49,70,02,68),
	HX_("stone",65,10,16,84),
	HX_("stoneCounter",17,cd,5d,6d),
	HX_("stoneCounterText",64,9d,d2,7a),
	HX_("stoneCounterIcon",30,b8,8b,73),
	HX_("stoneYes",c2,5d,1a,84),
	HX_("minerTimerText",93,24,02,d8),
	HX_("minerTimerIcon",5f,3f,bb,d0),
	HX_("timer",c5,bf,35,10),
	HX_("minerTimeSet",d6,60,a3,d1),
	HX_("stoneSound",2a,5e,f5,17),
	HX_("finalScore",fc,b7,90,b2),
	HX_("map",9c,0a,53,00),
	HX_("through",45,48,3d,5a),
	HX_("walls",29,0c,1f,c5),
	HX_("road",e0,e1,ae,4b),
	HX_("ground",87,22,28,1c),
	HX_("torch",fc,d0,30,14),
	HX_("ufo",fe,20,59,00),
	HX_("save",3d,8b,4d,4c),
	HX_("create",fc,66,0f,7c),
	HX_("placeEntities",28,e6,91,17),
	HX_("saveFile",59,68,75,f7),
	HX_("loadFile",c2,9f,5b,b4),
	HX_("update",09,86,05,87),
	HX_("npcTalk",ad,c3,ac,de),
	HX_("goToMonument",2a,1f,09,c1),
	HX_("goToStreet",26,3e,c0,e6),
	HX_("timeToStop",0a,a3,de,1f),
	HX_("playerGotStone",fa,33,0a,96),
	HX_("enemyGotStone",e1,19,38,8e),
	HX_("touchMiner",40,56,f9,01),
	HX_("updateInCombat",22,4d,ce,84),
	HX_("stoneInsideBox",4a,76,31,09),
	HX_("updateTimer",fc,28,ce,f5),
	HX_("minerGameOver",05,d8,7d,66),
	HX_("shopOpen",e0,b7,6c,a9),
	HX_("updateTalking",2d,bc,16,e2),
	HX_("updateWhenDiaInvisible",54,94,25,66),
	HX_("playerUpDown",9e,f2,da,6d),
	HX_("updateF4",77,17,fa,77),
	HX_("updateC",1a,c2,cf,9d),
	::String(null()) };

::hx::Class MinerState_obj::__mClass;

void MinerState_obj::__register()
{
	MinerState_obj _hx_dummy;
	MinerState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MinerState",32,0b,f7,02);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MinerState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MinerState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MinerState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MinerState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

