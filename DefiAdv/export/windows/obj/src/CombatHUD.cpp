// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_Choice
#include <Choice.h>
#endif
#ifndef INCLUDED_CombatHUD
#include <CombatHUD.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_EnemyType
#include <EnemyType.h>
#endif
#ifndef INCLUDED_GameOverState
#include <GameOverState.h>
#endif
#ifndef INCLUDED_Outcome
#include <Outcome.h>
#endif
#ifndef INCLUDED_Pointer
#include <Pointer.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Text
#include <Text.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTypeText
#include <flixel/addons/text/FlxTypeText.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxEase
#include <flixel/tweens/FlxEase.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_NumTween
#include <flixel/tweens/misc/NumTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_BalancedTree
#include <haxe/ds/BalancedTree.h>
#endif
#ifndef INCLUDED_haxe_ds_EnumValueMap
#include <haxe/ds/EnumValueMap.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_94bd977f46f9a023_181_new,"CombatHUD","new",0x0b459335,"CombatHUD.new","CombatHUD.hx",181,0x215789db)
HX_DEFINE_STACK_FRAME(_hx_pos_94bd977f46f9a023_32_new,"CombatHUD","new",0x0b459335,"CombatHUD.new","CombatHUD.hx",32,0x215789db)
static const ::String _hx_array_data_0c6cd4c3_2[] = {
	HX_("YES",07,c5,43,00),HX_("NO",41,44,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_94bd977f46f9a023_200_initCombat,"CombatHUD","initCombat",0x420edd2f,"CombatHUD.initCombat","CombatHUD.hx",200,0x215789db)
HX_LOCAL_STACK_FRAME(_hx_pos_94bd977f46f9a023_304_finishFadeIn,"CombatHUD","finishFadeIn",0xdde03bbf,"CombatHUD.finishFadeIn","CombatHUD.hx",304,0x215789db)
HX_LOCAL_STACK_FRAME(_hx_pos_94bd977f46f9a023_310_updateKeyboardInput,"CombatHUD","updateKeyboardInput",0x9c6baeef,"CombatHUD.updateKeyboardInput","CombatHUD.hx",310,0x215789db)
static const int _hx_array_data_0c6cd4c3_14[] = {
	(int)32,(int)90,(int)13,
};
static const int _hx_array_data_0c6cd4c3_15[] = {
	(int)65,(int)37,
};
static const int _hx_array_data_0c6cd4c3_16[] = {
	(int)68,(int)39,
};
HX_LOCAL_STACK_FRAME(_hx_pos_94bd977f46f9a023_728_lrPointer,"CombatHUD","lrPointer",0xc7cd176c,"CombatHUD.lrPointer","CombatHUD.hx",728,0x215789db)
HX_LOCAL_STACK_FRAME(_hx_pos_94bd977f46f9a023_739_updateAlpha,"CombatHUD","updateAlpha",0x5f8f306a,"CombatHUD.updateAlpha","CombatHUD.hx",739,0x215789db)
HX_LOCAL_STACK_FRAME(_hx_pos_94bd977f46f9a023_737_updateAlpha,"CombatHUD","updateAlpha",0x5f8f306a,"CombatHUD.updateAlpha","CombatHUD.hx",737,0x215789db)
HX_LOCAL_STACK_FRAME(_hx_pos_94bd977f46f9a023_747_finishFadeOut,"CombatHUD","finishFadeOut",0x46589f74,"CombatHUD.finishFadeOut","CombatHUD.hx",747,0x215789db)
HX_LOCAL_STACK_FRAME(_hx_pos_94bd977f46f9a023_744_finishFadeOut,"CombatHUD","finishFadeOut",0x46589f74,"CombatHUD.finishFadeOut","CombatHUD.hx",744,0x215789db)
HX_LOCAL_STACK_FRAME(_hx_pos_94bd977f46f9a023_755_update,"CombatHUD","update",0xf0e37654,"CombatHUD.update","CombatHUD.hx",755,0x215789db)
HX_LOCAL_STACK_FRAME(_hx_pos_94bd977f46f9a023_763_doneResultsIn,"CombatHUD","doneResultsIn",0x5b1790ae,"CombatHUD.doneResultsIn","CombatHUD.hx",763,0x215789db)
HX_LOCAL_STACK_FRAME(_hx_pos_94bd977f46f9a023_767_doneResultsIn,"CombatHUD","doneResultsIn",0x5b1790ae,"CombatHUD.doneResultsIn","CombatHUD.hx",767,0x215789db)

void CombatHUD_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite sprite){
            			HX_GC_STACKFRAME(&_hx_pos_94bd977f46f9a023_181_new)
HXLINE( 182)			sprite->scrollFactor->set(null(),null());
HXLINE( 183)			sprite->set_alpha(( (Float)(0) ));
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_94bd977f46f9a023_32_new)
HXLINE( 100)		this->wait = true;
HXLINE(  99)		this->alpha = ((Float)0);
HXLINE(  97)		this->diamond = ((Float)0);
HXLINE(  88)		this->investNum = 5;
HXLINE(  85)		this->starterInStreet = false;
HXLINE(  84)		this->buyStarter = false;
HXLINE(  82)		this->starterTalk = false;
HXLINE(  81)		this->dexStarterPirze = 4;
HXLINE(  80)		this->starterPrize = 5;
HXLINE(  71)		this->rodNum = 2;
HXLINE(  69)		this->rodTalk = false;
HXLINE(  66)		this->nftStyleNum = 0;
HXLINE(  60)		this->textIn = false;
HXLINE(  59)		this->txt = true;
HXLINE(  53)		this->state = 1;
HXLINE(  46)		this->ynCho = ::Array_obj< ::String >::fromData( _hx_array_data_0c6cd4c3_2,2);
HXLINE( 104)		super::__construct(null());
HXLINE( 107)		this->background =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/combatBackground.png",a8,a6,48,8b));
HXLINE( 108)		this->add(this->background);
HXLINE( 111)		this->enemySprite =  ::Enemy_obj::__alloc( HX_CTX ,( (Float)(0) ),( (Float)(300) ),::EnemyType_obj::shibaCoin_dyn());
HXLINE( 112)		this->enemySprite->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE( 113)		this->enemySprite->animation->set_frameIndex(0);
HXLINE( 114)		this->enemySprite->set_active(false);
HXLINE( 115)		this->add(this->enemySprite);
HXLINE( 118)		this->combatText =  ::Text_obj::__alloc( HX_CTX ,( (Float)(330) ),( (Float)(660) ),810,HX_("text",ad,cc,f9,4c),72,true);
HXLINE( 119)		this->add(this->combatText);
HXLINE( 122)		this->choices =  ::haxe::ds::EnumValueMap_obj::__alloc( HX_CTX );
HXLINE( 123)		{
HXLINE( 123)			::Dynamic this1 = this->choices;
HXDLIN( 123)			 ::flixel::text::FlxText v =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1275,675,510,HX_("APE IN",4f,1d,f5,3a),108,null());
HXDLIN( 123)			( ( ::haxe::ds::EnumValueMap)(this1) )->set(::Choice_obj::_hx_YES_dyn(),v);
            		}
HXLINE( 124)		{
HXLINE( 124)			::Dynamic this2 = this->choices;
HXDLIN( 124)			Float v1 = this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->x;
HXDLIN( 124)			Float v2 = this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->y;
HXDLIN( 124)			 ::flixel::text::FlxText v3 =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,v1,((v2 + this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->get_height()) + 48),510,HX_("QUIT",cf,07,cb,35),108,null());
HXDLIN( 124)			( ( ::haxe::ds::EnumValueMap)(this2) )->set(::Choice_obj::_hx_NO_dyn(),v3);
            		}
HXLINE( 125)		this->add(this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >());
HXLINE( 126)		this->add(this->choices->get(::Choice_obj::_hx_NO_dyn()).StaticCast<  ::flixel::text::FlxText >());
HXLINE( 129)		Float _hx_tmp = this->combatText->x;
HXDLIN( 129)		Float _hx_tmp1 = ((_hx_tmp + (this->combatText->get_width() / ( (Float)(2) ))) - ( (Float)(30) ));
HXDLIN( 129)		this->enterCur =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp1,(this->combatText->y + 230),HX_("assets/images/pointer.png",ad,e2,d4,86));
HXLINE( 130)		this->enterCur->set_angle(( (Float)(90) ));
HXLINE( 131)		this->add(this->enterCur);
HXLINE( 132)		this->enterCur->set_visible(false);
HXLINE( 135)		Float _hx_tmp2 = this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->x;
HXDLIN( 135)		this->investNumText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp2,this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->y,510,HX_("5",35,00,00,00),132,null());
HXLINE( 136)		this->add(this->investNumText);
HXLINE( 137)		this->investNumText->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 138)		this->investNumText->set_visible(false);
HXLINE( 141)		Float _hx_tmp3 = this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->x;
HXDLIN( 141)		this->rodNumText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp3,this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->y,510,HX_("2",32,00,00,00),132,null());
HXLINE( 142)		this->add(this->rodNumText);
HXLINE( 143)		this->rodNumText->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 144)		this->rodNumText->set_color(-256);
HXLINE( 145)		this->rodNumText->set_visible(false);
HXLINE( 148)		Float _hx_tmp4 = this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->x;
HXDLIN( 148)		Float _hx_tmp5 = (_hx_tmp4 + (this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->get_width() / ( (Float)(2) )));
HXDLIN( 148)		this->nftStyle =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp5,this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->y,null())->loadGraphic(HX_("assets/images/nft.png",2c,20,c6,81),true,168,192,null(),null());
HXLINE( 149)		this->nftStyle->animation->set_frameIndex(0);
HXLINE( 150)		this->add(this->nftStyle);
HXLINE( 151)		this->nftStyle->set_visible(false);
HXLINE( 154)		this->enemyNameText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,210,60,0,HX_("enemyName",b3,74,1e,a9),108,null());
HXLINE( 155)		this->enemyNameText->set_font(HX_("assets/data/silver.ttf",3e,fd,5b,64));
HXLINE( 156)		this->add(this->enemyNameText);
HXLINE( 159)		this->diamondText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,1650,60,0,HX_("0",30,00,00,00),60,null());
HXLINE( 160)		this->add(this->diamondText);
HXLINE( 163)		this->pointer =  ::Pointer_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 164)		 ::Pointer _hx_tmp6 = this->pointer;
HXDLIN( 164)		Float _hx_tmp7 = (this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->x - ( (Float)(48) ));
HXDLIN( 164)		Float _hx_tmp8 = this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->y;
HXDLIN( 164)		Float _hx_tmp9 = ((_hx_tmp8 + (this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->get_height() / ( (Float)(2) ))) - ( (Float)(48) ));
HXDLIN( 164)		int _hx_tmp10 = ::Std_obj::_hx_int((this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->get_height() + 48));
HXDLIN( 164)		_hx_tmp6->setPointer(_hx_tmp7,_hx_tmp9,_hx_tmp10,this->ynCho,HX_("ud",4f,66,00,00));
HXLINE( 165)		this->pointer->set_visible(false);
HXLINE( 166)		this->add(this->pointer);
HXLINE( 169)		this->check = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/check.ogg",5d,94,6a,8d),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 170)		this->next = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/next.ogg",20,1f,40,58),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 173)		this->pointerLeft =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/pointer.png",ad,e2,d4,86));
HXLINE( 174)		this->pointerLeft->set_flipX(true);
HXLINE( 175)		this->add(this->pointerLeft);
HXLINE( 177)		this->pointerRight =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/pointer.png",ad,e2,d4,86));
HXLINE( 178)		this->add(this->pointerRight);
HXLINE( 180)		this->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE( 186)		this->set_active(false);
HXLINE( 187)		this->set_visible(false);
            	}

Dynamic CombatHUD_obj::__CreateEmpty() { return new CombatHUD_obj; }

void *CombatHUD_obj::_hx_vtable = 0;

Dynamic CombatHUD_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CombatHUD_obj > _hx_result = new CombatHUD_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CombatHUD_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7ccf8994) {
		if (inClassId<=(int)0x62817b24) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x62817b24;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	} else {
		return inClassId==(int)0x7e771c1f;
	}
}

void CombatHUD_obj::initCombat(Float diamond, ::flixel::text::FlxText diamondUiText,Float bananaCoin,Float appleCoin,Float dexCoin, ::Enemy enemy){
            	HX_STACKFRAME(&_hx_pos_94bd977f46f9a023_200_initCombat)
HXLINE( 201)		this->enemy = enemy;
HXLINE( 202)		this->diamond = diamond;
HXLINE( 203)		this->diamondUiText = diamondUiText;
HXLINE( 204)		this->bananaCoin = bananaCoin;
HXLINE( 205)		this->appleCoin = appleCoin;
HXLINE( 206)		this->dexCoin = dexCoin;
HXLINE( 207)		 ::flixel::text::FlxText _hx_tmp = this->diamondText;
HXDLIN( 207)		_hx_tmp->set_text(::Std_obj::string(diamond));
HXLINE( 209)		this->enemySprite->changeType(enemy->type);
HXLINE( 212)		this->wait = true;
HXLINE( 213)		 ::Pointer _hx_tmp1 = this->pointer;
HXDLIN( 213)		Float _hx_tmp2 = (this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->x - ( (Float)(48) ));
HXDLIN( 213)		Float _hx_tmp3 = this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->y;
HXDLIN( 213)		_hx_tmp1->setPosition(_hx_tmp2,((_hx_tmp3 + (this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->get_height() / ( (Float)(2) ))) - ( (Float)(48) )));
HXLINE( 214)		this->pointer->set_visible(false);
HXLINE( 216)		this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(true);
HXLINE( 217)		this->choices->get(::Choice_obj::_hx_NO_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(true);
HXLINE( 219)		this->investNum = 5;
HXLINE( 220)		 ::flixel::text::FlxText _hx_tmp4 = this->investNumText;
HXDLIN( 220)		_hx_tmp4->set_text(::Std_obj::string(this->investNum));
HXLINE( 222)		this->pointerLeft->set_visible(false);
HXLINE( 223)		this->pointerRight->set_visible(false);
HXLINE( 225)		switch((int)(enemy->type->_hx_getIndex())){
            			case (int)0: {
HXLINE( 228)				this->enemyNameText->set_text(HX_W(u"\u72d7\u72d7\u5e63",5c0f,b703));
HXLINE( 229)				this->name = HX_W(u":\u563f\uff0c\u7329\u7329\uff01\u8981\u4e0d\u8981\u8cb7\u9ede\u53ef\u611b\u7684\u72d7\u72d7\u5e63\u554a\uff1f:\u8ab0\u4e0d\u559c\u6b61\u53c8\u53ef\u611b\u53c8\u80fd\u8cfa\u9322\u7684\u72d7\u72d7\u5e63\u5462\uff1f",dce3,785f);
HXLINE( 230)				this->txt = false;
            			}
            			break;
            			case (int)1: {
HXLINE( 232)				this->enemyNameText->set_text(HX_W(u"\u96f2\u6316\u7926",4a19,7f34));
HXLINE( 233)				this->name = HX_W(u":\u54c8\u56c9~\u7329\u7329\uff0c\u53ea\u8981\u4f60\u4ed8\u7d66\u6211 5 \u80fd\u91cf\u5e63\uff0c:\u5c31\u53ef\u4ee5\u79df\u5230\u4e00\u53f0\u9ad8\u6548\u7387\u6a5f\u5668\u5e6b\u4f60\u6316\u7926\u8cfa\u5927\u9322\u5594\uff01\u5feb\u4f86\u52a0\u5165\u6211\u5427\uff01",bd6a,5382);
HXLINE( 234)				this->txt = false;
            			}
            			break;
            			case (int)2: {
HXLINE( 236)				this->enemyNameText->set_text(HX_("NFT",1c,6d,3b,00));
HXLINE( 237)				this->name = HX_W(u":\u8981\u8cb7\u4e00\u5f35 NFT \u55ce\uff1f:\u9019\u4e9b\u7368\u4e00\u7121\u4e8c\u7684\u85dd\u8853\u54c1\u53ef\u4ee5\u7559\u8457\u73cd\u85cf\u6216\u662f\u8ce3\u9322\uff0c\u5176\u4e2d\uff0c\u7206\u7d05\u7684\u6b3e\u5f0f\u9084\u80fd\u8ce3\u51fa\u5929\u50f9\u5594\uff01",3878,71f3);
HXLINE( 238)				this->txt = false;
            			}
            			break;
            			case (int)3: {
            			}
            			break;
            			case (int)4: {
HXLINE( 240)				this->enemyNameText->set_text(HX_W(u"\u69d3\u687f",4e32,7fd9));
HXLINE( 241)				if (this->rodTalk) {
HXLINE( 243)					this->name = HX_W(u":\u4f60\u8981\u958b\u69d3\u687f\u7528\u9999\u8549\u5e63\u8cb7APS\u5e63\u55ce\uff1f",5a20,d395);
HXLINE( 244)					this->txt = false;
            				}
            				else {
HXLINE( 248)					this->name = HX_("assets/data/rodTalk.txt",fc,0a,76,21);
HXLINE( 249)					this->txt = true;
            				}
            			}
            			break;
            			case (int)5: {
HXLINE( 252)				this->enemyNameText->set_text(HX_("APESTARTER",79,ff,e0,dd));
HXLINE( 254)				if (!(this->starterInStreet)) {
HXLINE( 256)					this->name = HX_("assets/data/starterTalk.txt",c4,39,1d,13);
HXLINE( 257)					this->txt = true;
            				}
            				else {
HXLINE( 261)					if (this->buyStarter) {
HXLINE( 263)						if (this->starterTalk) {
HXLINE( 265)							this->name = HX_W(u":\u73fe\u5728\u53ef\u4ee5\u75281\u80fd\u91cf\u5e63\u8cb7\u903210\u9752\u86d9\u5e63\uff0c\u8acb\u554f\u4f60\u8981\u6295\u8cc7\u9752\u86d9\u5e63\u55ce\uff1f",1f8e,f4a6);
HXLINE( 266)							this->txt = false;
            						}
            						else {
HXLINE( 270)							this->name = HX_("assets/data/starterStreetYes.txt",90,f2,71,f7);
HXLINE( 271)							this->txt = true;
HXLINE( 272)							this->starterTalk = true;
            						}
HXLINE( 275)						this->dexStarterPirze = 10;
            					}
            					else {
HXLINE( 279)						if (this->starterTalk) {
HXLINE( 281)							this->name = HX_W(u":\u73fe\u5728\u53ef\u4ee5\u75281\u80fd\u91cf\u5e63\u8cb7\u90324\u9752\u86d9\u5e63\uff0c\u8acb\u554f\u4f60\u8981\u6295\u8cc7\u9752\u86d9\u5e63\u55ce\uff1f",5d8d,b058);
HXLINE( 282)							this->txt = false;
HXLINE( 283)							this->starterTalk = true;
            						}
            						else {
HXLINE( 287)							this->name = HX_("assets/data/starterStreetNo.txt",bc,02,a9,b2);
HXLINE( 288)							this->txt = true;
            						}
            					}
            				}
            			}
            			break;
            		}
HXLINE( 294)		this->combatText->show(this->name,this->txt);
HXLINE( 295)		this->state = 1;
HXLINE( 296)		this->set_visible(true);
HXLINE( 299)		::flixel::tweens::FlxTween_obj::num(( (Float)(0) ),( (Float)(1) ),((Float).66), ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())
            			->setFixed(1,HX_("onComplete",f8,d4,7e,5d),this->finishFadeIn_dyn())),this->updateAlpha_dyn());
            	}


HX_DEFINE_DYNAMIC_FUNC6(CombatHUD_obj,initCombat,(void))

void CombatHUD_obj::finishFadeIn( ::flixel::tweens::FlxTween _){
            	HX_STACKFRAME(&_hx_pos_94bd977f46f9a023_304_finishFadeIn)
HXLINE( 305)		this->set_active(true);
HXLINE( 306)		this->wait = false;
            	}


HX_DEFINE_DYNAMIC_FUNC1(CombatHUD_obj,finishFadeIn,(void))

void CombatHUD_obj::updateKeyboardInput(){
            	HX_STACKFRAME(&_hx_pos_94bd977f46f9a023_310_updateKeyboardInput)
HXLINE( 311)		bool _hx_tmp;
HXDLIN( 311)		bool _hx_tmp1;
HXDLIN( 311)		if (!(this->pointer->visible)) {
HXLINE( 311)			_hx_tmp1 = this->pointerLeft->visible;
            		}
            		else {
HXLINE( 311)			_hx_tmp1 = true;
            		}
HXDLIN( 311)		if (!(_hx_tmp1)) {
HXLINE( 311)			_hx_tmp = !(this->combatText->textRunDone);
            		}
            		else {
HXLINE( 311)			_hx_tmp = true;
            		}
HXDLIN( 311)		if (_hx_tmp) {
HXLINE( 313)			{
HXLINE( 313)				 ::flixel::FlxObject Object = this->enterCur;
HXDLIN( 313)				::flixel::effects::FlxFlicker_obj::stopFlickering(Object);
            			}
HXLINE( 314)			this->enterCur->set_visible(false);
            		}
            		else {
HXLINE( 316)			if (!(::flixel::effects::FlxFlicker_obj::isFlickering(( ( ::flixel::FlxObject)(this->enterCur) )))) {
HXLINE( 318)				this->enterCur->set_visible(true);
HXLINE( 319)				{
HXLINE( 319)					 ::Dynamic CompletionCallback = null();
HXDLIN( 319)					 ::Dynamic ProgressCallback = null();
HXDLIN( 319)					::flixel::effects::FlxFlicker_obj::flicker(( ( ::flixel::FlxObject)(this->enterCur) ),0,((Float)0.5),true,true,CompletionCallback,ProgressCallback);
            				}
            			}
            		}
HXLINE( 324)		bool left = false;
HXLINE( 325)		bool right = false;
HXLINE( 326)		bool fire = false;
HXLINE( 328)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_0c6cd4c3_14,3),-1)) {
HXLINE( 329)			fire = true;
            		}
            		else {
HXLINE( 330)			if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_0c6cd4c3_15,2),-1)) {
HXLINE( 331)				left = true;
            			}
            			else {
HXLINE( 332)				if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_0c6cd4c3_16,2),-1)) {
HXLINE( 333)					right = true;
            				}
            			}
            		}
HXLINE( 336)		bool _hx_tmp2;
HXDLIN( 336)		if (fire) {
HXLINE( 336)			_hx_tmp2 = this->combatText->textRunDone;
            		}
            		else {
HXLINE( 336)			_hx_tmp2 = false;
            		}
HXDLIN( 336)		if (_hx_tmp2) {
HXLINE( 339)			bool _hx_tmp;
HXDLIN( 339)			if (!(this->pointer->visible)) {
HXLINE( 339)				_hx_tmp = this->pointerLeft->visible;
            			}
            			else {
HXLINE( 339)				_hx_tmp = true;
            			}
HXDLIN( 339)			if (_hx_tmp) {
HXLINE( 340)				this->check->play(null(),null(),null());
            			}
            			else {
HXLINE( 343)				this->next->play(null(),null(),null());
            			}
HXLINE( 346)			if (::hx::IsPointerEq( this->enemy->type,::EnemyType_obj::shibaCoin_dyn() )) {
HXLINE( 348)				if ((this->state == 1)) {
HXLINE( 350)					bool _hx_tmp;
HXDLIN( 350)					if (this->combatText->over) {
HXLINE( 350)						_hx_tmp = !(this->pointer->visible);
            					}
            					else {
HXLINE( 350)						_hx_tmp = false;
            					}
HXDLIN( 350)					if (_hx_tmp) {
HXLINE( 352)						this->pointer->set_visible(true);
            					}
            					else {
HXLINE( 354)						if (this->pointer->visible) {
HXLINE( 356)							this->state++;
HXLINE( 357)							this->pointer->set_visible(false);
HXLINE( 358)							::String _hx_switch_0 = this->pointer->selected;
            							if (  (_hx_switch_0==HX_("NO",41,44,00,00)) ){
HXLINE( 370)								this->outcome = ::Outcome_obj::FLEE_dyn();
HXLINE( 371)								this->doneResultsIn();
HXLINE( 369)								goto _hx_goto_5;
            							}
            							if (  (_hx_switch_0==HX_("YES",07,c5,43,00)) ){
HXLINE( 361)								this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(false);
HXLINE( 362)								this->choices->get(::Choice_obj::_hx_NO_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(false);
HXLINE( 363)								this->investNumText->set_visible(true);
HXLINE( 364)								Float _hx_tmp = this->investNumText->x;
HXDLIN( 364)								Float _hx_tmp1 = this->investNumText->y;
HXDLIN( 364)								Float _hx_tmp2 = this->investNumText->get_width();
HXDLIN( 364)								this->lrPointer(_hx_tmp,_hx_tmp1,_hx_tmp2,this->investNumText->get_height());
HXLINE( 366)								this->name = HX_W(u":\u8acb\u9078\u64c7\u4f60\u8981\u6295\u8cc7\u591a\u5c11\uff1f\u6700\u5c11 5 \u80fd\u91cf\u5e63\u3002\u597d\u4e86\u5c31\u6309enter\u3002",1539,998d);
HXLINE( 367)								this->combatText->show(this->name,false);
HXLINE( 360)								goto _hx_goto_5;
            							}
            							_hx_goto_5:;
            						}
            					}
            				}
            				else {
HXLINE( 375)					if ((this->state == 2)) {
HXLINE( 377)						this->state++;
HXLINE( 379)						 ::CombatHUD _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 379)						_hx_tmp->diamond = (_hx_tmp->diamond - ( (Float)(this->investNum) ));
HXLINE( 380)						this->name = HX_W(u":\u8b1d\u8b1d\u4f60\uff01\u5982\u679c\u60f3\u8ce3\u6389\u72d7\u72d7\u5e63\u7684\u8a71\u53ef\u4ee5\u53bb\u5546\u5e97\u5594\u3002",c85e,a944);
HXLINE( 381)						this->outcome = ::Outcome_obj::WIN_dyn();
HXLINE( 383)						this->combatText->show(this->name,false);
HXLINE( 384)						this->investNumText->set_visible(false);
HXLINE( 385)						this->pointerLeft->set_visible(false);
HXLINE( 386)						this->pointerRight->set_visible(false);
            					}
            					else {
HXLINE( 388)						if ((this->state == 3)) {
HXLINE( 389)							this->doneResultsIn();
            						}
            					}
            				}
            			}
            			else {
HXLINE( 392)				if (::hx::IsPointerEq( this->enemy->type,::EnemyType_obj::cloudMiner_dyn() )) {
HXLINE( 394)					if ((this->state == 1)) {
HXLINE( 397)						bool _hx_tmp;
HXDLIN( 397)						if (this->combatText->over) {
HXLINE( 397)							_hx_tmp = !(this->pointer->visible);
            						}
            						else {
HXLINE( 397)							_hx_tmp = false;
            						}
HXDLIN( 397)						if (_hx_tmp) {
HXLINE( 398)							this->pointer->set_visible(true);
            						}
            						else {
HXLINE( 399)							if (this->pointer->visible) {
HXLINE( 401)								this->state++;
HXLINE( 402)								this->pointer->set_visible(false);
HXLINE( 403)								::String _hx_switch_1 = this->pointer->selected;
            								if (  (_hx_switch_1==HX_("NO",41,44,00,00)) ){
HXLINE( 411)									this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(false);
HXLINE( 412)									this->choices->get(::Choice_obj::_hx_NO_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(false);
HXLINE( 413)									this->pointer->set_visible(false);
HXLINE( 414)									this->name = HX_W(u":\u5509\uff01\u4f60\u9019\u96bb\u8822\u7329\u7329\uff0c\u90fd\u4e0d\u61c2\u5f97\u628a\u63e1\u6a5f\u6703\u8cfa\u5927\u9322\u3002",55a5,8f48);
HXLINE( 415)									this->outcome = ::Outcome_obj::FLEE_dyn();
HXLINE( 410)									goto _hx_goto_6;
            								}
            								if (  (_hx_switch_1==HX_("YES",07,c5,43,00)) ){
HXLINE( 406)									 ::CombatHUD _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 406)									_hx_tmp->diamond = (_hx_tmp->diamond + 5);
HXLINE( 407)									this->name = HX_W(u":\u6211\u6c92\u9a19\u4f60\u5427\uff01\u99ac\u4e0a\u5c31\u8cfa\u5230\u80fd\u91cf\u5e63\u4e86\u3002:\u4f60\u60f3\u518d\u591a\u79df\u5e7e\u53f0\u55ce\uff1f\u9019\u6b21\u4f60\u51fa 20 \u80fd\u91cf\u5e63\u5c31\u6703\u67097\u53f0\u6a5f\u5668\u5e6b\u4f60\u6316\u7926\u8cfa\u9322\u5594\uff01",5fb0,b7b0);
HXLINE( 408)									this->outcome = ::Outcome_obj::LOSE_dyn();
HXLINE( 405)									goto _hx_goto_6;
            								}
            								_hx_goto_6:;
HXLINE( 417)								this->combatText->show(this->name,false);
            							}
            						}
            					}
            					else {
HXLINE( 420)						if ((this->state == 2)) {
HXLINE( 422)							if (::hx::IsPointerEq( this->outcome,::Outcome_obj::FLEE_dyn() )) {
HXLINE( 424)								this->state++;
HXLINE( 425)								this->doneResultsIn();
            							}
            							else {
HXLINE( 429)								bool _hx_tmp;
HXDLIN( 429)								if (this->combatText->over) {
HXLINE( 429)									_hx_tmp = !(this->pointer->visible);
            								}
            								else {
HXLINE( 429)									_hx_tmp = false;
            								}
HXDLIN( 429)								if (_hx_tmp) {
HXLINE( 430)									this->pointer->set_visible(true);
            								}
            								else {
HXLINE( 431)									if (this->pointer->visible) {
HXLINE( 433)										this->state++;
HXLINE( 434)										this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(false);
HXLINE( 435)										this->choices->get(::Choice_obj::_hx_NO_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(false);
HXLINE( 436)										this->pointer->set_visible(false);
HXLINE( 437)										::String _hx_switch_2 = this->pointer->selected;
            										if (  (_hx_switch_2==HX_("NO",41,44,00,00)) ){
HXLINE( 445)											this->name = HX_W(u":\u5509\uff01\u4f60\u9019\u96bb\u8822\u7329\u7329\uff0c\u90fd\u4e0d\u61c2\u5f97\u628a\u63e1\u6a5f\u6703\u8cfa\u5927\u9322\u3002",55a5,8f48);
HXLINE( 446)											this->outcome = ::Outcome_obj::FLEE_dyn();
HXLINE( 444)											goto _hx_goto_7;
            										}
            										if (  (_hx_switch_2==HX_("YES",07,c5,43,00)) ){
HXLINE( 440)											 ::CombatHUD _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 440)											_hx_tmp->diamond = (_hx_tmp->diamond - ( (Float)(20) ));
HXLINE( 441)											this->name = HX_W(u":\u771f\u662f\u96bb\u50bb\u7329\u7329\u554a\uff0c\u9019\u4e9b\u9322\u6211\u5c31\u6536\u4e0b\u4e86\uff0c\u563f\u563f\u563f\uff01",07f3,4ad3);
HXLINE( 442)											this->outcome = ::Outcome_obj::LOSE_dyn();
HXLINE( 439)											goto _hx_goto_7;
            										}
            										_hx_goto_7:;
HXLINE( 448)										this->combatText->show(this->name,false);
            									}
            								}
            							}
            						}
            						else {
HXLINE( 452)							if ((this->state == 3)) {
HXLINE( 453)								this->doneResultsIn();
            							}
            						}
            					}
            				}
            				else {
HXLINE( 457)					if (::hx::IsPointerEq( this->enemy->type,::EnemyType_obj::nft_dyn() )) {
HXLINE( 459)						if ((this->state == 1)) {
HXLINE( 461)							bool _hx_tmp;
HXDLIN( 461)							if (this->combatText->over) {
HXLINE( 461)								_hx_tmp = !(this->pointer->visible);
            							}
            							else {
HXLINE( 461)								_hx_tmp = false;
            							}
HXDLIN( 461)							if (_hx_tmp) {
HXLINE( 463)								this->pointer->set_visible(true);
            							}
            							else {
HXLINE( 465)								if (this->pointer->visible) {
HXLINE( 467)									this->state++;
HXLINE( 468)									this->pointer->set_visible(false);
HXLINE( 469)									::String _hx_switch_3 = this->pointer->selected;
            									if (  (_hx_switch_3==HX_("NO",41,44,00,00)) ){
HXLINE( 480)										this->outcome = ::Outcome_obj::FLEE_dyn();
HXLINE( 481)										this->doneResultsIn();
HXLINE( 479)										goto _hx_goto_8;
            									}
            									if (  (_hx_switch_3==HX_("YES",07,c5,43,00)) ){
HXLINE( 472)										this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(false);
HXLINE( 473)										this->choices->get(::Choice_obj::_hx_NO_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(false);
HXLINE( 474)										this->nftStyle->set_visible(true);
HXLINE( 475)										Float _hx_tmp = this->nftStyle->x;
HXDLIN( 475)										Float _hx_tmp1 = this->nftStyle->y;
HXDLIN( 475)										this->lrPointer(_hx_tmp,_hx_tmp1,( (Float)(168) ),this->nftStyle->get_height());
HXLINE( 477)										this->name = HX_W(u":\u9078\u4e00\u500b\u82b1\u6a23\u5427\u3002\u6309\u5de6\u53f3\u9375\u67e5\u770b\u82b1\u6a23\u3002",7eeb,46b9);
HXLINE( 478)										this->combatText->show(this->name,false);
HXLINE( 471)										goto _hx_goto_8;
            									}
            									_hx_goto_8:;
            								}
            							}
            						}
            						else {
HXLINE( 485)							if ((this->state == 2)) {
HXLINE( 487)								this->state++;
HXLINE( 489)								 ::CombatHUD _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 489)								_hx_tmp->diamond = (_hx_tmp->diamond - ( (Float)(this->investNum) ));
HXLINE( 490)								this->name = HX_W(u":\u8b1d\u8b1d\u4f60\uff01\u5982\u679c\u60f3\u8ce3\u6389NFT\u7684\u8a71\u53ef\u4ee5\u53bb\u5546\u5e97\u5594\u3002",80b1,7129);
HXLINE( 491)								this->outcome = ::Outcome_obj::WIN_dyn();
HXLINE( 493)								this->combatText->show(this->name,false);
HXLINE( 494)								this->investNumText->set_visible(false);
HXLINE( 495)								this->pointerLeft->set_visible(false);
HXLINE( 496)								this->pointerRight->set_visible(false);
HXLINE( 497)								this->nftStyle->set_visible(false);
            							}
            							else {
HXLINE( 499)								if ((this->state == 3)) {
HXLINE( 500)									this->doneResultsIn();
            								}
            							}
            						}
            					}
            					else {
HXLINE( 503)						if (::hx::IsPointerEq( this->enemy->type,::EnemyType_obj::rod_dyn() )) {
HXLINE( 505)							if ((this->state == 1)) {
HXLINE( 507)								this->rodTalk = true;
HXLINE( 508)								bool _hx_tmp;
HXDLIN( 508)								if (this->combatText->over) {
HXLINE( 508)									_hx_tmp = !(this->pointer->visible);
            								}
            								else {
HXLINE( 508)									_hx_tmp = false;
            								}
HXDLIN( 508)								if (_hx_tmp) {
HXLINE( 510)									this->pointer->set_visible(true);
            								}
            								else {
HXLINE( 512)									if (this->pointer->visible) {
HXLINE( 514)										this->state++;
HXLINE( 515)										this->pointer->set_visible(false);
HXLINE( 516)										::String _hx_switch_4 = this->pointer->selected;
            										if (  (_hx_switch_4==HX_("NO",41,44,00,00)) ){
HXLINE( 528)											this->outcome = ::Outcome_obj::FLEE_dyn();
HXLINE( 529)											this->doneResultsIn();
HXLINE( 527)											goto _hx_goto_9;
            										}
            										if (  (_hx_switch_4==HX_("YES",07,c5,43,00)) ){
HXLINE( 519)											this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(false);
HXLINE( 520)											this->choices->get(::Choice_obj::_hx_NO_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(false);
HXLINE( 521)											this->investNumText->set_visible(true);
HXLINE( 522)											Float _hx_tmp = this->investNumText->x;
HXDLIN( 522)											Float _hx_tmp1 = this->investNumText->y;
HXDLIN( 522)											Float _hx_tmp2 = this->investNumText->get_width();
HXDLIN( 522)											this->lrPointer(_hx_tmp,_hx_tmp1,_hx_tmp2,this->investNumText->get_height());
HXLINE( 524)											this->name = ((HX_W(u":\u4f60\u73fe\u5728\u6709",d46b,a8c2) + this->bananaCoin) + HX_W(u" \u9999\u8549\u5e63\u3002\u8acb\u9078\u64c7\u4f60\u8981\u6295\u8cc7\u591a\u5c11\uff1f\u6700\u5c11 5 \u9999\u8549\u5e63\u3002\u597d\u4e86\u5c31\u6309enter\u3002",de2e,3b9f));
HXLINE( 525)											this->combatText->show(this->name,false);
HXLINE( 518)											goto _hx_goto_9;
            										}
            										_hx_goto_9:;
            									}
            								}
            							}
            							else {
HXLINE( 533)								if ((this->state == 2)) {
HXLINE( 535)									this->state++;
HXLINE( 536)									this->investNumText->set_visible(false);
HXLINE( 537)									this->rodNum = 2;
HXLINE( 538)									 ::flixel::text::FlxText _hx_tmp = this->rodNumText;
HXDLIN( 538)									_hx_tmp->set_text(::Std_obj::string(this->rodNum));
HXLINE( 539)									this->rodNumText->set_visible(true);
HXLINE( 541)									this->name = HX_W(u":\u8acb\u9078\u64c7\u4f60\u69d3\u687f\u591a\u5c11\u500d\uff1f\u597d\u4e86\u5c31\u6309enter\u3002",3159,3b8d);
HXLINE( 542)									this->combatText->show(this->name,false);
            								}
            								else {
HXLINE( 544)									if ((this->state == 3)) {
HXLINE( 546)										this->state++;
HXLINE( 547)										this->rodNumText->set_visible(false);
HXLINE( 548)										this->pointerLeft->set_visible(false);
HXLINE( 549)										this->pointerRight->set_visible(false);
HXLINE( 550)										 ::CombatHUD _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 550)										_hx_tmp->bananaCoin = (_hx_tmp->bananaCoin - ( (Float)(this->investNum) ));
HXLINE( 551)										 ::CombatHUD _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 551)										_hx_tmp1->investNum = (_hx_tmp1->investNum * this->rodNum);
HXLINE( 552)										this->name = ((HX_W(u":\u8b1d\u8b1d\u4f60\uff0c\u4f60\u5f97\u5230 ",febc,bfa4) + this->investNum) + HX_W(u" APS\u5e63\uff01\u5982\u679c\u60f3\u8ce3\u6389APS\u5e63\u7684\u8a71\u53ef\u4ee5\u53bb\u4ea4\u6613\u6240\u5594\u3002",34e0,2511));
HXLINE( 553)										this->outcome = ::Outcome_obj::WIN_dyn();
HXLINE( 555)										this->combatText->show(this->name,false);
            									}
            									else {
HXLINE( 557)										if ((this->state == 4)) {
HXLINE( 558)											this->doneResultsIn();
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 561)			if (::hx::IsPointerEq( this->enemy->type,::EnemyType_obj::starter_dyn() )) {
HXLINE( 563)				if (!(this->starterInStreet)) {
HXLINE( 565)					if ((this->state == 1)) {
HXLINE( 567)						bool _hx_tmp;
HXDLIN( 567)						if (this->combatText->over) {
HXLINE( 567)							_hx_tmp = !(this->pointer->visible);
            						}
            						else {
HXLINE( 567)							_hx_tmp = false;
            						}
HXDLIN( 567)						if (_hx_tmp) {
HXLINE( 569)							this->pointer->set_visible(true);
            						}
            						else {
HXLINE( 571)							if (this->pointer->visible) {
HXLINE( 573)								this->state++;
HXLINE( 574)								this->pointer->set_visible(false);
HXLINE( 575)								::String _hx_switch_5 = this->pointer->selected;
            								if (  (_hx_switch_5==HX_("NO",41,44,00,00)) ){
HXLINE( 588)									this->name = HX_W(u":\u6211\u4e4b\u5f8c\u5c07\u6703\u5728DeFi\u8857\u4e0a\u958b\u4e00\u9593\u5e97\uff0c\u5982\u679c\u4f60\u6539\u8b8a\u5fc3\u610f\u7684\u8a71\uff0c\u5c31\u53bb\u90a3\u627e\u6211\u5427\uff01",75c4,88a6);
HXLINE( 589)									this->outcome = ::Outcome_obj::WIN_dyn();
HXLINE( 590)									this->combatText->show(this->name,false);
HXLINE( 591)									this->investNumText->set_visible(false);
HXLINE( 592)									this->pointerLeft->set_visible(false);
HXLINE( 593)									this->pointerRight->set_visible(false);
HXLINE( 594)									this->outcome = ::Outcome_obj::FLEE_dyn();
HXLINE( 587)									goto _hx_goto_10;
            								}
            								if (  (_hx_switch_5==HX_("YES",07,c5,43,00)) ){
HXLINE( 578)									this->buyStarter = true;
HXLINE( 579)									this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(false);
HXLINE( 580)									this->choices->get(::Choice_obj::_hx_NO_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(false);
HXLINE( 581)									this->investNumText->set_visible(true);
HXLINE( 582)									Float _hx_tmp = this->investNumText->x;
HXDLIN( 582)									Float _hx_tmp1 = this->investNumText->y;
HXDLIN( 582)									Float _hx_tmp2 = this->investNumText->get_width();
HXDLIN( 582)									this->lrPointer(_hx_tmp,_hx_tmp1,_hx_tmp2,this->investNumText->get_height());
HXLINE( 584)									this->name = ((HX_W(u":\u8acb\u9078\u64c7\u4f60\u8981\u6295\u8cc7\u591a\u5c11\uff1f\u6700\u5c11 5 \u80fd\u91cf\u5e63\u3002\u73fe\u5728 1 \u80fd\u91cf\u5e63\u53ef\u4ee5\u8cb7 ",c124,b22c) + this->starterPrize) + HX_W(u" APS\u5e63\u3002\u597d\u4e86\u5c31\u6309enter\u3002",89b7,8b4c));
HXLINE( 585)									this->combatText->show(this->name,false);
HXLINE( 577)									goto _hx_goto_10;
            								}
            								_hx_goto_10:;
            							}
            						}
            					}
            					else {
HXLINE( 598)						if ((this->state == 2)) {
HXLINE( 600)							this->state++;
HXLINE( 601)							this->investNumText->set_visible(false);
HXLINE( 602)							this->pointerLeft->set_visible(false);
HXLINE( 603)							this->pointerRight->set_visible(false);
HXLINE( 604)							::String _hx_switch_6 = this->pointer->selected;
            							if (  (_hx_switch_6==HX_("NO",41,44,00,00)) ){
HXLINE( 614)								this->doneResultsIn();
HXDLIN( 614)								goto _hx_goto_11;
            							}
            							if (  (_hx_switch_6==HX_("YES",07,c5,43,00)) ){
HXLINE( 607)								 ::CombatHUD _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 607)								_hx_tmp->diamond = (_hx_tmp->diamond - ( (Float)(this->investNum) ));
HXLINE( 609)								this->name = ((HX_W(u":\u8b1d\u8b1d\u60e0\u9867\uff01\u4f60\u8cb7\u4e86",877c,5b29) + (this->investNum * this->starterPrize)) + HX_W(u"APS\u5e63\u3002:\u4e4b\u5f8c\u6211\u5c07\u6703\u5728DeFi\u8857\u4e0a\u958b\u4e00\u9593\u5e97\uff0c\u6b61\u8fce\u60a8\u4f86\u5149\u9867\u3002",0a17,3d13));
HXLINE( 610)								this->outcome = ::Outcome_obj::WIN_dyn();
HXLINE( 611)								this->combatText->show(this->name,false);
HXLINE( 606)								goto _hx_goto_11;
            							}
            							_hx_goto_11:;
            						}
            						else {
HXLINE( 617)							if ((this->state == 3)) {
HXLINE( 619)								 ::CombatHUD _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 619)								_hx_tmp->appleCoin = (_hx_tmp->appleCoin + (this->investNum * this->starterPrize));
HXLINE( 620)								this->doneResultsIn();
            							}
            						}
            					}
            				}
            				else {
HXLINE( 625)					if ((this->state == 1)) {
HXLINE( 627)						bool _hx_tmp;
HXDLIN( 627)						if (this->combatText->over) {
HXLINE( 627)							_hx_tmp = !(this->pointer->visible);
            						}
            						else {
HXLINE( 627)							_hx_tmp = false;
            						}
HXDLIN( 627)						if (_hx_tmp) {
HXLINE( 629)							this->pointer->set_visible(true);
            						}
            						else {
HXLINE( 631)							if (this->pointer->visible) {
HXLINE( 633)								this->state++;
HXLINE( 634)								this->pointer->set_visible(false);
HXLINE( 635)								::String _hx_switch_7 = this->pointer->selected;
            								if (  (_hx_switch_7==HX_("NO",41,44,00,00)) ){
HXLINE( 647)									this->outcome = ::Outcome_obj::FLEE_dyn();
HXLINE( 648)									this->doneResultsIn();
HXLINE( 646)									goto _hx_goto_12;
            								}
            								if (  (_hx_switch_7==HX_("YES",07,c5,43,00)) ){
HXLINE( 638)									this->choices->get(::Choice_obj::_hx_YES_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(false);
HXLINE( 639)									this->choices->get(::Choice_obj::_hx_NO_dyn()).StaticCast<  ::flixel::text::FlxText >()->set_visible(false);
HXLINE( 640)									this->investNumText->set_visible(true);
HXLINE( 641)									Float _hx_tmp = this->investNumText->x;
HXDLIN( 641)									Float _hx_tmp1 = this->investNumText->y;
HXDLIN( 641)									Float _hx_tmp2 = this->investNumText->get_width();
HXDLIN( 641)									this->lrPointer(_hx_tmp,_hx_tmp1,_hx_tmp2,this->investNumText->get_height());
HXLINE( 643)									this->name = ((HX_W(u":\u8acb\u9078\u64c7\u4f60\u8981\u6295\u8cc7\u591a\u5c11\uff1f\u6700\u5c11 5 \u80fd\u91cf\u5e63\u3002\u73fe\u5728 1 \u80fd\u91cf\u5e63\u53ef\u4ee5\u8cb7 ",c124,b22c) + this->dexStarterPirze) + HX_W(u" \u9752\u86d9\u5e63\u3002\u597d\u4e86\u5c31\u6309enter\u3002",e93b,c22a));
HXLINE( 644)									this->combatText->show(this->name,false);
HXLINE( 637)									goto _hx_goto_12;
            								}
            								_hx_goto_12:;
            							}
            						}
            					}
            					else {
HXLINE( 652)						if ((this->state == 2)) {
HXLINE( 654)							this->state++;
HXLINE( 655)							 ::CombatHUD _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 655)							_hx_tmp->diamond = (_hx_tmp->diamond - ( (Float)(this->investNum) ));
HXLINE( 656)							 ::CombatHUD _hx_tmp1 = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 656)							_hx_tmp1->dexCoin = (_hx_tmp1->dexCoin + (this->investNum * this->dexStarterPirze));
HXLINE( 657)							this->investNumText->set_visible(false);
HXLINE( 658)							this->pointerLeft->set_visible(false);
HXLINE( 659)							this->pointerRight->set_visible(false);
HXLINE( 660)							this->outcome = ::Outcome_obj::WIN_dyn();
HXLINE( 661)							this->name = ((HX_W(u":\u8b1d\u8b1d\u60e0\u9867\uff01\u4f60\u8cb7\u4e86",877c,5b29) + (this->investNum * this->dexStarterPirze)) + HX_W(u"\u9752\u86d9\u5e63\u3002",8dde,b206));
HXLINE( 662)							this->combatText->show(this->name,false);
            						}
            						else {
HXLINE( 664)							if ((this->state == 3)) {
HXLINE( 666)								this->doneResultsIn();
            							}
            						}
            					}
            				}
            			}
HXLINE( 670)			this->diamond = ::flixel::math::FlxMath_obj::roundDecimal(this->diamond,2);
HXLINE( 671)			 ::flixel::text::FlxText _hx_tmp1 = this->diamondText;
HXDLIN( 671)			_hx_tmp1->set_text(::Std_obj::string(this->diamond));
HXLINE( 672)			 ::flixel::text::FlxText _hx_tmp2 = this->diamondUiText;
HXDLIN( 672)			_hx_tmp2->set_text(::Std_obj::string(this->diamond));
            		}
            		else {
HXLINE( 674)			bool _hx_tmp;
HXDLIN( 674)			if (!(left)) {
HXLINE( 674)				_hx_tmp = right;
            			}
            			else {
HXLINE( 674)				_hx_tmp = true;
            			}
HXDLIN( 674)			if (_hx_tmp) {
HXLINE( 676)				if (this->investNumText->visible) {
HXLINE( 679)					if (::hx::IsPointerEq( this->enemy->type,::EnemyType_obj::rod_dyn() )) {
HXLINE( 681)						bool _hx_tmp;
HXDLIN( 681)						if (left) {
HXLINE( 681)							_hx_tmp = (this->investNum != 5);
            						}
            						else {
HXLINE( 681)							_hx_tmp = false;
            						}
HXDLIN( 681)						if (_hx_tmp) {
HXLINE( 682)							 ::CombatHUD _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 682)							_hx_tmp->investNum = (_hx_tmp->investNum - 5);
            						}
            						else {
HXLINE( 683)							bool _hx_tmp;
HXDLIN( 683)							if (right) {
HXLINE( 683)								Float _hx_tmp1 = (( (Float)(this->investNum) ) / ( (Float)(5) ));
HXDLIN( 683)								_hx_tmp = (_hx_tmp1 != ::Std_obj::_hx_int((this->bananaCoin / ( (Float)(5) ))));
            							}
            							else {
HXLINE( 683)								_hx_tmp = false;
            							}
HXDLIN( 683)							if (_hx_tmp) {
HXLINE( 684)								 ::CombatHUD _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 684)								_hx_tmp->investNum = (_hx_tmp->investNum + 5);
            							}
            						}
HXLINE( 685)						 ::flixel::text::FlxText _hx_tmp1 = this->investNumText;
HXDLIN( 685)						_hx_tmp1->set_text(::Std_obj::string(this->investNum));
            					}
            					else {
HXLINE( 690)						bool _hx_tmp;
HXDLIN( 690)						if (left) {
HXLINE( 690)							_hx_tmp = (this->investNum != 5);
            						}
            						else {
HXLINE( 690)							_hx_tmp = false;
            						}
HXDLIN( 690)						if (_hx_tmp) {
HXLINE( 691)							 ::CombatHUD _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 691)							_hx_tmp->investNum = (_hx_tmp->investNum - 5);
            						}
            						else {
HXLINE( 692)							bool _hx_tmp;
HXDLIN( 692)							if (right) {
HXLINE( 692)								Float _hx_tmp1 = (( (Float)(this->investNum) ) / ( (Float)(5) ));
HXDLIN( 692)								_hx_tmp = (_hx_tmp1 != ::Std_obj::_hx_int((this->diamond / ( (Float)(5) ))));
            							}
            							else {
HXLINE( 692)								_hx_tmp = false;
            							}
HXDLIN( 692)							if (_hx_tmp) {
HXLINE( 693)								 ::CombatHUD _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 693)								_hx_tmp->investNum = (_hx_tmp->investNum + 5);
            							}
            						}
HXLINE( 694)						 ::flixel::text::FlxText _hx_tmp1 = this->investNumText;
HXDLIN( 694)						_hx_tmp1->set_text(::Std_obj::string(this->investNum));
            					}
            				}
            				else {
HXLINE( 697)					if (this->rodNumText->visible) {
HXLINE( 699)						bool _hx_tmp;
HXDLIN( 699)						if (left) {
HXLINE( 699)							_hx_tmp = (this->rodNum != 2);
            						}
            						else {
HXLINE( 699)							_hx_tmp = false;
            						}
HXDLIN( 699)						if (_hx_tmp) {
HXLINE( 700)							this->rodNum--;
            						}
            						else {
HXLINE( 701)							if (right) {
HXLINE( 702)								this->rodNum++;
            							}
            						}
HXLINE( 703)						 ::flixel::text::FlxText _hx_tmp1 = this->rodNumText;
HXDLIN( 703)						_hx_tmp1->set_text(::Std_obj::string(this->rodNum));
            					}
            					else {
HXLINE( 706)						if (this->nftStyle->visible) {
HXLINE( 708)							if (left) {
HXLINE( 710)								if ((this->nftStyleNum == 0)) {
HXLINE( 711)									this->nftStyleNum = 2;
            								}
            								else {
HXLINE( 713)									this->nftStyleNum--;
            								}
            							}
            							else {
HXLINE( 715)								if (right) {
HXLINE( 717)									if ((this->nftStyleNum == 2)) {
HXLINE( 718)										this->nftStyleNum = 0;
            									}
            									else {
HXLINE( 720)										this->nftStyleNum++;
            									}
            								}
            							}
HXLINE( 722)							this->nftStyle->animation->set_frameIndex(this->nftStyleNum);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CombatHUD_obj,updateKeyboardInput,(void))

void CombatHUD_obj::lrPointer(Float spriteX,Float spriteY,Float spriteW,Float spriteH){
            	HX_STACKFRAME(&_hx_pos_94bd977f46f9a023_728_lrPointer)
HXLINE( 729)		this->pointerLeft->set_visible(true);
HXLINE( 730)		 ::flixel::FlxSprite _hx_tmp = this->pointerLeft;
HXDLIN( 730)		_hx_tmp->setPosition((spriteX - this->pointerLeft->get_width()),((spriteY + (spriteH / ( (Float)(2) ))) - ( (Float)(30) )));
HXLINE( 731)		this->pointerRight->set_visible(true);
HXLINE( 732)		this->pointerRight->setPosition((spriteX + spriteW),((spriteY + (spriteH / ( (Float)(2) ))) - ( (Float)(30) )));
            	}


HX_DEFINE_DYNAMIC_FUNC4(CombatHUD_obj,lrPointer,(void))

void CombatHUD_obj::updateAlpha(Float alpha){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0,Float,alpha) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite sprite){
            			HX_STACKFRAME(&_hx_pos_94bd977f46f9a023_739_updateAlpha)
HXLINE( 739)			sprite->set_alpha(alpha);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_STACKFRAME(&_hx_pos_94bd977f46f9a023_737_updateAlpha)
HXLINE( 738)		this->alpha = alpha;
HXLINE( 739)		this->forEach( ::Dynamic(new _hx_Closure_0(alpha)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(CombatHUD_obj,updateAlpha,(void))

void CombatHUD_obj::finishFadeOut( ::flixel::tweens::FlxTween _){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::CombatHUD,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_94bd977f46f9a023_747_finishFadeOut)
HXLINE( 748)			_gthis->set_visible(false);
HXLINE( 749)			_gthis->set_active(false);
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_94bd977f46f9a023_744_finishFadeOut)
HXDLIN( 744)		 ::CombatHUD _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 745)		this->combatText->resetText(HX_("  ",00,1c,00,00));
HXLINE( 746)		this->combatText->start(null(),false,false,null(), ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(CombatHUD_obj,finishFadeOut,(void))

void CombatHUD_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_94bd977f46f9a023_755_update)
HXLINE( 756)		this->updateKeyboardInput();
HXLINE( 757)		this->super::update(elapsed);
            	}


void CombatHUD_obj::doneResultsIn(){
            	HX_STACKFRAME(&_hx_pos_94bd977f46f9a023_763_doneResultsIn)
HXDLIN( 763)		if ((this->diamond < 0)) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_94bd977f46f9a023_767_doneResultsIn)
HXLINE( 767)				 ::flixel::FlxState nextState =  ::GameOverState_obj::__alloc( HX_CTX ,null());
HXDLIN( 767)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 767)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 765)			::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),false, ::Dynamic(new _hx_Closure_0()),null());
            		}
            		else {
HXLINE( 771)			::flixel::tweens::FlxTween_obj::num(( (Float)(1) ),( (Float)(0) ),((Float).66), ::Dynamic(::hx::Anon_obj::Create(2)
            				->setFixed(0,HX_("ease",ee,8b,0c,43),::flixel::tweens::FlxEase_obj::circOut_dyn())
            				->setFixed(1,HX_("onComplete",f8,d4,7e,5d),this->finishFadeOut_dyn())),this->updateAlpha_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(CombatHUD_obj,doneResultsIn,(void))


::hx::ObjectPtr< CombatHUD_obj > CombatHUD_obj::__new() {
	::hx::ObjectPtr< CombatHUD_obj > __this = new CombatHUD_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< CombatHUD_obj > CombatHUD_obj::__alloc(::hx::Ctx *_hx_ctx) {
	CombatHUD_obj *__this = (CombatHUD_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(CombatHUD_obj), true, "CombatHUD"));
	*(void **)__this = CombatHUD_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

CombatHUD_obj::CombatHUD_obj()
{
}

void CombatHUD_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(CombatHUD);
	HX_MARK_MEMBER_NAME(enemy,"enemy");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(enemySprite,"enemySprite");
	HX_MARK_MEMBER_NAME(check,"check");
	HX_MARK_MEMBER_NAME(next,"next");
	HX_MARK_MEMBER_NAME(pointer,"pointer");
	HX_MARK_MEMBER_NAME(choices,"choices");
	HX_MARK_MEMBER_NAME(ynCho,"ynCho");
	HX_MARK_MEMBER_NAME(pointerRight,"pointerRight");
	HX_MARK_MEMBER_NAME(pointerLeft,"pointerLeft");
	HX_MARK_MEMBER_NAME(outcome,"outcome");
	HX_MARK_MEMBER_NAME(state,"state");
	HX_MARK_MEMBER_NAME(combatText,"combatText");
	HX_MARK_MEMBER_NAME(dilog_boxes,"dilog_boxes");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(txt,"txt");
	HX_MARK_MEMBER_NAME(textIn,"textIn");
	HX_MARK_MEMBER_NAME(enterCur,"enterCur");
	HX_MARK_MEMBER_NAME(nftStyle,"nftStyle");
	HX_MARK_MEMBER_NAME(nftStyleNum,"nftStyleNum");
	HX_MARK_MEMBER_NAME(rodTalk,"rodTalk");
	HX_MARK_MEMBER_NAME(rodNum,"rodNum");
	HX_MARK_MEMBER_NAME(rodNumText,"rodNumText");
	HX_MARK_MEMBER_NAME(bananaCoin,"bananaCoin");
	HX_MARK_MEMBER_NAME(appleCoin,"appleCoin");
	HX_MARK_MEMBER_NAME(dexCoin,"dexCoin");
	HX_MARK_MEMBER_NAME(starterPrize,"starterPrize");
	HX_MARK_MEMBER_NAME(dexStarterPirze,"dexStarterPirze");
	HX_MARK_MEMBER_NAME(starterTalk,"starterTalk");
	HX_MARK_MEMBER_NAME(buyStarter,"buyStarter");
	HX_MARK_MEMBER_NAME(starterInStreet,"starterInStreet");
	HX_MARK_MEMBER_NAME(investNum,"investNum");
	HX_MARK_MEMBER_NAME(investNumText,"investNumText");
	HX_MARK_MEMBER_NAME(enemyNameText,"enemyNameText");
	HX_MARK_MEMBER_NAME(diamondText,"diamondText");
	HX_MARK_MEMBER_NAME(diamondUiText,"diamondUiText");
	HX_MARK_MEMBER_NAME(diamond,"diamond");
	HX_MARK_MEMBER_NAME(alpha,"alpha");
	HX_MARK_MEMBER_NAME(wait,"wait");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void CombatHUD_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(enemy,"enemy");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(enemySprite,"enemySprite");
	HX_VISIT_MEMBER_NAME(check,"check");
	HX_VISIT_MEMBER_NAME(next,"next");
	HX_VISIT_MEMBER_NAME(pointer,"pointer");
	HX_VISIT_MEMBER_NAME(choices,"choices");
	HX_VISIT_MEMBER_NAME(ynCho,"ynCho");
	HX_VISIT_MEMBER_NAME(pointerRight,"pointerRight");
	HX_VISIT_MEMBER_NAME(pointerLeft,"pointerLeft");
	HX_VISIT_MEMBER_NAME(outcome,"outcome");
	HX_VISIT_MEMBER_NAME(state,"state");
	HX_VISIT_MEMBER_NAME(combatText,"combatText");
	HX_VISIT_MEMBER_NAME(dilog_boxes,"dilog_boxes");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(txt,"txt");
	HX_VISIT_MEMBER_NAME(textIn,"textIn");
	HX_VISIT_MEMBER_NAME(enterCur,"enterCur");
	HX_VISIT_MEMBER_NAME(nftStyle,"nftStyle");
	HX_VISIT_MEMBER_NAME(nftStyleNum,"nftStyleNum");
	HX_VISIT_MEMBER_NAME(rodTalk,"rodTalk");
	HX_VISIT_MEMBER_NAME(rodNum,"rodNum");
	HX_VISIT_MEMBER_NAME(rodNumText,"rodNumText");
	HX_VISIT_MEMBER_NAME(bananaCoin,"bananaCoin");
	HX_VISIT_MEMBER_NAME(appleCoin,"appleCoin");
	HX_VISIT_MEMBER_NAME(dexCoin,"dexCoin");
	HX_VISIT_MEMBER_NAME(starterPrize,"starterPrize");
	HX_VISIT_MEMBER_NAME(dexStarterPirze,"dexStarterPirze");
	HX_VISIT_MEMBER_NAME(starterTalk,"starterTalk");
	HX_VISIT_MEMBER_NAME(buyStarter,"buyStarter");
	HX_VISIT_MEMBER_NAME(starterInStreet,"starterInStreet");
	HX_VISIT_MEMBER_NAME(investNum,"investNum");
	HX_VISIT_MEMBER_NAME(investNumText,"investNumText");
	HX_VISIT_MEMBER_NAME(enemyNameText,"enemyNameText");
	HX_VISIT_MEMBER_NAME(diamondText,"diamondText");
	HX_VISIT_MEMBER_NAME(diamondUiText,"diamondUiText");
	HX_VISIT_MEMBER_NAME(diamond,"diamond");
	HX_VISIT_MEMBER_NAME(alpha,"alpha");
	HX_VISIT_MEMBER_NAME(wait,"wait");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val CombatHUD_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"txt") ) { return ::hx::Val( txt ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { return ::hx::Val( next ); }
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"wait") ) { return ::hx::Val( wait ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"enemy") ) { return ::hx::Val( enemy ); }
		if (HX_FIELD_EQ(inName,"check") ) { return ::hx::Val( check ); }
		if (HX_FIELD_EQ(inName,"ynCho") ) { return ::hx::Val( ynCho ); }
		if (HX_FIELD_EQ(inName,"state") ) { return ::hx::Val( state ); }
		if (HX_FIELD_EQ(inName,"alpha") ) { return ::hx::Val( alpha ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"textIn") ) { return ::hx::Val( textIn ); }
		if (HX_FIELD_EQ(inName,"rodNum") ) { return ::hx::Val( rodNum ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pointer") ) { return ::hx::Val( pointer ); }
		if (HX_FIELD_EQ(inName,"choices") ) { return ::hx::Val( choices ); }
		if (HX_FIELD_EQ(inName,"outcome") ) { return ::hx::Val( outcome ); }
		if (HX_FIELD_EQ(inName,"rodTalk") ) { return ::hx::Val( rodTalk ); }
		if (HX_FIELD_EQ(inName,"dexCoin") ) { return ::hx::Val( dexCoin ); }
		if (HX_FIELD_EQ(inName,"diamond") ) { return ::hx::Val( diamond ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"enterCur") ) { return ::hx::Val( enterCur ); }
		if (HX_FIELD_EQ(inName,"nftStyle") ) { return ::hx::Val( nftStyle ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"appleCoin") ) { return ::hx::Val( appleCoin ); }
		if (HX_FIELD_EQ(inName,"investNum") ) { return ::hx::Val( investNum ); }
		if (HX_FIELD_EQ(inName,"lrPointer") ) { return ::hx::Val( lrPointer_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return ::hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"combatText") ) { return ::hx::Val( combatText ); }
		if (HX_FIELD_EQ(inName,"rodNumText") ) { return ::hx::Val( rodNumText ); }
		if (HX_FIELD_EQ(inName,"bananaCoin") ) { return ::hx::Val( bananaCoin ); }
		if (HX_FIELD_EQ(inName,"buyStarter") ) { return ::hx::Val( buyStarter ); }
		if (HX_FIELD_EQ(inName,"initCombat") ) { return ::hx::Val( initCombat_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"enemySprite") ) { return ::hx::Val( enemySprite ); }
		if (HX_FIELD_EQ(inName,"pointerLeft") ) { return ::hx::Val( pointerLeft ); }
		if (HX_FIELD_EQ(inName,"dilog_boxes") ) { return ::hx::Val( dilog_boxes ); }
		if (HX_FIELD_EQ(inName,"nftStyleNum") ) { return ::hx::Val( nftStyleNum ); }
		if (HX_FIELD_EQ(inName,"starterTalk") ) { return ::hx::Val( starterTalk ); }
		if (HX_FIELD_EQ(inName,"diamondText") ) { return ::hx::Val( diamondText ); }
		if (HX_FIELD_EQ(inName,"updateAlpha") ) { return ::hx::Val( updateAlpha_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"pointerRight") ) { return ::hx::Val( pointerRight ); }
		if (HX_FIELD_EQ(inName,"starterPrize") ) { return ::hx::Val( starterPrize ); }
		if (HX_FIELD_EQ(inName,"finishFadeIn") ) { return ::hx::Val( finishFadeIn_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"investNumText") ) { return ::hx::Val( investNumText ); }
		if (HX_FIELD_EQ(inName,"enemyNameText") ) { return ::hx::Val( enemyNameText ); }
		if (HX_FIELD_EQ(inName,"diamondUiText") ) { return ::hx::Val( diamondUiText ); }
		if (HX_FIELD_EQ(inName,"finishFadeOut") ) { return ::hx::Val( finishFadeOut_dyn() ); }
		if (HX_FIELD_EQ(inName,"doneResultsIn") ) { return ::hx::Val( doneResultsIn_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dexStarterPirze") ) { return ::hx::Val( dexStarterPirze ); }
		if (HX_FIELD_EQ(inName,"starterInStreet") ) { return ::hx::Val( starterInStreet ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"updateKeyboardInput") ) { return ::hx::Val( updateKeyboardInput_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val CombatHUD_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"txt") ) { txt=inValue.Cast< bool >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"next") ) { next=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"wait") ) { wait=inValue.Cast< bool >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"enemy") ) { enemy=inValue.Cast<  ::Enemy >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check") ) { check=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ynCho") ) { ynCho=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"state") ) { state=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"alpha") ) { alpha=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"textIn") ) { textIn=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rodNum") ) { rodNum=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pointer") ) { pointer=inValue.Cast<  ::Pointer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"choices") ) { choices=inValue.Cast<  ::haxe::ds::EnumValueMap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"outcome") ) { outcome=inValue.Cast<  ::Outcome >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rodTalk") ) { rodTalk=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dexCoin") ) { dexCoin=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diamond") ) { diamond=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"enterCur") ) { enterCur=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nftStyle") ) { nftStyle=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"appleCoin") ) { appleCoin=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"investNum") ) { investNum=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combatText") ) { combatText=inValue.Cast<  ::Text >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rodNumText") ) { rodNumText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bananaCoin") ) { bananaCoin=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buyStarter") ) { buyStarter=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"enemySprite") ) { enemySprite=inValue.Cast<  ::Enemy >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointerLeft") ) { pointerLeft=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dilog_boxes") ) { dilog_boxes=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nftStyleNum") ) { nftStyleNum=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"starterTalk") ) { starterTalk=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diamondText") ) { diamondText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"pointerRight") ) { pointerRight=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"starterPrize") ) { starterPrize=inValue.Cast< int >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"investNumText") ) { investNumText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enemyNameText") ) { enemyNameText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diamondUiText") ) { diamondUiText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"dexStarterPirze") ) { dexStarterPirze=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"starterInStreet") ) { starterInStreet=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void CombatHUD_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("enemy",48,12,7b,70));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("enemySprite",6d,48,48,ab));
	outFields->push(HX_("check",c8,98,b6,45));
	outFields->push(HX_("next",f3,84,02,49));
	outFields->push(HX_("pointer",bd,c0,21,51));
	outFields->push(HX_("choices",f2,b5,17,d9));
	outFields->push(HX_("ynCho",55,db,64,f4));
	outFields->push(HX_("pointerRight",df,ed,8a,8a));
	outFields->push(HX_("pointerLeft",64,97,46,ea));
	outFields->push(HX_("outcome",92,b8,cf,db));
	outFields->push(HX_("state",11,76,0b,84));
	outFields->push(HX_("combatText",01,33,17,e4));
	outFields->push(HX_("dilog_boxes",d9,d5,2d,6e));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("txt",70,6e,58,00));
	outFields->push(HX_("textIn",f2,51,88,d8));
	outFields->push(HX_("enterCur",48,0f,8c,43));
	outFields->push(HX_("nftStyle",55,4a,eb,9d));
	outFields->push(HX_("nftStyleNum",f1,ae,29,c9));
	outFields->push(HX_("rodTalk",d3,d6,0d,b2));
	outFields->push(HX_("rodNum",7f,72,7e,c0));
	outFields->push(HX_("rodNumText",cc,16,56,dd));
	outFields->push(HX_("bananaCoin",96,8c,07,e1));
	outFields->push(HX_("appleCoin",0b,1c,90,a7));
	outFields->push(HX_("dexCoin",08,53,21,e5));
	outFields->push(HX_("starterPrize",c3,8a,ba,fc));
	outFields->push(HX_("dexStarterPirze",ec,df,c7,71));
	outFields->push(HX_("starterTalk",1b,62,db,80));
	outFields->push(HX_("buyStarter",a9,22,1b,10));
	outFields->push(HX_("starterInStreet",37,ae,c8,7d));
	outFields->push(HX_("investNum",51,55,9e,29));
	outFields->push(HX_("investNumText",9e,ca,34,3b));
	outFields->push(HX_("enemyNameText",00,43,f5,53));
	outFields->push(HX_("diamondText",21,9a,55,4c));
	outFields->push(HX_("diamondUiText",95,2b,a8,dc));
	outFields->push(HX_("diamond",54,67,1a,5c));
	outFields->push(HX_("alpha",5e,a7,96,21));
	outFields->push(HX_("wait",75,5a,f2,4e));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo CombatHUD_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Enemy */ ,(int)offsetof(CombatHUD_obj,enemy),HX_("enemy",48,12,7b,70)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CombatHUD_obj,background),HX_("background",ee,93,1d,26)},
	{::hx::fsObject /*  ::Enemy */ ,(int)offsetof(CombatHUD_obj,enemySprite),HX_("enemySprite",6d,48,48,ab)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(CombatHUD_obj,check),HX_("check",c8,98,b6,45)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(CombatHUD_obj,next),HX_("next",f3,84,02,49)},
	{::hx::fsObject /*  ::Pointer */ ,(int)offsetof(CombatHUD_obj,pointer),HX_("pointer",bd,c0,21,51)},
	{::hx::fsObject /*  ::haxe::ds::EnumValueMap */ ,(int)offsetof(CombatHUD_obj,choices),HX_("choices",f2,b5,17,d9)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CombatHUD_obj,ynCho),HX_("ynCho",55,db,64,f4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CombatHUD_obj,pointerRight),HX_("pointerRight",df,ed,8a,8a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CombatHUD_obj,pointerLeft),HX_("pointerLeft",64,97,46,ea)},
	{::hx::fsObject /*  ::Outcome */ ,(int)offsetof(CombatHUD_obj,outcome),HX_("outcome",92,b8,cf,db)},
	{::hx::fsInt,(int)offsetof(CombatHUD_obj,state),HX_("state",11,76,0b,84)},
	{::hx::fsObject /*  ::Text */ ,(int)offsetof(CombatHUD_obj,combatText),HX_("combatText",01,33,17,e4)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(CombatHUD_obj,dilog_boxes),HX_("dilog_boxes",d9,d5,2d,6e)},
	{::hx::fsString,(int)offsetof(CombatHUD_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsBool,(int)offsetof(CombatHUD_obj,txt),HX_("txt",70,6e,58,00)},
	{::hx::fsBool,(int)offsetof(CombatHUD_obj,textIn),HX_("textIn",f2,51,88,d8)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CombatHUD_obj,enterCur),HX_("enterCur",48,0f,8c,43)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(CombatHUD_obj,nftStyle),HX_("nftStyle",55,4a,eb,9d)},
	{::hx::fsInt,(int)offsetof(CombatHUD_obj,nftStyleNum),HX_("nftStyleNum",f1,ae,29,c9)},
	{::hx::fsBool,(int)offsetof(CombatHUD_obj,rodTalk),HX_("rodTalk",d3,d6,0d,b2)},
	{::hx::fsInt,(int)offsetof(CombatHUD_obj,rodNum),HX_("rodNum",7f,72,7e,c0)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CombatHUD_obj,rodNumText),HX_("rodNumText",cc,16,56,dd)},
	{::hx::fsFloat,(int)offsetof(CombatHUD_obj,bananaCoin),HX_("bananaCoin",96,8c,07,e1)},
	{::hx::fsFloat,(int)offsetof(CombatHUD_obj,appleCoin),HX_("appleCoin",0b,1c,90,a7)},
	{::hx::fsFloat,(int)offsetof(CombatHUD_obj,dexCoin),HX_("dexCoin",08,53,21,e5)},
	{::hx::fsInt,(int)offsetof(CombatHUD_obj,starterPrize),HX_("starterPrize",c3,8a,ba,fc)},
	{::hx::fsInt,(int)offsetof(CombatHUD_obj,dexStarterPirze),HX_("dexStarterPirze",ec,df,c7,71)},
	{::hx::fsBool,(int)offsetof(CombatHUD_obj,starterTalk),HX_("starterTalk",1b,62,db,80)},
	{::hx::fsBool,(int)offsetof(CombatHUD_obj,buyStarter),HX_("buyStarter",a9,22,1b,10)},
	{::hx::fsBool,(int)offsetof(CombatHUD_obj,starterInStreet),HX_("starterInStreet",37,ae,c8,7d)},
	{::hx::fsInt,(int)offsetof(CombatHUD_obj,investNum),HX_("investNum",51,55,9e,29)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CombatHUD_obj,investNumText),HX_("investNumText",9e,ca,34,3b)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CombatHUD_obj,enemyNameText),HX_("enemyNameText",00,43,f5,53)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CombatHUD_obj,diamondText),HX_("diamondText",21,9a,55,4c)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(CombatHUD_obj,diamondUiText),HX_("diamondUiText",95,2b,a8,dc)},
	{::hx::fsFloat,(int)offsetof(CombatHUD_obj,diamond),HX_("diamond",54,67,1a,5c)},
	{::hx::fsFloat,(int)offsetof(CombatHUD_obj,alpha),HX_("alpha",5e,a7,96,21)},
	{::hx::fsBool,(int)offsetof(CombatHUD_obj,wait),HX_("wait",75,5a,f2,4e)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *CombatHUD_obj_sStaticStorageInfo = 0;
#endif

static ::String CombatHUD_obj_sMemberFields[] = {
	HX_("enemy",48,12,7b,70),
	HX_("background",ee,93,1d,26),
	HX_("enemySprite",6d,48,48,ab),
	HX_("check",c8,98,b6,45),
	HX_("next",f3,84,02,49),
	HX_("pointer",bd,c0,21,51),
	HX_("choices",f2,b5,17,d9),
	HX_("ynCho",55,db,64,f4),
	HX_("pointerRight",df,ed,8a,8a),
	HX_("pointerLeft",64,97,46,ea),
	HX_("outcome",92,b8,cf,db),
	HX_("state",11,76,0b,84),
	HX_("combatText",01,33,17,e4),
	HX_("dilog_boxes",d9,d5,2d,6e),
	HX_("name",4b,72,ff,48),
	HX_("txt",70,6e,58,00),
	HX_("textIn",f2,51,88,d8),
	HX_("enterCur",48,0f,8c,43),
	HX_("nftStyle",55,4a,eb,9d),
	HX_("nftStyleNum",f1,ae,29,c9),
	HX_("rodTalk",d3,d6,0d,b2),
	HX_("rodNum",7f,72,7e,c0),
	HX_("rodNumText",cc,16,56,dd),
	HX_("bananaCoin",96,8c,07,e1),
	HX_("appleCoin",0b,1c,90,a7),
	HX_("dexCoin",08,53,21,e5),
	HX_("starterPrize",c3,8a,ba,fc),
	HX_("dexStarterPirze",ec,df,c7,71),
	HX_("starterTalk",1b,62,db,80),
	HX_("buyStarter",a9,22,1b,10),
	HX_("starterInStreet",37,ae,c8,7d),
	HX_("investNum",51,55,9e,29),
	HX_("investNumText",9e,ca,34,3b),
	HX_("enemyNameText",00,43,f5,53),
	HX_("diamondText",21,9a,55,4c),
	HX_("diamondUiText",95,2b,a8,dc),
	HX_("diamond",54,67,1a,5c),
	HX_("alpha",5e,a7,96,21),
	HX_("wait",75,5a,f2,4e),
	HX_("initCombat",64,6b,6b,cb),
	HX_("finishFadeIn",34,81,24,e2),
	HX_("updateKeyboardInput",1a,32,78,25),
	HX_("lrPointer",d7,06,c2,94),
	HX_("updateAlpha",95,10,2f,07),
	HX_("finishFadeOut",5f,20,d1,fd),
	HX_("update",09,86,05,87),
	HX_("doneResultsIn",99,11,90,12),
	::String(null()) };

::hx::Class CombatHUD_obj::__mClass;

void CombatHUD_obj::__register()
{
	CombatHUD_obj _hx_dummy;
	CombatHUD_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("CombatHUD",c3,d4,6c,0c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(CombatHUD_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< CombatHUD_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CombatHUD_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CombatHUD_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

