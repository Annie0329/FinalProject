// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_Text
#include <Text.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTypeText
#include <flixel/addons/text/FlxTypeText.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard__FlxKey_FlxKey_Impl_
#include <flixel/input/keyboard/_FlxKey/FlxKey_Impl_.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_StringMap
#include <haxe/ds/StringMap.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_06e1ad076737d8b4_6_new,"Text","new",0x108f843f,"Text.new","Text.hx",6,0x6bfc0811)
HX_LOCAL_STACK_FRAME(_hx_pos_06e1ad076737d8b4_42_show,"Text","show",0x7054843e,"Text.show","Text.hx",42,0x6bfc0811)
HX_LOCAL_STACK_FRAME(_hx_pos_06e1ad076737d8b4_30_show,"Text","show",0x7054843e,"Text.show","Text.hx",30,0x6bfc0811)
HX_LOCAL_STACK_FRAME(_hx_pos_06e1ad076737d8b4_48_update,"Text","update",0xf242478a,"Text.update","Text.hx",48,0x6bfc0811)
HX_LOCAL_STACK_FRAME(_hx_pos_06e1ad076737d8b4_58_updateEnter,"Text","updateEnter",0x2610012e,"Text.updateEnter","Text.hx",58,0x6bfc0811)
static const int _hx_array_data_37d2f8cd_5[] = {
	(int)13,(int)32,
};
HX_LOCAL_STACK_FRAME(_hx_pos_06e1ad076737d8b4_71_updateEnter,"Text","updateEnter",0x2610012e,"Text.updateEnter","Text.hx",71,0x6bfc0811)

void Text_obj::__construct(Float X,Float Y,int Width,::String Text,int Size,bool EmbeddedFont){
            	HX_STACKFRAME(&_hx_pos_06e1ad076737d8b4_6_new)
HXLINE(  16)		this->over = false;
HXLINE(  14)		this->textRunDone = false;
HXLINE(  12)		this->txt = true;
HXLINE(   8)		this->i = 1;
HXLINE(  20)		super::__construct(X,Y,Width,Text,Size,EmbeddedFont);
HXLINE(  21)		this->set_font(HX_("assets/data/silver.ttf",3e,fd,5b,64));
HXLINE(  22)		this->sounds = ::Array_obj< ::Dynamic>::__new(1)->init(0,::flixel::FlxG_obj::sound->load(HX_("assets/sound/typing.ogg",a4,35,75,3f),null(),null(),null(),null(),null(),null(),null(),null()));
HXLINE(  23)		this->finishSounds = true;
HXLINE(  24)		this->delay = ((Float)0.05);
HXLINE(  25)		int _hx_tmp;
HXDLIN(  25)		::String s = HX_("X",58,00,00,00);
HXDLIN(  25)		s = s.toUpperCase();
HXDLIN(  25)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s)) {
HXLINE(  25)			_hx_tmp = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s);
            		}
            		else {
HXLINE(  25)			_hx_tmp = -1;
            		}
HXDLIN(  25)		::String s1 = HX_("SHIFT",62,24,11,fa);
HXDLIN(  25)		s1 = s1.toUpperCase();
HXDLIN(  25)		int _hx_tmp1;
HXDLIN(  25)		if (::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->exists(s1)) {
HXLINE(  25)			_hx_tmp1 = ::flixel::input::keyboard::_FlxKey::FlxKey_Impl__obj::fromStringMap->get_int(s1);
            		}
            		else {
HXLINE(  25)			_hx_tmp1 = -1;
            		}
HXDLIN(  25)		this->skipKeys = ::Array_obj< int >::__new(2)->init(0,_hx_tmp)->init(1,_hx_tmp1);
            	}

Dynamic Text_obj::__CreateEmpty() { return new Text_obj; }

void *Text_obj::_hx_vtable = 0;

Dynamic Text_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Text_obj > _hx_result = new Text_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5]);
	return _hx_result;
}

bool Text_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x55ec573d) {
		if (inClassId<=(int)0x2c01639b) {
			if (inClassId<=(int)0x0c25eef1) {
				return inClassId==(int)0x00000001 || inClassId==(int)0x0c25eef1;
			} else {
				return inClassId==(int)0x2c01639b;
			}
		} else {
			return inClassId==(int)0x55ec573d;
		}
	} else {
		if (inClassId<=(int)0x7ccf8994) {
			return inClassId==(int)0x752f90b6 || inClassId==(int)0x7ccf8994;
		} else {
			return inClassId==(int)0x7dab0655;
		}
	}
}

void Text_obj::show(::String name,bool txt){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Text,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_06e1ad076737d8b4_42_show)
HXLINE(  42)			_gthis->textRunDone = true;
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_06e1ad076737d8b4_30_show)
HXDLIN(  30)		 ::Text _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  31)		::Array< ::String > _hx_tmp;
HXDLIN(  31)		if (txt) {
HXLINE(  31)			_hx_tmp = ::openfl::utils::Assets_obj::getText(name).split(HX_(":",3a,00,00,00));
            		}
            		else {
HXLINE(  31)			_hx_tmp = (this->dilog_boxes = name.split(HX_(":",3a,00,00,00)));
            		}
HXDLIN(  31)		this->dilog_boxes = _hx_tmp;
HXLINE(  32)		this->i = 1;
HXLINE(  34)		this->set_active(true);
HXLINE(  35)		this->set_visible(true);
HXLINE(  36)		this->over = false;
HXLINE(  38)		this->textRunDone = false;
HXLINE(  39)		this->resetText(this->dilog_boxes->__get(this->i));
HXLINE(  40)		this->start(null(),false,false,null(), ::Dynamic(new _hx_Closure_0(_gthis)));
            	}


HX_DEFINE_DYNAMIC_FUNC2(Text_obj,show,(void))

void Text_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_06e1ad076737d8b4_48_update)
HXLINE(  49)		this->super::update(elapsed);
HXLINE(  50)		this->updateEnter();
HXLINE(  52)		bool _hx_tmp;
HXDLIN(  52)		if (::hx::IsNotNull( this->dilog_boxes )) {
HXLINE(  52)			_hx_tmp = (this->i >= (this->dilog_boxes->length - 1));
            		}
            		else {
HXLINE(  52)			_hx_tmp = false;
            		}
HXDLIN(  52)		if (_hx_tmp) {
HXLINE(  53)			this->over = true;
            		}
            	}


void Text_obj::updateEnter(){
            	HX_STACKFRAME(&_hx_pos_06e1ad076737d8b4_58_updateEnter)
HXDLIN(  58)		 ::Text _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  59)		bool enter = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_37d2f8cd_5,2),-1);
HXLINE(  62)		bool _hx_tmp;
HXDLIN(  62)		if (enter) {
HXLINE(  62)			_hx_tmp = this->textRunDone;
            		}
            		else {
HXLINE(  62)			_hx_tmp = false;
            		}
HXDLIN(  62)		if (_hx_tmp) {
HXLINE(  64)			this->i++;
HXLINE(  65)			if ((this->i < this->dilog_boxes->length)) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Text,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_STACKFRAME(&_hx_pos_06e1ad076737d8b4_71_updateEnter)
HXLINE(  71)					_gthis->textRunDone = true;
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  67)				this->textRunDone = false;
HXLINE(  68)				this->resetText(this->dilog_boxes->__get(this->i));
HXLINE(  69)				this->start(null(),false,false,null(), ::Dynamic(new _hx_Closure_0(_gthis)));
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Text_obj,updateEnter,(void))


::hx::ObjectPtr< Text_obj > Text_obj::__new(Float X,Float Y,int Width,::String Text,int Size,bool EmbeddedFont) {
	::hx::ObjectPtr< Text_obj > __this = new Text_obj();
	__this->__construct(X,Y,Width,Text,Size,EmbeddedFont);
	return __this;
}

::hx::ObjectPtr< Text_obj > Text_obj::__alloc(::hx::Ctx *_hx_ctx,Float X,Float Y,int Width,::String Text,int Size,bool EmbeddedFont) {
	Text_obj *__this = (Text_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Text_obj), true, "Text"));
	*(void **)__this = Text_obj::_hx_vtable;
	__this->__construct(X,Y,Width,Text,Size,EmbeddedFont);
	return __this;
}

Text_obj::Text_obj()
{
}

void Text_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Text);
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_MEMBER_NAME(dilog_boxes,"dilog_boxes");
	HX_MARK_MEMBER_NAME(txt,"txt");
	HX_MARK_MEMBER_NAME(textRunDone,"textRunDone");
	HX_MARK_MEMBER_NAME(over,"over");
	 ::flixel::addons::text::FlxTypeText_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Text_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(i,"i");
	HX_VISIT_MEMBER_NAME(dilog_boxes,"dilog_boxes");
	HX_VISIT_MEMBER_NAME(txt,"txt");
	HX_VISIT_MEMBER_NAME(textRunDone,"textRunDone");
	HX_VISIT_MEMBER_NAME(over,"over");
	 ::flixel::addons::text::FlxTypeText_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Text_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { return ::hx::Val( i ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"txt") ) { return ::hx::Val( txt ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"over") ) { return ::hx::Val( over ); }
		if (HX_FIELD_EQ(inName,"show") ) { return ::hx::Val( show_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"dilog_boxes") ) { return ::hx::Val( dilog_boxes ); }
		if (HX_FIELD_EQ(inName,"textRunDone") ) { return ::hx::Val( textRunDone ); }
		if (HX_FIELD_EQ(inName,"updateEnter") ) { return ::hx::Val( updateEnter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Text_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"txt") ) { txt=inValue.Cast< bool >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"over") ) { over=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"dilog_boxes") ) { dilog_boxes=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textRunDone") ) { textRunDone=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Text_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("i",69,00,00,00));
	outFields->push(HX_("dilog_boxes",d9,d5,2d,6e));
	outFields->push(HX_("txt",70,6e,58,00));
	outFields->push(HX_("textRunDone",40,00,2b,ab));
	outFields->push(HX_("over",54,91,b8,49));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Text_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Text_obj,i),HX_("i",69,00,00,00)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Text_obj,dilog_boxes),HX_("dilog_boxes",d9,d5,2d,6e)},
	{::hx::fsBool,(int)offsetof(Text_obj,txt),HX_("txt",70,6e,58,00)},
	{::hx::fsBool,(int)offsetof(Text_obj,textRunDone),HX_("textRunDone",40,00,2b,ab)},
	{::hx::fsBool,(int)offsetof(Text_obj,over),HX_("over",54,91,b8,49)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Text_obj_sStaticStorageInfo = 0;
#endif

static ::String Text_obj_sMemberFields[] = {
	HX_("i",69,00,00,00),
	HX_("dilog_boxes",d9,d5,2d,6e),
	HX_("txt",70,6e,58,00),
	HX_("textRunDone",40,00,2b,ab),
	HX_("over",54,91,b8,49),
	HX_("show",fd,d4,52,4c),
	HX_("update",09,86,05,87),
	HX_("updateEnter",4f,d6,1e,56),
	::String(null()) };

::hx::Class Text_obj::__mClass;

void Text_obj::__register()
{
	Text_obj _hx_dummy;
	Text_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Text",cd,f8,d2,37);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Text_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Text_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Text_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Text_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

