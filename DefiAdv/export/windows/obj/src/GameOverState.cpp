// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_GameOverState
#include <GameOverState.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_MinerState
#include <MinerState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Pointer
#include <Pointer.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StreetState
#include <StreetState.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTypeText
#include <flixel/addons/text/FlxTypeText.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_11_new,"GameOverState","new",0x0e4d841d,"GameOverState.new","GameOverState.hx",11,0xd0ff2df3)
static const ::String _hx_array_data_87a031ab_1[] = {
	HX_("YES",07,c5,43,00),HX_("NO",41,44,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_51_create,"GameOverState","create",0x7dd4e75f,"GameOverState.create","GameOverState.hx",51,0xd0ff2df3)
HX_LOCAL_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_50_create,"GameOverState","create",0x7dd4e75f,"GameOverState.create","GameOverState.hx",50,0xd0ff2df3)
HX_LOCAL_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_23_create,"GameOverState","create",0x7dd4e75f,"GameOverState.create","GameOverState.hx",23,0xd0ff2df3)
HX_LOCAL_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_61_update,"GameOverState","update",0x88cb066c,"GameOverState.update","GameOverState.hx",61,0xd0ff2df3)
static const int _hx_array_data_87a031ab_7[] = {
	(int)13,
};
HX_LOCAL_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_93_update,"GameOverState","update",0x88cb066c,"GameOverState.update","GameOverState.hx",93,0xd0ff2df3)
HX_LOCAL_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_73_update,"GameOverState","update",0x88cb066c,"GameOverState.update","GameOverState.hx",73,0xd0ff2df3)
HX_LOCAL_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_101_updateEsc,"GameOverState","updateEsc",0x06f48529,"GameOverState.updateEsc","GameOverState.hx",101,0xd0ff2df3)
static const int _hx_array_data_87a031ab_11[] = {
	(int)115,
};
HX_LOCAL_STACK_FRAME(_hx_pos_f1e39ddd2cdbc587_107_updateEsc,"GameOverState","updateEsc",0x06f48529,"GameOverState.updateEsc","GameOverState.hx",107,0xd0ff2df3)

void GameOverState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_11_new)
HXLINE(  20)		this->loadsave = false;
HXLINE(  17)		this->gameOverCho = ::Array_obj< ::String >::fromData( _hx_array_data_87a031ab_1,2);
HXLINE(  11)		super::__construct(MaxSize);
            	}

Dynamic GameOverState_obj::__CreateEmpty() { return new GameOverState_obj; }

void *GameOverState_obj::_hx_vtable = 0;

Dynamic GameOverState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< GameOverState_obj > _hx_result = new GameOverState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool GameOverState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x63e746eb) {
		if (inClassId<=(int)0x62817b24) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x62817b24;
		} else {
			return inClassId==(int)0x63e746eb;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void GameOverState_obj::create(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::GameOverState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::GameOverState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_51_create)
HXLINE(  52)				_gthis->pointer->set_visible(true);
HXLINE(  53)				_gthis->yes->set_visible(true);
HXLINE(  54)				_gthis->no->set_visible(true);
            			}
            			HX_END_LOCAL_FUNC0((void))

            			HX_GC_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_50_create)
HXLINE(  50)			_gthis->continueText->start(((Float)0.1),false,false,null(), ::Dynamic(new _hx_Closure_0(_gthis)));
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_GC_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_23_create)
HXDLIN(  23)		 ::GameOverState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  24)		this->gameOverTitle =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("GameOver",86,4e,90,8f),132,null());
HXLINE(  25)		this->gameOverTitle->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  26)		this->add(this->gameOverTitle);
HXLINE(  28)		Float _hx_tmp = this->gameOverTitle->y;
HXDLIN(  28)		this->continueText =  ::flixel::addons::text::FlxTypeText_obj::__alloc( HX_CTX ,( (Float)(0) ),((_hx_tmp + this->gameOverTitle->get_height()) + 300),600,HX_("continue?",f8,79,fb,5d),60,null());
HXLINE(  29)		this->continueText->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  30)		this->add(this->continueText);
HXLINE(  32)		this->yes =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(4) )),((( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(4) )) * ( (Float)(3) )),0,HX_("YES",07,c5,43,00),60,null());
HXLINE(  33)		this->add(this->yes);
HXLINE(  34)		this->yes->set_visible(false);
HXLINE(  36)		this->no =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->yes->x + (( (Float)(::flixel::FlxG_obj::width) ) / ( (Float)(2) ))),this->yes->y,0,HX_("NO",41,44,00,00),60,null());
HXLINE(  37)		this->add(this->no);
HXLINE(  38)		this->no->set_visible(false);
HXLINE(  40)		this->pointer =  ::Pointer_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  41)		 ::Pointer _hx_tmp1 = this->pointer;
HXDLIN(  41)		Float _hx_tmp2 = (this->yes->x - ( (Float)(60) ));
HXDLIN(  41)		Float _hx_tmp3 = this->yes->y;
HXDLIN(  41)		Float _hx_tmp4 = ((_hx_tmp3 + (this->yes->get_height() / ( (Float)(2) ))) - ( (Float)(30) ));
HXDLIN(  41)		int _hx_tmp5 = ::Std_obj::_hx_int((this->no->x - this->yes->x));
HXDLIN(  41)		_hx_tmp1->setPointer(_hx_tmp2,_hx_tmp4,_hx_tmp5,this->gameOverCho,HX_("lr",86,5e,00,00));
HXLINE(  42)		this->add(this->pointer);
HXLINE(  43)		this->pointer->set_visible(false);
HXLINE(  45)		this->save =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE(  46)		this->save->bind(HX_("DefiAdv",6f,39,37,6e),null());
HXLINE(  48)		::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),true, ::Dynamic(new _hx_Closure_1(_gthis)),null());
HXLINE(  57)		this->super::create();
            	}


void GameOverState_obj::update(Float elapsed){
            	HX_GC_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_61_update)
HXDLIN(  61)		 ::GameOverState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  62)		this->super::update(elapsed);
HXLINE(  63)		this->updateEsc();
HXLINE(  64)		bool enter = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_87a031ab_7,1),-1);
HXLINE(  65)		if (enter) {
HXLINE(  67)			::String _hx_switch_0 = this->pointer->selected;
            			if (  (_hx_switch_0==HX_("NO",41,44,00,00)) ){
            				HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_93_update)
HXLINE(  93)					 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN(  93)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  93)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE(  91)				::flixel::FlxG_obj::camera->fade(-16777216,((Float).33),false, ::Dynamic(new _hx_Closure_0()),null());
HXDLIN(  91)				goto _hx_goto_5;
            			}
            			if (  (_hx_switch_0==HX_("YES",07,c5,43,00)) ){
HXLINE(  71)				if (::hx::IsNotNull( this->save->data->__Field(HX_("bananaValue",cc,cc,f1,ec),::hx::paccDynamic) )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::GameOverState,_gthis) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_73_update)
HXLINE(  74)						_gthis->loadsave = true;
HXLINE(  75)						if (::hx::IsEq( _gthis->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic),HX_("miner",7f,72,68,08) )) {
HXLINE(  76)							 ::flixel::FlxState nextState =  ::MinerState_obj::__alloc( HX_CTX ,null());
HXDLIN(  76)							if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  76)								::flixel::FlxG_obj::game->_requestedState = nextState;
            							}
            						}
            						else {
HXLINE(  77)							if (::hx::IsEq( _gthis->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic),HX_("monument",47,ea,c5,03) )) {
HXLINE(  78)								 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,_gthis->loadsave);
HXDLIN(  78)								if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  78)									::flixel::FlxG_obj::game->_requestedState = nextState;
            								}
            							}
            							else {
HXLINE(  79)								if (::hx::IsEq( _gthis->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic),HX_("street",03,18,2d,11) )) {
HXLINE(  80)									 ::flixel::FlxState nextState =  ::StreetState_obj::__alloc( HX_CTX ,null());
HXDLIN(  80)									if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  80)										::flixel::FlxG_obj::game->_requestedState = nextState;
            									}
            								}
            							}
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE(  72)					::flixel::FlxG_obj::camera->fade(-16777216,((Float).33),false, ::Dynamic(new _hx_Closure_1(_gthis)),null());
            				}
            				else {
HXLINE(  85)					this->loadsave = false;
HXLINE(  86)					{
HXLINE(  86)						 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,this->loadsave);
HXDLIN(  86)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE(  86)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            				}
HXLINE(  71)				goto _hx_goto_5;
            			}
            			_hx_goto_5:;
            		}
            	}


void GameOverState_obj::updateEsc(){
            	HX_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_101_updateEsc)
HXLINE( 102)		bool f4 = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_87a031ab_11,1),-1);
HXLINE( 103)		if (f4) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_f1e39ddd2cdbc587_107_updateEsc)
HXLINE( 107)				 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN( 107)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 107)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 105)			::flixel::FlxG_obj::camera->fade(-16777216,((Float).33),false, ::Dynamic(new _hx_Closure_0()),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(GameOverState_obj,updateEsc,(void))


::hx::ObjectPtr< GameOverState_obj > GameOverState_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< GameOverState_obj > __this = new GameOverState_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< GameOverState_obj > GameOverState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	GameOverState_obj *__this = (GameOverState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(GameOverState_obj), true, "GameOverState"));
	*(void **)__this = GameOverState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

GameOverState_obj::GameOverState_obj()
{
}

void GameOverState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(GameOverState);
	HX_MARK_MEMBER_NAME(gameOverTitle,"gameOverTitle");
	HX_MARK_MEMBER_NAME(continueText,"continueText");
	HX_MARK_MEMBER_NAME(yes,"yes");
	HX_MARK_MEMBER_NAME(no,"no");
	HX_MARK_MEMBER_NAME(gameOverCho,"gameOverCho");
	HX_MARK_MEMBER_NAME(pointer,"pointer");
	HX_MARK_MEMBER_NAME(save,"save");
	HX_MARK_MEMBER_NAME(loadsave,"loadsave");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void GameOverState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(gameOverTitle,"gameOverTitle");
	HX_VISIT_MEMBER_NAME(continueText,"continueText");
	HX_VISIT_MEMBER_NAME(yes,"yes");
	HX_VISIT_MEMBER_NAME(no,"no");
	HX_VISIT_MEMBER_NAME(gameOverCho,"gameOverCho");
	HX_VISIT_MEMBER_NAME(pointer,"pointer");
	HX_VISIT_MEMBER_NAME(save,"save");
	HX_VISIT_MEMBER_NAME(loadsave,"loadsave");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val GameOverState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"no") ) { return ::hx::Val( no ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"yes") ) { return ::hx::Val( yes ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"save") ) { return ::hx::Val( save ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pointer") ) { return ::hx::Val( pointer ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"loadsave") ) { return ::hx::Val( loadsave ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"updateEsc") ) { return ::hx::Val( updateEsc_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gameOverCho") ) { return ::hx::Val( gameOverCho ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"continueText") ) { return ::hx::Val( continueText ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gameOverTitle") ) { return ::hx::Val( gameOverTitle ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val GameOverState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"no") ) { no=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"yes") ) { yes=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"save") ) { save=inValue.Cast<  ::flixel::util::FlxSave >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"pointer") ) { pointer=inValue.Cast<  ::Pointer >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"loadsave") ) { loadsave=inValue.Cast< bool >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"gameOverCho") ) { gameOverCho=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"continueText") ) { continueText=inValue.Cast<  ::flixel::addons::text::FlxTypeText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"gameOverTitle") ) { gameOverTitle=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void GameOverState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("gameOverTitle",52,81,df,cb));
	outFields->push(HX_("continueText",b4,98,d1,fd));
	outFields->push(HX_("yes",27,29,5c,00));
	outFields->push(HX_("no",41,60,00,00));
	outFields->push(HX_("gameOverCho",64,a3,a7,8d));
	outFields->push(HX_("pointer",bd,c0,21,51));
	outFields->push(HX_("save",3d,8b,4d,4c));
	outFields->push(HX_("loadsave",63,30,14,d2));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo GameOverState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(GameOverState_obj,gameOverTitle),HX_("gameOverTitle",52,81,df,cb)},
	{::hx::fsObject /*  ::flixel::addons::text::FlxTypeText */ ,(int)offsetof(GameOverState_obj,continueText),HX_("continueText",b4,98,d1,fd)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(GameOverState_obj,yes),HX_("yes",27,29,5c,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(GameOverState_obj,no),HX_("no",41,60,00,00)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(GameOverState_obj,gameOverCho),HX_("gameOverCho",64,a3,a7,8d)},
	{::hx::fsObject /*  ::Pointer */ ,(int)offsetof(GameOverState_obj,pointer),HX_("pointer",bd,c0,21,51)},
	{::hx::fsObject /*  ::flixel::util::FlxSave */ ,(int)offsetof(GameOverState_obj,save),HX_("save",3d,8b,4d,4c)},
	{::hx::fsBool,(int)offsetof(GameOverState_obj,loadsave),HX_("loadsave",63,30,14,d2)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *GameOverState_obj_sStaticStorageInfo = 0;
#endif

static ::String GameOverState_obj_sMemberFields[] = {
	HX_("gameOverTitle",52,81,df,cb),
	HX_("continueText",b4,98,d1,fd),
	HX_("yes",27,29,5c,00),
	HX_("no",41,60,00,00),
	HX_("gameOverCho",64,a3,a7,8d),
	HX_("pointer",bd,c0,21,51),
	HX_("save",3d,8b,4d,4c),
	HX_("loadsave",63,30,14,d2),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	HX_("updateEsc",ac,e5,d9,82),
	::String(null()) };

::hx::Class GameOverState_obj::__mClass;

void GameOverState_obj::__register()
{
	GameOverState_obj _hx_dummy;
	GameOverState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("GameOverState",ab,31,a0,87);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(GameOverState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< GameOverState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = GameOverState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = GameOverState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

