// Generated by Haxe 4.2.1+bf9ff69
#ifndef INCLUDED_PlayState
#define INCLUDED_PlayState

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
HX_DECLARE_CLASS0(Bag)
HX_DECLARE_CLASS0(CombatHUD)
HX_DECLARE_CLASS0(Dia)
HX_DECLARE_CLASS0(Enemy)
HX_DECLARE_CLASS0(EnemyType)
HX_DECLARE_CLASS0(NPC)
HX_DECLARE_CLASS0(NpcType)
HX_DECLARE_CLASS0(PlayState)
HX_DECLARE_CLASS0(Player)
HX_DECLARE_CLASS0(Tip)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS4(flixel,addons,editors,ogmo,FlxOgmo3Loader)
HX_DECLARE_CLASS4(flixel,addons,effects,chainable,FlxEffectSprite)
HX_DECLARE_CLASS4(flixel,addons,effects,chainable,FlxRainbowEffect)
HX_DECLARE_CLASS4(flixel,addons,effects,chainable,IFlxEffect)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,_hx_system,FlxSound)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,tile,FlxBaseTilemap)
HX_DECLARE_CLASS2(flixel,tile,FlxTilemap)
HX_DECLARE_CLASS2(flixel,util,FlxSave)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES PlayState_obj : public  ::flixel::FlxState_obj
{
	public:
		typedef  ::flixel::FlxState_obj super;
		typedef PlayState_obj OBJ_;
		PlayState_obj();

	public:
		enum { _hx_ClassId = 0x0a05f89d };

		void __construct(bool loadsave);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="PlayState")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"PlayState"); }
		static ::hx::ObjectPtr< PlayState_obj > __new(bool loadsave);
		static ::hx::ObjectPtr< PlayState_obj > __alloc(::hx::Ctx *_hx_ctx,bool loadsave);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~PlayState_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("PlayState",5d,83,c2,46); }

		 ::Player player;
		 ::Tip tip;
		 ::Bag bag;
		 ::flixel::_hx_system::FlxSound cancel;
		 ::flixel::_hx_system::FlxSound bananaSound;
		 ::flixel::_hx_system::FlxSound touchEnemy;
		 ::flixel::_hx_system::FlxSound openBag;
		 ::flixel::_hx_system::FlxSound doorTele;
		 ::flixel::_hx_system::FlxSound saveNoise;
		 ::Dia dia;
		::String diaUpDown;
		::String name;
		bool txt;
		bool talkYes;
		 ::flixel::group::FlxTypedGroup banana;
		bool twentyBanana;
		 ::flixel::group::FlxTypedGroup enemy;
		 ::EnemyType enemyType;
		bool inCombat;
		 ::CombatHUD combatHud;
		bool enemyFlicker;
		bool shibaYes;
		bool nftYes;
		bool seePlayerThen;
		bool seePlayerNow;
		 ::flixel::group::FlxTypedGroup npc;
		 ::NpcType npcType;
		 ::flixel::FlxSprite dogeYes;
		 ::flixel::FlxSprite srYes;
		 ::flixel::FlxSprite sgYes;
		 ::flixel::FlxSprite sbYes;
		 ::flixel::FlxSprite sblackYes;
		 ::flixel::FlxSprite mingYes;
		 ::flixel::FlxSprite stoneYes;
		 ::flixel::FlxSprite shop;
		 ::flixel::FlxSprite minerDoor;
		bool minerOpen;
		bool minerYes;
		bool lakeMoney;
		int talkCounter;
		 ::flixel::addons::editors::ogmo::FlxOgmo3Loader map;
		 ::flixel::tile::FlxTilemap through;
		 ::flixel::tile::FlxTilemap walls;
		 ::flixel::tile::FlxTilemap road;
		 ::flixel::tile::FlxTilemap ground;
		 ::flixel::group::FlxTypedGroup sea;
		 ::flixel::FlxSprite treeBar;
		 ::flixel::addons::effects::chainable::FlxEffectSprite weirdTreeBar;
		 ::flixel::addons::effects::chainable::FlxRainbowEffect treeBarWave;
		bool loadsave;
		bool getBag;
		 ::flixel::text::FlxText ufo;
		 ::flixel::util::FlxSave save;
		void create();

		void placeEntities( ::Dynamic entity);
		::Dynamic placeEntities_dyn();

		void saveFile();
		::Dynamic saveFile_dyn();

		void loadFile();
		::Dynamic loadFile_dyn();

		void update(Float elapsed);

		void updateMission();
		::Dynamic updateMission_dyn();

		void updateInCombat();
		::Dynamic updateInCombat_dyn();

		void playerTouchEnemy( ::Player player, ::Enemy enemy);
		::Dynamic playerTouchEnemy_dyn();

		void checkEnemyVision( ::Enemy enemy);
		::Dynamic checkEnemyVision_dyn();

		void npcTalk( ::Player player, ::NPC npc);
		::Dynamic npcTalk_dyn();

		void getBanana( ::Player player, ::flixel::FlxSprite banana);
		::Dynamic getBanana_dyn();

		void goToMiner( ::Player player, ::flixel::FlxSprite minerDoor);
		::Dynamic goToMiner_dyn();

		void shopOpen( ::Player player, ::flixel::FlxSprite shop);
		::Dynamic shopOpen_dyn();

		void updateTalking();
		::Dynamic updateTalking_dyn();

		void updateWhenDiaInvisible();
		::Dynamic updateWhenDiaInvisible_dyn();

		void playerUpDown();
		::Dynamic playerUpDown_dyn();

		void updateF4();
		::Dynamic updateF4_dyn();

		void updateC();
		::Dynamic updateC_dyn();

};


#endif /* INCLUDED_PlayState */ 
