// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_9_new,"Player","new",0x8d5554f3,"Player.new","Player.hx",9,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_1[] = {
	(int)3,(int)4,(int)3,(int)5,(int)6,(int)7,(int)6,(int)5,
};
static const int _hx_array_data_6c4d5f81_2[] = {
	(int)9,(int)8,(int)10,(int)8,
};
static const int _hx_array_data_6c4d5f81_3[] = {
	(int)1,(int)0,(int)2,(int)0,
};
static const int _hx_array_data_6c4d5f81_4[] = {
	(int)3,(int)4,(int)3,(int)5,(int)6,(int)7,(int)6,(int)5,
};
static const int _hx_array_data_6c4d5f81_5[] = {
	(int)9,(int)8,(int)10,(int)8,
};
static const int _hx_array_data_6c4d5f81_6[] = {
	(int)1,(int)0,(int)2,(int)0,
};
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_39_updateMovement,"Player","updateMovement",0xab7266a5,"Player.updateMovement","Player.hx",39,0xa27fc9dd)
static const int _hx_array_data_6c4d5f81_8[] = {
	(int)38,(int)87,
};
static const int _hx_array_data_6c4d5f81_9[] = {
	(int)40,(int)83,
};
static const int _hx_array_data_6c4d5f81_10[] = {
	(int)37,(int)65,
};
static const int _hx_array_data_6c4d5f81_11[] = {
	(int)39,(int)68,
};
static const int _hx_array_data_6c4d5f81_12[] = {
	(int)16,
};
HX_LOCAL_STACK_FRAME(_hx_pos_9d6b32c958ffa4d3_146_update,"Player","update",0xf1f8df56,"Player.update","Player.hx",146,0xa27fc9dd)

void Player_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_9_new)
HXLINE(  14)		this->stepPlay = false;
HXLINE(  12)		this->SPEED = ((Float)600);
HXLINE(  18)		super::__construct(x,y,null());
HXLINE(  19)		this->step = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/step.ogg",f9,21,9c,ff),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  20)		this->loadGraphic(HX_("assets/images/ape.png",86,00,be,c1),true,150,192,null(),null());
HXLINE(  22)		this->_facingFlip->set(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),false)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  23)		this->_facingFlip->set(16, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),true)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE(  25)		this->animation->add(HX_("lr",86,5e,00,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_1,8),6,false,null(),null());
HXLINE(  26)		this->animation->add(HX_("u",75,00,00,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_2,4),6,false,null(),null());
HXLINE(  27)		this->animation->add(HX_("d",64,00,00,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_3,4),6,false,null(),null());
HXLINE(  29)		this->animation->add(HX_("flr",6c,c4,4d,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_4,8),10,false,null(),null());
HXLINE(  30)		this->animation->add(HX_("fu",4f,59,00,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_5,4),12,false,null(),null());
HXLINE(  31)		this->animation->add(HX_("fd",3e,59,00,00),::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_6,4),12,false,null(),null());
HXLINE(  33)		this->setSize(( (Float)(150) ),( (Float)(96) ));
HXLINE(  34)		this->offset->set(0,96);
HXLINE(  35)		this->set_immovable(false);
            	}

Dynamic Player_obj::__CreateEmpty() { return new Player_obj; }

void *Player_obj::_hx_vtable = 0;

Dynamic Player_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Player_obj > _hx_result = new Player_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Player_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x33e526a5) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x33e526a5;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Player_obj::updateMovement(){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_39_updateMovement)
HXLINE(  40)		bool up = false;
HXLINE(  41)		bool down = false;
HXLINE(  42)		bool left = false;
HXLINE(  43)		bool right = false;
HXLINE(  44)		bool shift = false;
HXLINE(  47)		up = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_8,2),1);
HXLINE(  48)		down = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_9,2),1);
HXLINE(  49)		left = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_10,2),1);
HXLINE(  50)		right = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_11,2),1);
HXLINE(  51)		shift = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_6c4d5f81_12,1),1);
HXLINE(  54)		bool _hx_tmp;
HXDLIN(  54)		if (up) {
HXLINE(  54)			_hx_tmp = down;
            		}
            		else {
HXLINE(  54)			_hx_tmp = false;
            		}
HXDLIN(  54)		if (_hx_tmp) {
HXLINE(  55)			down = false;
HXDLIN(  55)			up = down;
            		}
HXLINE(  56)		bool _hx_tmp1;
HXDLIN(  56)		if (left) {
HXLINE(  56)			_hx_tmp1 = right;
            		}
            		else {
HXLINE(  56)			_hx_tmp1 = false;
            		}
HXDLIN(  56)		if (_hx_tmp1) {
HXLINE(  57)			right = false;
HXDLIN(  57)			left = right;
            		}
HXLINE(  59)		bool _hx_tmp2;
HXDLIN(  59)		bool _hx_tmp3;
HXDLIN(  59)		bool _hx_tmp4;
HXDLIN(  59)		bool _hx_tmp5;
HXDLIN(  59)		if (!(up)) {
HXLINE(  59)			_hx_tmp5 = down;
            		}
            		else {
HXLINE(  59)			_hx_tmp5 = true;
            		}
HXDLIN(  59)		if (!(_hx_tmp5)) {
HXLINE(  59)			_hx_tmp4 = left;
            		}
            		else {
HXLINE(  59)			_hx_tmp4 = true;
            		}
HXDLIN(  59)		if (!(_hx_tmp4)) {
HXLINE(  59)			_hx_tmp3 = right;
            		}
            		else {
HXLINE(  59)			_hx_tmp3 = true;
            		}
HXDLIN(  59)		if (_hx_tmp3) {
HXLINE(  59)			_hx_tmp2 = (this->animation->frameIndex != 11);
            		}
            		else {
HXLINE(  59)			_hx_tmp2 = false;
            		}
HXDLIN(  59)		if (_hx_tmp2) {
HXLINE(  61)			Float newAngle = ( (Float)(0) );
HXLINE(  65)			if (up) {
HXLINE(  67)				newAngle = ( (Float)(-90) );
HXLINE(  68)				if (left) {
HXLINE(  69)					newAngle = (newAngle - ( (Float)(45) ));
            				}
            				else {
HXLINE(  70)					if (right) {
HXLINE(  71)						newAngle = (newAngle + 45);
            					}
            				}
HXLINE(  72)				this->set_facing(256);
            			}
            			else {
HXLINE(  74)				if (down) {
HXLINE(  76)					newAngle = ( (Float)(90) );
HXLINE(  77)					if (left) {
HXLINE(  78)						newAngle = (newAngle + 45);
            					}
            					else {
HXLINE(  79)						if (right) {
HXLINE(  80)							newAngle = (newAngle - ( (Float)(45) ));
            						}
            					}
HXLINE(  81)					this->set_facing(4096);
            				}
            				else {
HXLINE(  83)					if (left) {
HXLINE(  85)						newAngle = ( (Float)(180) );
HXLINE(  86)						this->set_facing(1);
            					}
            					else {
HXLINE(  88)						if (right) {
HXLINE(  90)							newAngle = ( (Float)(0) );
HXLINE(  91)							this->set_facing(16);
            						}
            					}
            				}
            			}
HXLINE(  95)			this->velocity->set(this->SPEED,0);
HXLINE(  96)			 ::flixel::math::FlxPoint _hx_tmp = this->velocity;
HXDLIN(  96)			 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(0,0);
HXDLIN(  96)			point->_inPool = false;
HXDLIN(  96)			 ::flixel::math::FlxPoint point1 = point;
HXDLIN(  96)			point1->_weak = true;
HXDLIN(  96)			_hx_tmp->rotate(point1,newAngle);
HXLINE(  98)			bool _hx_tmp1;
HXDLIN(  98)			bool _hx_tmp2;
HXDLIN(  98)			if ((this->animation->frameIndex == 0)) {
HXLINE(  98)				_hx_tmp2 = (this->animation->frameIndex != 5);
            			}
            			else {
HXLINE(  98)				_hx_tmp2 = true;
            			}
HXDLIN(  98)			if (!(_hx_tmp2)) {
HXLINE(  98)				_hx_tmp1 = (this->animation->frameIndex != 8);
            			}
            			else {
HXLINE(  98)				_hx_tmp1 = true;
            			}
HXDLIN(  98)			if (_hx_tmp1) {
HXLINE(  99)				this->stepPlay = false;
            			}
HXLINE( 101)			bool _hx_tmp3;
HXDLIN( 101)			bool _hx_tmp4;
HXDLIN( 101)			if ((this->velocity->x == 0)) {
HXLINE( 101)				_hx_tmp4 = (this->velocity->y != 0);
            			}
            			else {
HXLINE( 101)				_hx_tmp4 = true;
            			}
HXDLIN( 101)			if (_hx_tmp4) {
HXLINE( 101)				_hx_tmp3 = (this->touching == 0);
            			}
            			else {
HXLINE( 101)				_hx_tmp3 = false;
            			}
HXDLIN( 101)			if (_hx_tmp3) {
HXLINE( 104)				if (shift) {
HXLINE( 106)					this->SPEED = ( (Float)(1200) );
HXLINE( 107)					switch((int)(this->facing)){
            						case (int)1: case (int)16: {
HXLINE( 110)							this->animation->play(HX_("flr",6c,c4,4d,00),null(),null(),null());
            						}
            						break;
            						case (int)256: {
HXLINE( 113)							this->animation->play(HX_("fu",4f,59,00,00),null(),null(),null());
            						}
            						break;
            						case (int)4096: {
HXLINE( 116)							this->animation->play(HX_("fd",3e,59,00,00),null(),null(),null());
            						}
            						break;
            						default:{
            						}
            					}
            				}
            				else {
HXLINE( 123)					this->SPEED = ( (Float)(600) );
HXLINE( 124)					switch((int)(this->facing)){
            						case (int)1: case (int)16: {
HXLINE( 127)							this->animation->play(HX_("lr",86,5e,00,00),null(),null(),null());
            						}
            						break;
            						case (int)256: {
HXLINE( 130)							this->animation->play(HX_("u",75,00,00,00),null(),null(),null());
            						}
            						break;
            						case (int)4096: {
HXLINE( 133)							this->animation->play(HX_("d",64,00,00,00),null(),null(),null());
            						}
            						break;
            						default:{
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE( 141)			this->velocity->set(0,0);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Player_obj,updateMovement,(void))

void Player_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_9d6b32c958ffa4d3_146_update)
HXLINE( 147)		this->updateMovement();
HXLINE( 149)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< Player_obj > Player_obj::__new(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	::hx::ObjectPtr< Player_obj > __this = new Player_obj();
	__this->__construct(__o_x,__o_y);
	return __this;
}

::hx::ObjectPtr< Player_obj > Player_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	Player_obj *__this = (Player_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Player_obj), true, "Player"));
	*(void **)__this = Player_obj::_hx_vtable;
	__this->__construct(__o_x,__o_y);
	return __this;
}

Player_obj::Player_obj()
{
}

void Player_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Player);
	HX_MARK_MEMBER_NAME(SPEED,"SPEED");
	HX_MARK_MEMBER_NAME(step,"step");
	HX_MARK_MEMBER_NAME(stepPlay,"stepPlay");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Player_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(SPEED,"SPEED");
	HX_VISIT_MEMBER_NAME(step,"step");
	HX_VISIT_MEMBER_NAME(stepPlay,"stepPlay");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Player_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { return ::hx::Val( step ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"SPEED") ) { return ::hx::Val( SPEED ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"stepPlay") ) { return ::hx::Val( stepPlay ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateMovement") ) { return ::hx::Val( updateMovement_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Player_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"step") ) { step=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"SPEED") ) { SPEED=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"stepPlay") ) { stepPlay=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Player_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("SPEED",67,cf,57,ff));
	outFields->push(HX_("step",4c,e7,5b,4c));
	outFields->push(HX_("stepPlay",60,d7,82,9d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Player_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Player_obj,SPEED),HX_("SPEED",67,cf,57,ff)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(Player_obj,step),HX_("step",4c,e7,5b,4c)},
	{::hx::fsBool,(int)offsetof(Player_obj,stepPlay),HX_("stepPlay",60,d7,82,9d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Player_obj_sStaticStorageInfo = 0;
#endif

static ::String Player_obj_sMemberFields[] = {
	HX_("SPEED",67,cf,57,ff),
	HX_("step",4c,e7,5b,4c),
	HX_("stepPlay",60,d7,82,9d),
	HX_("updateMovement",58,78,61,35),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Player_obj::__mClass;

void Player_obj::__register()
{
	Player_obj _hx_dummy;
	Player_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Player",81,5f,4d,6c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Player_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Player_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Player_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Player_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

