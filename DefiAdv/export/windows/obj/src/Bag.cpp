// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_Bag
#include <Bag.h>
#endif
#ifndef INCLUDED_GameOverState
#include <GameOverState.h>
#endif
#ifndef INCLUDED_Pointer
#include <Pointer.h>
#endif
#ifndef INCLUDED_ShopChoice
#include <ShopChoice.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Text
#include <Text.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTypeText
#include <flixel/addons/text/FlxTypeText.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_effects_FlxFlicker
#include <flixel/effects/FlxFlicker.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_math_FlxMath
#include <flixel/math/FlxMath.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b7696cfb93a7c658_211_new,"Bag","new",0xee27fe9a,"Bag.new","Bag.hx",211,0x81a45216)
HX_DEFINE_STACK_FRAME(_hx_pos_b7696cfb93a7c658_223_new,"Bag","new",0xee27fe9a,"Bag.new","Bag.hx",223,0x81a45216)
HX_DEFINE_STACK_FRAME(_hx_pos_b7696cfb93a7c658_236_new,"Bag","new",0xee27fe9a,"Bag.new","Bag.hx",236,0x81a45216)
HX_DEFINE_STACK_FRAME(_hx_pos_b7696cfb93a7c658_249_new,"Bag","new",0xee27fe9a,"Bag.new","Bag.hx",249,0x81a45216)
HX_DEFINE_STACK_FRAME(_hx_pos_b7696cfb93a7c658_261_new,"Bag","new",0xee27fe9a,"Bag.new","Bag.hx",261,0x81a45216)
HX_DEFINE_STACK_FRAME(_hx_pos_b7696cfb93a7c658_274_new,"Bag","new",0xee27fe9a,"Bag.new","Bag.hx",274,0x81a45216)
HX_DEFINE_STACK_FRAME(_hx_pos_b7696cfb93a7c658_286_new,"Bag","new",0xee27fe9a,"Bag.new","Bag.hx",286,0x81a45216)
HX_DEFINE_STACK_FRAME(_hx_pos_b7696cfb93a7c658_329_new,"Bag","new",0xee27fe9a,"Bag.new","Bag.hx",329,0x81a45216)
HX_DEFINE_STACK_FRAME(_hx_pos_b7696cfb93a7c658_340_new,"Bag","new",0xee27fe9a,"Bag.new","Bag.hx",340,0x81a45216)
HX_DEFINE_STACK_FRAME(_hx_pos_b7696cfb93a7c658_26_new,"Bag","new",0xee27fe9a,"Bag.new","Bag.hx",26,0x81a45216)
static const ::String _hx_array_data_003269a8_10[] = {
	HX_("yelling",16,51,aa,80),HX_("branch",a2,fe,18,13),HX_("gameGuide",6a,a9,06,d1),HX_("exit",1e,f7,1d,43),
};
static const ::String _hx_array_data_003269a8_11[] = {
	HX_("leaf",9e,03,b0,47),HX_("shibaCoin",24,c0,b3,42),HX_("nft",3c,d1,53,00),HX_("money",40,ba,5f,0c),HX_("exit",1e,f7,1d,43),
};
static const ::String _hx_array_data_003269a8_12[] = {
	HX_("leaf",9e,03,b0,47),HX_("exit",1e,f7,1d,43),
};
static const ::String _hx_array_data_003269a8_13[] = {
	HX_("buy",46,c3,4a,00),HX_("sell",92,8b,50,4c),HX_("chat",d8,5e,bf,41),HX_("exit",1e,f7,1d,43),
};
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_358_bagUiShow,"Bag","bagUiShow",0x1c466313,"Bag.bagUiShow","Bag.hx",358,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_371_updateBag,"Bag","updateBag",0xcedf24f9,"Bag.updateBag","Bag.hx",371,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_389_updateBag,"Bag","updateBag",0xcedf24f9,"Bag.updateBag","Bag.hx",389,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_404_countShibaWave,"Bag","countShibaWave",0x4cbce183,"Bag.countShibaWave","Bag.hx",404,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_397_countShibaWave,"Bag","countShibaWave",0x4cbce183,"Bag.countShibaWave","Bag.hx",397,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_425_countNftWave,"Bag","countNftWave",0xe064968c,"Bag.countNftWave","Bag.hx",425,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_417_countNftWave,"Bag","countNftWave",0xe064968c,"Bag.countNftWave","Bag.hx",417,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_444_countRodWave,"Bag","countRodWave",0xe98768d7,"Bag.countRodWave","Bag.hx",444,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_463_countRodWave,"Bag","countRodWave",0xe98768d7,"Bag.countRodWave","Bag.hx",463,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_438_countRodWave,"Bag","countRodWave",0xe98768d7,"Bag.countRodWave","Bag.hx",438,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_481_countWave,"Bag","countWave",0xad1a7fe2,"Bag.countWave","Bag.hx",481,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_540_notification,"Bag","notification",0x06203171,"Bag.notification","Bag.hx",540,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_536_notification,"Bag","notification",0x06203171,"Bag.notification","Bag.hx",536,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_531_notification,"Bag","notification",0x06203171,"Bag.notification","Bag.hx",531,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_526_notification,"Bag","notification",0x06203171,"Bag.notification","Bag.hx",526,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_525_notification,"Bag","notification",0x06203171,"Bag.notification","Bag.hx",525,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_552_redOrGreen,"Bag","redOrGreen",0x03a11655,"Bag.redOrGreen","Bag.hx",552,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_566_update,"Bag","update",0x83d8780f,"Bag.update","Bag.hx",566,0x81a45216)
static const int _hx_array_data_003269a8_32[] = {
	(int)88,(int)27,
};
static const int _hx_array_data_003269a8_33[] = {
	(int)37,
};
static const int _hx_array_data_003269a8_34[] = {
	(int)39,
};
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_605_buyAndSell,"Bag","buyAndSell",0x9dbad069,"Bag.buyAndSell","Bag.hx",605,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_625_updateEnter,"Bag","updateEnter",0x6382ce89,"Bag.updateEnter","Bag.hx",625,0x81a45216)
static const int _hx_array_data_003269a8_41[] = {
	(int)13,(int)32,(int)90,
};
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_675_updateEnter,"Bag","updateEnter",0x6382ce89,"Bag.updateEnter","Bag.hx",675,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_853_setMainShop,"Bag","setMainShop",0xe29a0bcb,"Bag.setMainShop","Bag.hx",853,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_846_setMainShop,"Bag","setMainShop",0xe29a0bcb,"Bag.setMainShop","Bag.hx",846,0x81a45216)
HX_LOCAL_STACK_FRAME(_hx_pos_b7696cfb93a7c658_865_shopChatStart,"Bag","shopChatStart",0xe0ad6d4e,"Bag.shopChatStart","Bag.hx",865,0x81a45216)

void Bag_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite sprite){
            			HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_211_new)
HXLINE( 211)			sprite->scrollFactor->set(0,0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_1) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite sprite){
            			HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_223_new)
HXLINE( 223)			sprite->scrollFactor->set(0,0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_2) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite sprite){
            			HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_236_new)
HXLINE( 236)			sprite->scrollFactor->set(0,0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_3) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite sprite){
            			HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_249_new)
HXLINE( 249)			sprite->scrollFactor->set(0,0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_4) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite sprite){
            			HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_261_new)
HXLINE( 261)			sprite->scrollFactor->set(0,0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_5) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite sprite){
            			HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_274_new)
HXLINE( 274)			sprite->scrollFactor->set(0,0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_6) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite sprite){
            			HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_286_new)
HXLINE( 286)			sprite->scrollFactor->set(0,0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_7) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite sprite){
            			HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_329_new)
HXLINE( 329)			sprite->scrollFactor->set(0,0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_8) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite sprite){
            			HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_340_new)
HXLINE( 340)			sprite->scrollFactor->set(0,0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_26_new)
HXLINE( 159)		this->dexCoin = ((Float)0);
HXLINE( 153)		this->appleCoin = ((Float)0);
HXLINE( 147)		this->bananaCoin = ((Float)0);
HXLINE( 137)		this->nftNewsUp = HX_W(u"\u5c0f\u8cc8\u65af\u6c40\u82b1129\u842c\u7f8e\u5143\u8cb7\u7329\u7329NFT\uff01",f42d,a7a9);
HXLINE( 136)		this->nftNewsDown = HX_W(u"\u5927\u660e\u661f\u7f8e\u86d9\u8ce3\u6389\u4e86\u4ed6\u7684\u7329\u7329NFT\uff01",30a9,de83);
HXLINE( 128)		this->shibaNewsUp = HX_W(u"\u99ac\u65af\u514b\u5ba3\u5e03\u7279\u65af\u62c9\u5546\u54c1\u63a5\u53d7\u72d7\u72d7\u5e63\uff01",bfbd,8cee);
HXLINE( 127)		this->shibaNewsDown = HX_W(u"\u4e2d\u570b\u5ba3\u5e03\u7981\u6b62\u6240\u6709\u8207\u52a0\u5bc6\u8ca8\u5e63\u76f8\u95dc\u7684\u6d3b\u52d5\uff01",f904,6e78);
HXLINE( 120)		this->rodNum = 0;
HXLINE( 119)		this->rodWaveAdd = ((Float)0);
HXLINE( 118)		this->rodWave = ((Float)0);
HXLINE( 117)		this->rodInvest = 0;
HXLINE( 110)		this->rodPrizeNow = ((Float)0);
HXLINE( 107)		this->nftWave = ((Float)0);
HXLINE( 106)		this->nftInvest = 0;
HXLINE( 105)		this->firstNft = false;
HXLINE(  98)		this->nftPrizeNow = ((Float)0);
HXLINE(  95)		this->shibaWave = ((Float)0);
HXLINE(  94)		this->shibaInvest = 0;
HXLINE(  93)		this->firstShiba = false;
HXLINE(  87)		this->shibaPrizeNow = ((Float)0);
HXLINE(  81)		this->textRunDone = false;
HXLINE(  80)		this->i = 1;
HXLINE(  79)		this->txt = true;
HXLINE(  75)		this->chatChoices = ::Array_obj< ::String >::fromData( _hx_array_data_003269a8_10,4);
HXLINE(  74)		this->sellChoices = ::Array_obj< ::String >::fromData( _hx_array_data_003269a8_11,5);
HXLINE(  73)		this->buyChoices = ::Array_obj< ::String >::fromData( _hx_array_data_003269a8_12,2);
HXLINE(  72)		this->mainChoices = ::Array_obj< ::String >::fromData( _hx_array_data_003269a8_13,4);
HXLINE(  67)		this->chatCho = HX_W(u"\u70ba\u4ec0\u9ebc\u8981\u5c0d\u9322\u5305\u5927\u543c\u5927\u53eb\n\u8acb\u554f\u6709\u5206\u5e97\u55ce\n\u6211\u5fd8\u8a18\u8a72\u600e\u9ebc\u64cd\u63a7\u904a\u6232\u4e86\n\u96e2\u958b",fde4,6f30);
HXLINE(  66)		this->sellCho = HX_W(u"\u9999\u8549\u8449 1 \u80fd\u91cf\u5e63\n\u72d7\u72d7\u5e63\nNFT\n\u65b0\u81fa\u5e63\n\u96e2\u958b",7de6,8fe8);
HXLINE(  65)		this->buyCho = HX_W(u"\u9999\u8549\u8449 1 \u80fd\u91cf\u5e63\n\u96e2\u958b",b227,5828);
HXLINE(  64)		this->bananaSell = 0;
HXLINE(  50)		this->diamondCounter = ((Float)0);
HXLINE(  49)		this->bananaCounter = 0;
HXLINE(  38)		this->nftNotifUi =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  37)		this->shibaNotifUi =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  35)		this->rodUi =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  34)		this->nftUi =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  33)		this->shibaUi =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  31)		this->diamondUi =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  30)		this->dealUi =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  29)		this->itemUi =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE(  28)		this->shopUi =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 167)		super::__construct(null());
HXLINE( 170)		this->background =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null());
HXLINE( 173)		this->check = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/check.ogg",5d,94,6a,8d),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 174)		this->move = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/movePointer.ogg",41,36,ef,61),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 175)		this->cancel = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/cancel.ogg",27,62,c6,8f),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 176)		this->noNoise = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/no.ogg",6e,ee,68,47),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 179)		this->shopUi->add(this->background).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 182)		this->pointer =  ::Pointer_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 183)		this->pointer->set_color(-1031363);
HXLINE( 184)		this->shopUi->add(this->pointer).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 187)		Float _hx_tmp = (this->background->x + 270);
HXDLIN( 187)		Float _hx_tmp1 = ((_hx_tmp + this->pointer->get_width()) + 30);
HXDLIN( 187)		this->shopCho =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp1,((( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )) + 30),0,HX_W(u"\u8cb7\n\u8ce3\n\u804a\u5929\n\u96e2\u958b\n",467a,611e),78,true);
HXLINE( 188)		this->shopCho->set_color(-13805275);
HXLINE( 189)		this->shopCho->set_font(HX_("assets/data/silver.ttf",3e,fd,5b,64));
HXLINE( 190)		this->shopUi->add(this->shopCho).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 193)		this->shopText =  ::Text_obj::__alloc( HX_CTX ,(this->background->x + 840),this->shopCho->y,810,HX_W(u"\u6b61\u8fce\u4f86\u5230\u6211\u7684\u5e97\uff01",1832,b6f3),84,true);
HXLINE( 194)		this->shopText->set_color(-13805275);
HXLINE( 195)		this->shopUi->add(this->shopText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 198)		this->sellAmoText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->background->x + 1350),this->shopCho->y,810,HX_("oui",83,a0,54,00),84,true);
HXLINE( 199)		this->sellAmoText->set_color(-13805275);
HXLINE( 200)		this->sellAmoText->set_font(HX_("assets/data/silver.ttf",3e,fd,5b,64));
HXLINE( 201)		this->shopUi->add(this->sellAmoText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 204)		Float _hx_tmp2 = this->shopText->x;
HXDLIN( 204)		Float _hx_tmp3 = ((_hx_tmp2 + (this->shopText->get_width() / ( (Float)(2) ))) - ( (Float)(30) ));
HXDLIN( 204)		this->enterCur =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp3,(this->shopText->y + 400),HX_("assets/images/pointer.png",ad,e2,d4,86));
HXLINE( 205)		this->enterCur->set_color(-13805275);
HXLINE( 206)		this->enterCur->set_angle(( (Float)(90) ));
HXLINE( 207)		this->shopUi->add(this->enterCur).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 208)		this->enterCur->set_visible(false);
HXLINE( 210)		this->add(this->shopUi);
HXLINE( 211)		this->shopUi->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE( 212)		this->shopUi->set_visible(false);
HXLINE( 215)		this->diamondIcon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,21,21,null())->loadGraphic(HX_("assets/images/diamondIcon.png",5d,6d,55,de),null(),null(),null(),null(),null());
HXLINE( 216)		this->diamondUi->add(this->diamondIcon).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 218)		Float _hx_tmp4 = (this->diamondIcon->x + 100);
HXDLIN( 218)		Float _hx_tmp5 = this->diamondIcon->y;
HXDLIN( 218)		this->diamondText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp4,((_hx_tmp5 + (this->diamondIcon->get_height() / ( (Float)(2) ))) - ( (Float)(30) )),0,HX_("0",30,00,00,00),54,null());
HXLINE( 219)		this->diamondText->set_color(-13805275);
HXLINE( 220)		this->diamondUi->add(this->diamondText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 222)		this->add(this->diamondUi);
HXLINE( 223)		this->diamondUi->forEach( ::Dynamic(new _hx_Closure_1()),null());
HXLINE( 224)		this->diamondUi->set_visible(false);
HXLINE( 228)		Float _hx_tmp6 = this->diamondIcon->x;
HXDLIN( 228)		this->shiba =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((_hx_tmp6 + this->diamondIcon->get_width()) + 30),15,HX_("assets/images/shibaCoinIcon.png",6d,6d,d9,8c));
HXLINE( 229)		this->shibaUi->add(this->shiba).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 231)		Float _hx_tmp7 = (this->shiba->x + 120);
HXDLIN( 231)		Float _hx_tmp8 = this->shiba->y;
HXDLIN( 231)		this->shibaWaveText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp7,((_hx_tmp8 + (this->shiba->get_height() / ( (Float)(2) ))) - ( (Float)(33) )),0,HX_("+0",a5,25,00,00),44,null());
HXLINE( 232)		this->shibaWaveText->set_color(-16744448);
HXLINE( 233)		this->shibaUi->add(this->shibaWaveText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 235)		this->add(this->shibaUi);
HXLINE( 236)		this->shibaUi->forEach( ::Dynamic(new _hx_Closure_2()),null());
HXLINE( 237)		this->shibaUi->set_visible(false);
HXLINE( 240)		Float _hx_tmp9 = this->shiba->x;
HXDLIN( 240)		this->shibaNotif =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,((_hx_tmp9 + this->shiba->get_width()) + 30),21,null())->loadGraphic(HX_("assets/images/notfi.png",46,38,5d,4c),null(),null(),null(),null(),null());
HXLINE( 241)		this->shibaNotifUi->add(this->shibaNotif).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 243)		this->shibaNotifText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->shibaNotif->x + 100),(this->shibaNotif->y + 15),0,HX_("oui",83,a0,54,00),84,null());
HXLINE( 244)		this->shibaNotifText->set_color(-7127747);
HXLINE( 245)		this->shibaNotifText->set_font(HX_("assets/data/silver.ttf",3e,fd,5b,64));
HXLINE( 246)		this->shibaNotifUi->add(this->shibaNotifText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 248)		this->add(this->shibaNotifUi);
HXLINE( 249)		this->shibaNotifUi->forEach( ::Dynamic(new _hx_Closure_3()),null());
HXLINE( 250)		this->shibaNotifUi->set_visible(false);
HXLINE( 252)		Float _hx_tmp10 = this->shiba->x;
HXDLIN( 252)		Float _hx_tmp11 = this->shiba->y;
HXDLIN( 252)		this->nft =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp10,((_hx_tmp11 + this->shiba->get_height()) + 6),null())->loadGraphic(HX_("assets/images/nftIcon.png",c5,40,99,7d),true,308,108,null(),null());
HXLINE( 253)		this->nft->animation->set_frameIndex(0);
HXLINE( 254)		this->nftUi->add(this->nft).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 256)		Float _hx_tmp12 = (this->nft->x + 120);
HXDLIN( 256)		Float _hx_tmp13 = this->nft->y;
HXDLIN( 256)		this->nftWaveText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp12,((_hx_tmp13 + (this->nft->get_height() / ( (Float)(2) ))) - ( (Float)(33) )),0,HX_("+0",a5,25,00,00),44,null());
HXLINE( 257)		this->nftWaveText->set_color(-16744448);
HXLINE( 258)		this->nftUi->add(this->nftWaveText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 260)		this->add(this->nftUi);
HXLINE( 261)		this->nftUi->forEach( ::Dynamic(new _hx_Closure_4()),null());
HXLINE( 262)		this->nftUi->set_visible(false);
HXLINE( 265)		Float _hx_tmp14 = this->shibaNotif->x;
HXDLIN( 265)		Float _hx_tmp15 = this->shibaNotif->y;
HXDLIN( 265)		this->nftNotif =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp14,((_hx_tmp15 + this->shibaNotif->get_height()) + 24),null())->loadGraphic(HX_("assets/images/notfi.png",46,38,5d,4c),null(),null(),null(),null(),null());
HXLINE( 266)		this->nftNotifUi->add(this->nftNotif).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 268)		this->nftNotifText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,(this->nftNotif->x + 100),(this->nftNotif->y + 15),0,HX_("oui",83,a0,54,00),84,null());
HXLINE( 269)		this->nftNotifText->set_color(-7127747);
HXLINE( 270)		this->nftNotifText->set_font(HX_("assets/data/silver.ttf",3e,fd,5b,64));
HXLINE( 271)		this->nftNotifUi->add(this->nftNotifText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 273)		this->add(this->nftNotifUi);
HXLINE( 274)		this->nftNotifUi->forEach( ::Dynamic(new _hx_Closure_5()),null());
HXLINE( 275)		this->nftNotifUi->set_visible(false);
HXLINE( 278)		Float _hx_tmp16 = this->nft->x;
HXDLIN( 278)		Float _hx_tmp17 = this->nft->y;
HXDLIN( 278)		this->rod =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,_hx_tmp16,((_hx_tmp17 + this->nft->get_height()) + 6),null())->loadGraphic(HX_("assets/images/rodIcon.png",90,94,9a,14),null(),null(),null(),null(),null());
HXLINE( 279)		this->rodUi->add(this->rod).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 281)		Float _hx_tmp18 = (this->rod->x + 120);
HXDLIN( 281)		Float _hx_tmp19 = this->rod->y;
HXDLIN( 281)		this->rodWaveText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp18,((_hx_tmp19 + (this->rod->get_height() / ( (Float)(2) ))) - ( (Float)(33) )),0,HX_("+0",a5,25,00,00),44,null());
HXLINE( 282)		this->rodWaveText->set_color(-16744448);
HXLINE( 283)		this->rodUi->add(this->rodWaveText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 285)		this->add(this->rodUi);
HXLINE( 286)		this->rodUi->forEach( ::Dynamic(new _hx_Closure_6()),null());
HXLINE( 287)		this->rodUi->set_visible(false);
HXLINE( 290)		this->itemUi->add(this->background).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 293)		this->bananaCounterIcon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,504,300,HX_("assets/images/bananaIcon.png",a4,3f,54,ab));
HXLINE( 294)		this->itemUi->add(this->bananaCounterIcon).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 296)		Float _hx_tmp20 = (this->bananaCounterIcon->x - ( (Float)(90) ));
HXDLIN( 296)		Float _hx_tmp21 = this->bananaCounterIcon->y;
HXDLIN( 296)		this->bananaCounterText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp20,(_hx_tmp21 + this->bananaCounterIcon->get_height()),328,HX_("0",30,00,00,00),48,null());
HXLINE( 297)		this->bananaCounterText->set_color(-13805275);
HXLINE( 298)		this->bananaCounterText->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 299)		this->itemUi->add(this->bananaCounterText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 302)		this->bananaCoinIcon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,885,this->bananaCounterIcon->y,HX_("assets/images/bananaCoinIcon.png",55,22,6a,08));
HXLINE( 303)		this->itemUi->add(this->bananaCoinIcon).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 305)		Float _hx_tmp22 = (this->bananaCoinIcon->x - ( (Float)(90) ));
HXDLIN( 305)		Float _hx_tmp23 = this->bananaCoinIcon->y;
HXDLIN( 305)		this->bananaCoinText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp22,(_hx_tmp23 + this->bananaCoinIcon->get_height()),318,HX_("0",30,00,00,00),48,null());
HXLINE( 306)		this->bananaCoinText->set_color(-13805275);
HXLINE( 307)		this->bananaCoinText->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 308)		this->itemUi->add(this->bananaCoinText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 311)		this->appleCoinIcon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,1284,this->bananaCounterIcon->y,HX_("assets/images/appleCoinIcon.png",54,88,de,55));
HXLINE( 312)		this->itemUi->add(this->appleCoinIcon).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 314)		Float _hx_tmp24 = (this->appleCoinIcon->x - ( (Float)(90) ));
HXDLIN( 314)		Float _hx_tmp25 = this->appleCoinIcon->y;
HXDLIN( 314)		this->appleCoinText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp24,(_hx_tmp25 + this->appleCoinIcon->get_height()),318,HX_("0",30,00,00,00),48,null());
HXLINE( 315)		this->appleCoinText->set_color(-13805275);
HXLINE( 316)		this->appleCoinText->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 317)		this->itemUi->add(this->appleCoinText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 320)		this->dexCoinIcon =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,this->bananaCounterIcon->x,550,HX_("assets/images/dexCoinIcon.png",11,2d,7d,ca));
HXLINE( 321)		this->itemUi->add(this->dexCoinIcon).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 323)		Float _hx_tmp26 = (this->dexCoinIcon->x - ( (Float)(90) ));
HXDLIN( 323)		Float _hx_tmp27 = this->dexCoinIcon->y;
HXDLIN( 323)		this->dexCoinText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp26,(_hx_tmp27 + this->dexCoinIcon->get_height()),318,HX_("0",30,00,00,00),48,null());
HXLINE( 324)		this->dexCoinText->set_color(-13805275);
HXLINE( 325)		this->dexCoinText->set_alignment(HX_("center",d5,25,db,05));
HXLINE( 326)		this->itemUi->add(this->dexCoinText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 328)		this->add(this->itemUi);
HXLINE( 329)		this->itemUi->forEach( ::Dynamic(new _hx_Closure_7()),null());
HXLINE( 330)		this->itemUi->set_visible(false);
HXLINE( 333)		this->dealUi->add(this->background).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 334)		this->dealText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,495,360,0,HX_W(u"\u76ee\u524d\u4e26\u7121\u4ea4\u6613\u7d00\u9304\n",b708,5cea),84,true);
HXLINE( 335)		this->dealText->set_color(-13805275);
HXLINE( 336)		this->dealText->set_font(HX_("assets/data/silver.ttf",3e,fd,5b,64));
HXLINE( 337)		this->dealUi->add(this->dealText).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 339)		this->add(this->dealUi);
HXLINE( 340)		this->dealUi->forEach( ::Dynamic(new _hx_Closure_8()),null());
HXLINE( 341)		this->dealUi->set_visible(false);
HXLINE( 344)		this->ufo =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,600,HX_("ufo",fe,20,59,00),60,null());
HXLINE( 345)		this->ufo->scrollFactor->set(0,0);
HXLINE( 346)		this->add(this->ufo);
HXLINE( 347)		this->ufo->set_visible(false);
HXLINE( 350)		this->save =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE( 351)		this->save->bind(HX_("DefiAdv",6f,39,37,6e),null());
HXLINE( 353)		this->set_active(false);
            	}

Dynamic Bag_obj::__CreateEmpty() { return new Bag_obj; }

void *Bag_obj::_hx_vtable = 0;

Dynamic Bag_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Bag_obj > _hx_result = new Bag_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Bag_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7ccf8994) {
		if (inClassId<=(int)0x62817b24) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x62817b24;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	} else {
		return inClassId==(int)0x7ed6ae3c;
	}
}

void Bag_obj::bagUiShow(){
            	HX_STACKFRAME(&_hx_pos_b7696cfb93a7c658_358_bagUiShow)
HXLINE( 359)		this->background->loadGraphic(HX_("assets/images/bagItem.png",eb,3f,6a,2b),null(),null(),null(),null(),null());
HXLINE( 361)		this->dealUi->set_visible(false);
HXLINE( 363)		this->itemUi->set_visible(true);
HXLINE( 364)		this->shopUi->set_visible(false);
HXLINE( 365)		this->bananaCounterIcon->set_visible(true);
HXLINE( 366)		this->set_active(true);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bag_obj,bagUiShow,(void))

void Bag_obj::updateBag(){
            	HX_STACKFRAME(&_hx_pos_b7696cfb93a7c658_371_updateBag)
HXLINE( 372)		 ::flixel::text::FlxText _hx_tmp = this->bananaCounterText;
HXDLIN( 372)		_hx_tmp->set_text(::Std_obj::string(this->bananaCounter));
HXLINE( 374)		this->diamondCounter = ::flixel::math::FlxMath_obj::roundDecimal(this->diamondCounter,2);
HXLINE( 375)		 ::flixel::text::FlxText _hx_tmp1 = this->diamondText;
HXDLIN( 375)		_hx_tmp1->set_text(::Std_obj::string(this->diamondCounter));
HXLINE( 377)		this->bananaCoin = ::flixel::math::FlxMath_obj::roundDecimal(this->bananaCoin,2);
HXLINE( 378)		 ::flixel::text::FlxText _hx_tmp2 = this->bananaCoinText;
HXDLIN( 378)		_hx_tmp2->set_text(::Std_obj::string(this->bananaCoin));
HXLINE( 380)		this->appleCoin = ::flixel::math::FlxMath_obj::roundDecimal(this->appleCoin,2);
HXLINE( 381)		 ::flixel::text::FlxText _hx_tmp3 = this->appleCoinText;
HXDLIN( 381)		_hx_tmp3->set_text(::Std_obj::string((this->appleCoin + this->rodWave)));
HXLINE( 383)		this->dexCoin = ::flixel::math::FlxMath_obj::roundDecimal(this->dexCoin,2);
HXLINE( 384)		 ::flixel::text::FlxText _hx_tmp4 = this->dexCoinText;
HXDLIN( 384)		_hx_tmp4->set_text(::Std_obj::string(this->dexCoin));
HXLINE( 385)		if ((this->diamondCounter < 0)) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_389_updateBag)
HXLINE( 389)				 ::flixel::FlxState nextState =  ::GameOverState_obj::__alloc( HX_CTX ,null());
HXDLIN( 389)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 389)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 387)			::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),false, ::Dynamic(new _hx_Closure_0()),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bag_obj,updateBag,(void))

void Bag_obj::countShibaWave(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Bag,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer timer){
            			HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_404_countShibaWave)
HXLINE( 404)			_gthis->countWave(HX_("shiba",f3,e8,22,7c),_gthis->shibaNotifText,_gthis->shibaWave,_gthis->shibaWaveText,_gthis->shibaInvest,_gthis->shibaNewsDown,_gthis->shibaNewsUp);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_397_countShibaWave)
HXDLIN( 397)		 ::Bag _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 398)		this->shibaUi->set_visible(true);
HXLINE( 399)		this->redOrGreen(this->shibaWave,this->shibaInvest,this->shibaWaveText);
HXLINE( 402)		this->shibaTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),0);
HXLINE( 408)		if (!(this->firstShiba)) {
HXLINE( 410)			this->firstShiba = true;
HXLINE( 411)			this->notification(this->shibaNotifUi,this->shibaNotifText,this->shibaNewsDown,this->shibaNewsUp);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bag_obj,countShibaWave,(void))

void Bag_obj::countNftWave(int style){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Bag,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer timer){
            			HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_425_countNftWave)
HXLINE( 425)			_gthis->countWave(HX_("nft",3c,d1,53,00),_gthis->nftNotifText,_gthis->nftWave,_gthis->nftWaveText,_gthis->nftInvest,_gthis->nftNewsDown,_gthis->nftNewsUp);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_417_countNftWave)
HXDLIN( 417)		 ::Bag _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 418)		this->nft->animation->set_frameIndex(style);
HXLINE( 419)		this->nftUi->set_visible(true);
HXLINE( 420)		this->redOrGreen(this->nftWave,this->nftInvest,this->nftWaveText);
HXLINE( 423)		this->nftTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_0(_gthis)),0);
HXLINE( 429)		if (!(this->firstNft)) {
HXLINE( 431)			this->firstNft = true;
HXLINE( 432)			this->notification(this->nftNotifUi,this->nftNotifText,this->nftNewsDown,this->nftNewsUp);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Bag_obj,countNftWave,(void))

void Bag_obj::countRodWave(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::Bag,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer timer){
            			HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_444_countRodWave)
HXLINE( 445)			_gthis->rodWave = ::flixel::math::FlxMath_obj::roundDecimal(_gthis->rodWave,2);
HXLINE( 447)			if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 70)) {
HXLINE( 448)				 ::Bag _gthis1 = _gthis;
HXDLIN( 448)				Float _gthis2 = _gthis1->rodWave;
HXDLIN( 448)				_gthis1->rodWave = (_gthis2 * (1 + (((Float)0.01) * ( (Float)(::flixel::FlxG_obj::random->_hx_int(20,100,null())) ))));
            			}
            			else {
HXLINE( 452)				if (((_gthis->rodWave - ( (Float)(_gthis->rodInvest) )) >= ((Float)0.01))) {
HXLINE( 453)					 ::Bag _gthis1 = _gthis;
HXDLIN( 453)					Float _gthis2 = _gthis1->rodWave;
HXDLIN( 453)					_gthis1->rodWave = (_gthis2 * (((Float)0.01) * ( (Float)(::flixel::FlxG_obj::random->_hx_int(20,50,null())) )));
            				}
            				else {
HXLINE( 456)					_gthis->rodWave = (( (Float)(_gthis->rodInvest) ) / ( (Float)(4) ));
            				}
            			}
HXLINE( 459)			if (((_gthis->rodWave / ( (Float)(_gthis->rodInvest) )) < (( (Float)(1) ) / ( (Float)(_gthis->rodNum) )))) {
HXLINE( 461)				{
HXLINE( 461)					 ::Dynamic CompletionCallback = null();
HXDLIN( 461)					 ::Dynamic ProgressCallback = null();
HXDLIN( 461)					::flixel::effects::FlxFlicker_obj::flicker(( ( ::flixel::FlxObject)(_gthis->rod) ),( (Float)(1) ),((Float)0.04),true,true,CompletionCallback,ProgressCallback);
            				}
HXLINE( 462)				{
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Bag,_gthis) HXARGC(1)
            					void _hx_run( ::flixel::effects::FlxFlicker FlxFlicker){
            						HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_463_countRodWave)
HXLINE( 464)						_gthis->rodUi->set_visible(false);
HXLINE( 465)						_gthis->rodWave = ( (Float)(0) );
HXLINE( 466)						_gthis->rodInvest = 0;
HXLINE( 467)						 ::flixel::text::FlxText _gthis1 = _gthis->appleCoinText;
HXDLIN( 467)						_gthis1->set_text(::Std_obj::string(_gthis->appleCoin));
HXLINE( 468)						_gthis->rodTimer->cancel();
            					}
            					HX_END_LOCAL_FUNC1((void))

HXLINE( 462)					 ::Dynamic ProgressCallback1 = null();
HXDLIN( 462)					::flixel::effects::FlxFlicker_obj::flicker(( ( ::flixel::FlxObject)(_gthis->rodWaveText) ),( (Float)(1) ),((Float)0.04),true,true, ::Dynamic(new _hx_Closure_0(_gthis)),ProgressCallback1);
            				}
            			}
HXLINE( 472)			 ::flixel::text::FlxText _gthis1 = _gthis->ufo;
HXDLIN( 472)			_gthis1->set_text(::Std_obj::string(_gthis->rodInvest));
HXLINE( 473)			 ::flixel::text::FlxText _gthis2 = _gthis->appleCoinText;
HXDLIN( 473)			_gthis2->set_text(::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((_gthis->appleCoin + _gthis->rodWave),2)));
HXLINE( 475)			_gthis->redOrGreen(_gthis->rodWave,_gthis->rodInvest,_gthis->rodWaveText);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_438_countRodWave)
HXDLIN( 438)		 ::Bag _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 439)		this->rodUi->set_visible(true);
HXLINE( 440)		this->redOrGreen(this->rodWave,this->rodInvest,this->rodWaveText);
HXLINE( 443)		this->rodTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(2, ::Dynamic(new _hx_Closure_1(_gthis)),0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bag_obj,countRodWave,(void))

void Bag_obj::countWave(::String enemy, ::Dynamic notifText,Float wave, ::flixel::text::FlxText waveText,int invest,::String newsDown,::String newsUp){
            	HX_STACKFRAME(&_hx_pos_b7696cfb93a7c658_481_countWave)
HXLINE( 483)		if (::hx::IsEq( notifText->__Field(HX_("text",ad,cc,f9,4c),::hx::paccDynamic),newsDown )) {
HXLINE( 484)			if (((wave - ( (Float)(invest) )) >= ((Float)0.01))) {
HXLINE( 485)				wave = (wave * (((Float)0.01) * ( (Float)(::flixel::FlxG_obj::random->_hx_int(20,100,null())) )));
            			}
            			else {
HXLINE( 487)				wave = ((Float)0.01);
            			}
            		}
            		else {
HXLINE( 489)			if (::hx::IsEq( notifText->__Field(HX_("text",ad,cc,f9,4c),::hx::paccDynamic),newsUp )) {
HXLINE( 491)				if (((wave - ( (Float)(invest) )) < 0)) {
HXLINE( 492)					wave = ( (Float)((invest * 2)) );
            				}
            				else {
HXLINE( 494)					wave = (wave * (1 + (((Float)0.01) * ( (Float)(::flixel::FlxG_obj::random->_hx_int(20,100,null())) ))));
            				}
            			}
            			else {
HXLINE( 501)				if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 70)) {
HXLINE( 502)					wave = (wave * (1 + (((Float)0.01) * ( (Float)(::flixel::FlxG_obj::random->_hx_int(1,50,null())) ))));
            				}
            				else {
HXLINE( 506)					if (((wave - ( (Float)(invest) )) >= ((Float)0.01))) {
HXLINE( 507)						wave = (wave * (((Float)0.01) * ( (Float)(::flixel::FlxG_obj::random->_hx_int(20,100,null())) )));
            					}
            					else {
HXLINE( 510)						wave = (( (Float)(invest) ) / ( (Float)(4) ));
            					}
            				}
            			}
            		}
HXLINE( 513)		if ((enemy == HX_("shiba",f3,e8,22,7c))) {
HXLINE( 514)			this->shibaWave = ::flixel::math::FlxMath_obj::roundDecimal(wave,2);
            		}
            		else {
HXLINE( 515)			if ((enemy == HX_("nft",3c,d1,53,00))) {
HXLINE( 516)				this->nftWave = ::flixel::math::FlxMath_obj::roundDecimal(wave,2);
            			}
            		}
HXLINE( 518)		this->redOrGreen(wave,invest,waveText);
            	}


HX_DEFINE_DYNAMIC_FUNC7(Bag_obj,countWave,(void))

void Bag_obj::notification( ::flixel::group::FlxTypedGroup notifUi, ::flixel::text::FlxText notifText,::String newsDown,::String newsUp){
            		HX_BEGIN_LOCAL_FUNC_S4(::hx::LocalFunc,_hx_Closure_3, ::flixel::group::FlxTypedGroup,notifUi,::String,newsDown,::String,newsUp, ::flixel::text::FlxText,notifText) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer timer){
            			HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_2, ::flixel::group::FlxTypedGroup,notifUi,::String,newsUp, ::flixel::text::FlxText,notifText) HXARGC(1)
            			void _hx_run( ::flixel::util::FlxTimer timer){
            				HX_BEGIN_LOCAL_FUNC_S3(::hx::LocalFunc,_hx_Closure_1, ::flixel::group::FlxTypedGroup,notifUi,::String,newsUp, ::flixel::text::FlxText,notifText) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer timer){
            					HX_BEGIN_LOCAL_FUNC_S2(::hx::LocalFunc,_hx_Closure_0, ::flixel::group::FlxTypedGroup,notifUi, ::flixel::text::FlxText,notifText) HXARGC(1)
            					void _hx_run( ::flixel::util::FlxTimer timer){
            						HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_540_notification)
HXLINE( 541)						notifUi->set_visible(false);
HXLINE( 542)						notifText->set_text(HX_("done",82,f0,6d,42));
            					}
            					HX_END_LOCAL_FUNC1((void))

            					HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_536_notification)
HXLINE( 537)					notifUi->set_visible(true);
HXLINE( 538)					notifText->set_text(newsUp);
HXLINE( 539)					timer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(10, ::Dynamic(new _hx_Closure_0(notifUi,notifText)),null());
            				}
            				HX_END_LOCAL_FUNC1((void))

            				HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_531_notification)
HXLINE( 532)				notifUi->set_visible(false);
HXLINE( 533)				notifText->set_text(HX_("oui",83,a0,54,00));
HXLINE( 535)				timer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(5, ::Dynamic(new _hx_Closure_1(notifUi,newsUp,notifText)),null());
            			}
            			HX_END_LOCAL_FUNC1((void))

            			HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_526_notification)
HXLINE( 527)			notifUi->set_visible(true);
HXLINE( 528)			notifText->set_text(newsDown);
HXLINE( 530)			timer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(10, ::Dynamic(new _hx_Closure_2(notifUi,newsUp,notifText)),null());
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_b7696cfb93a7c658_525_notification)
HXDLIN( 525)		this->notifTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(5, ::Dynamic(new _hx_Closure_3(notifUi,newsDown,newsUp,notifText)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC4(Bag_obj,notification,(void))

void Bag_obj::redOrGreen(Float wave,int invest, ::flixel::text::FlxText waveText){
            	HX_STACKFRAME(&_hx_pos_b7696cfb93a7c658_552_redOrGreen)
HXDLIN( 552)		if (((wave - ( (Float)(invest) )) >= 0)) {
HXLINE( 554)			waveText->set_text((HX_("+",2b,00,00,00) + ::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((wave - ( (Float)(invest) )),2))));
HXLINE( 555)			waveText->set_color(-16744448);
            		}
            		else {
HXLINE( 559)			waveText->set_text(::Std_obj::string(::flixel::math::FlxMath_obj::roundDecimal((wave - ( (Float)(invest) )),2)));
HXLINE( 560)			waveText->set_color(-65536);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC3(Bag_obj,redOrGreen,(void))

void Bag_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_b7696cfb93a7c658_566_update)
HXLINE( 567)		this->super::update(elapsed);
HXLINE( 568)		this->updateEnter();
HXLINE( 569)		bool x = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_003269a8_32,2),-1);
HXLINE( 570)		bool l = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_003269a8_33,1),-1);
HXLINE( 571)		bool r = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_003269a8_34,1),-1);
HXLINE( 574)		bool _hx_tmp;
HXDLIN( 574)		if (!(this->itemUi->visible)) {
HXLINE( 574)			_hx_tmp = this->dealUi->visible;
            		}
            		else {
HXLINE( 574)			_hx_tmp = true;
            		}
HXDLIN( 574)		if (_hx_tmp) {
HXLINE( 577)			if (x) {
HXLINE( 579)				this->cancel->play(null(),null(),null());
HXLINE( 580)				this->itemUi->set_visible(false);
HXLINE( 581)				this->dealUi->set_visible(false);
HXLINE( 582)				this->set_active(false);
            			}
HXLINE( 585)			if (l) {
HXLINE( 587)				this->move->play(null(),null(),null());
HXLINE( 588)				this->background->loadGraphic(HX_("assets/images/bagItem.png",eb,3f,6a,2b),null(),null(),null(),null(),null());
HXLINE( 589)				this->itemUi->set_visible(true);
HXLINE( 590)				this->dealUi->set_visible(false);
            			}
HXLINE( 593)			if (r) {
HXLINE( 595)				this->move->play(null(),null(),null());
HXLINE( 596)				this->background->loadGraphic(HX_("assets/images/bagDeal.png",04,0a,d8,70),null(),null(),null(),null(),null());
HXLINE( 597)				this->itemUi->set_visible(false);
HXLINE( 598)				this->dealUi->set_visible(true);
            			}
            		}
            	}


void Bag_obj::buyAndSell(){
            	HX_STACKFRAME(&_hx_pos_b7696cfb93a7c658_605_buyAndSell)
HXLINE( 606)		this->background->loadGraphic(HX_("assets/images/shopkeeper.png",ce,63,ec,06),null(),null(),null(),null(),null());
HXLINE( 608)		this->mainChat = HX_W(u"\u6b61\u8fce\u4f86\u5230\u6211\u7684\u5e97\uff01",1832,b6f3);
HXLINE( 609)		this->setMainShop();
HXLINE( 610)		this->shibaPrizeNow = this->shibaWave;
HXLINE( 611)		this->nftPrizeNow = this->nftWave;
HXLINE( 612)		 ::flixel::text::FlxText _hx_tmp = this->sellAmoText;
HXDLIN( 612)		::String _hx_tmp1 = (::Std_obj::string(this->bananaCounter) + HX_("\n",0a,00,00,00));
HXDLIN( 612)		::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(this->shibaPrizeNow)) + HX_("\n",0a,00,00,00));
HXDLIN( 612)		_hx_tmp->set_text((_hx_tmp2 + ::Std_obj::string(this->nftPrizeNow)));
HXLINE( 613)		this->sellAmoText->set_visible(false);
HXLINE( 615)		this->shibaUi->set_visible(false);
HXLINE( 616)		this->nftUi->set_visible(false);
HXLINE( 617)		this->itemUi->set_visible(false);
HXLINE( 618)		this->shopUi->set_visible(true);
HXLINE( 619)		this->set_active(true);
HXLINE( 620)		::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),true,null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bag_obj,buyAndSell,(void))

void Bag_obj::updateEnter(){
            	HX_STACKFRAME(&_hx_pos_b7696cfb93a7c658_625_updateEnter)
HXDLIN( 625)		 ::Bag _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 626)		bool enter = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_003269a8_41,3),-1);
HXLINE( 629)		bool _hx_tmp;
HXDLIN( 629)		if (!(this->pointer->visible)) {
HXLINE( 629)			_hx_tmp = this->shopText->textRunDone;
            		}
            		else {
HXLINE( 629)			_hx_tmp = false;
            		}
HXDLIN( 629)		if (_hx_tmp) {
HXLINE( 631)			if (!(::flixel::effects::FlxFlicker_obj::isFlickering(( ( ::flixel::FlxObject)(this->enterCur) )))) {
HXLINE( 633)				this->enterCur->set_visible(true);
HXLINE( 634)				{
HXLINE( 634)					 ::Dynamic CompletionCallback = null();
HXDLIN( 634)					 ::Dynamic ProgressCallback = null();
HXDLIN( 634)					::flixel::effects::FlxFlicker_obj::flicker(( ( ::flixel::FlxObject)(this->enterCur) ),0,((Float)0.5),true,true,CompletionCallback,ProgressCallback);
            				}
HXLINE( 635)				this->updateBag();
            			}
            		}
HXLINE( 638)		bool _hx_tmp1;
HXDLIN( 638)		if (enter) {
HXLINE( 638)			_hx_tmp1 = this->shopUi->visible;
            		}
            		else {
HXLINE( 638)			_hx_tmp1 = false;
            		}
HXDLIN( 638)		if (_hx_tmp1) {
HXLINE( 640)			{
HXLINE( 640)				 ::flixel::FlxObject Object = this->enterCur;
HXDLIN( 640)				::flixel::effects::FlxFlicker_obj::stopFlickering(Object);
            			}
HXLINE( 641)			this->enterCur->set_visible(false);
HXLINE( 643)			bool _hx_tmp;
HXDLIN( 643)			if (this->pointer->visible) {
HXLINE( 643)				_hx_tmp = this->textRunDone;
            			}
            			else {
HXLINE( 643)				_hx_tmp = false;
            			}
HXDLIN( 643)			if (_hx_tmp) {
HXLINE( 646)				if (::hx::IsPointerEq( this->shopChoice,::ShopChoice_obj::main_dyn() )) {
HXLINE( 648)					this->check->play(true,null(),null());
HXLINE( 649)					this->background->loadGraphic(HX_("assets/images/shopkeeper.png",ce,63,ec,06),null(),null(),null(),null(),null());
HXLINE( 650)					::String _hx_switch_0 = this->pointer->selected;
            					if (  (_hx_switch_0==HX_("buy",46,c3,4a,00)) ){
HXLINE( 654)						this->shopText->resetText(this->buyCho);
HXLINE( 655)						this->shopChoice = ::ShopChoice_obj::buy_dyn();
HXLINE( 656)						 ::Pointer _hx_tmp = this->pointer;
HXDLIN( 656)						Float _hx_tmp1 = this->shopText->x;
HXDLIN( 656)						Float _hx_tmp2 = ((_hx_tmp1 - this->pointer->get_width()) - ( (Float)(30) ));
HXDLIN( 656)						_hx_tmp->setPointer(_hx_tmp2,(this->shopText->y + 9),90,this->buyChoices,HX_("ud",4f,66,00,00));
HXLINE( 657)						this->mainChat = HX_W(u"\u7329\u7329\u4ec0\u9ebc\u90fd\u6c92\u6709\u8cb7\uff01",00b5,fc76);
HXLINE( 653)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("chat",d8,5e,bf,41)) ){
HXLINE( 668)						this->shopText->resetText(this->chatCho);
HXLINE( 669)						this->shopChoice = ::ShopChoice_obj::chat_dyn();
HXLINE( 670)						 ::Pointer _hx_tmp = this->pointer;
HXDLIN( 670)						Float _hx_tmp1 = this->shopText->x;
HXDLIN( 670)						Float _hx_tmp2 = ((_hx_tmp1 - this->pointer->get_width()) - ( (Float)(30) ));
HXDLIN( 670)						_hx_tmp->setPointer(_hx_tmp2,(this->shopText->y + 9),90,this->chatChoices,HX_("ud",4f,66,00,00));
HXLINE( 671)						this->mainChat = HX_W(u"\u7329\u7329\u4ec0\u9ebc\u4e5f\u6c92\u8aaa\uff01",75aa,dee5);
HXLINE( 667)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("exit",1e,f7,1d,43)) ){
            						HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Bag,_gthis) HXARGC(0)
            						void _hx_run(){
            							HX_STACKFRAME(&_hx_pos_b7696cfb93a7c658_675_updateEnter)
HXLINE( 676)							_gthis->shopUi->set_visible(false);
HXLINE( 677)							_gthis->set_active(false);
HXLINE( 678)							if ((_gthis->shibaInvest != 0)) {
HXLINE( 679)								_gthis->shibaUi->set_visible(true);
            							}
HXLINE( 680)							if ((_gthis->nftInvest != 0)) {
HXLINE( 681)								_gthis->nftUi->set_visible(true);
            							}
HXLINE( 682)							::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),true,null(),null());
HXLINE( 683)							if (::hx::IsNotNull( _gthis->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic) )) {
HXLINE( 685)								if (::hx::IsEq( _gthis->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic),HX_("monument",47,ea,c5,03) )) {
HXLINE( 686)									::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/monumentTheme.ogg",2d,68,2d,ad),((Float)0.3),true,null());
            								}
HXLINE( 687)								if (::hx::IsEq( _gthis->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic),HX_("miner",7f,72,68,08) )) {
HXLINE( 688)									::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/minerTheme.ogg",a1,5e,ce,5c),((Float)0.3),true,null());
            								}
HXLINE( 689)								if (::hx::IsEq( _gthis->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic),HX_("street",03,18,2d,11) )) {
HXLINE( 690)									::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/streetTheme.ogg",71,ac,25,df),((Float)0.3),true,null());
            								}
            							}
            						}
            						HX_END_LOCAL_FUNC0((void))

HXLINE( 674)						::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),false, ::Dynamic(new _hx_Closure_0(_gthis)),null());
HXDLIN( 674)						goto _hx_goto_36;
            					}
            					if (  (_hx_switch_0==HX_("sell",92,8b,50,4c)) ){
HXLINE( 660)						this->shopText->resetText(this->sellCho);
HXLINE( 661)						this->sellAmoText->set_visible(true);
HXLINE( 662)						 ::flixel::text::FlxText _hx_tmp = this->sellAmoText;
HXDLIN( 662)						::String _hx_tmp1 = (::Std_obj::string(this->bananaCounter) + HX_("\n",0a,00,00,00));
HXDLIN( 662)						::String _hx_tmp2 = ((_hx_tmp1 + ::Std_obj::string(this->shibaPrizeNow)) + HX_("\n",0a,00,00,00));
HXDLIN( 662)						_hx_tmp->set_text((_hx_tmp2 + ::Std_obj::string(this->nftPrizeNow)));
HXLINE( 663)						this->shopChoice = ::ShopChoice_obj::sell_dyn();
HXLINE( 664)						 ::Pointer _hx_tmp3 = this->pointer;
HXDLIN( 664)						Float _hx_tmp4 = this->shopText->x;
HXDLIN( 664)						Float _hx_tmp5 = ((_hx_tmp4 - this->pointer->get_width()) - ( (Float)(30) ));
HXDLIN( 664)						_hx_tmp3->setPointer(_hx_tmp5,(this->shopText->y + 9),90,this->sellChoices,HX_("ud",4f,66,00,00));
HXLINE( 665)						this->mainChat = HX_W(u"\u7329\u7329\u4ec0\u9ebc\u90fd\u6c92\u6709\u8ce3\uff01",50ca,82a4);
HXLINE( 659)						goto _hx_goto_36;
            					}
            					_hx_goto_36:;
HXLINE( 694)					this->shopText->start(null(),false,false,null(),null());
HXLINE( 695)					this->shopText->skip();
HXLINE( 696)					this->textRunDone = true;
            				}
            				else {
HXLINE( 700)					if (::hx::IsPointerEq( this->shopChoice,::ShopChoice_obj::buy_dyn() )) {
HXLINE( 702)						::String _hx_switch_1 = this->pointer->selected;
            						if (  (_hx_switch_1==HX_("exit",1e,f7,1d,43)) ){
HXLINE( 718)							this->check->play(true,null(),null());
HXLINE( 719)							this->bananaCounterIcon->set_visible(false);
HXLINE( 720)							this->setMainShop();
HXLINE( 717)							goto _hx_goto_37;
            						}
            						if (  (_hx_switch_1==HX_("leaf",9e,03,b0,47)) ){
HXLINE( 705)							if ((this->diamondCounter >= 1)) {
HXLINE( 707)								this->check->play(true,null(),null());
HXLINE( 708)								this->bananaCounter++;
HXLINE( 709)								this->bananaSell++;
HXLINE( 710)								this->diamondCounter--;
HXLINE( 711)								this->mainChat = ((((HX_W(u"\u7329\u7329\u7d66\u8001\u95c6 ",4dd9,2f92) + this->bananaSell) + HX_W(u" \u500b\u80fd\u91cf\u5e63\uff01\n\u8001\u95c6\u7d66\u7329\u7329 ",5b5d,853d)) + this->bananaSell) + HX_W(u" \u7247\u9999\u8549\u8449\uff01",3d79,f196));
HXLINE( 712)								this->dealText->set_text((this->mainChat + HX_("\n",0a,00,00,00)));
HXLINE( 713)								this->updateBag();
            							}
            							else {
HXLINE( 716)								this->noNoise->play(true,null(),null());
            							}
HXLINE( 705)							goto _hx_goto_37;
            						}
            						_hx_goto_37:;
            					}
            					else {
HXLINE( 725)						if (::hx::IsPointerEq( this->shopChoice,::ShopChoice_obj::sell_dyn() )) {
HXLINE( 727)							::String _hx_switch_2 = this->pointer->selected;
            							if (  (_hx_switch_2==HX_("exit",1e,f7,1d,43)) ){
HXLINE( 791)								this->check->play(true,null(),null());
HXLINE( 792)								this->sellAmoText->set_visible(false);
HXLINE( 793)								this->bananaSell = 0;
HXLINE( 794)								this->setMainShop();
HXLINE( 790)								goto _hx_goto_38;
            							}
            							if (  (_hx_switch_2==HX_("leaf",9e,03,b0,47)) ){
HXLINE( 730)								if ((this->bananaCounter > 0)) {
HXLINE( 732)									this->check->play(true,null(),null());
HXLINE( 733)									 ::Bag _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 733)									_hx_tmp->diamondCounter = (_hx_tmp->diamondCounter + this->bananaCounter);
HXLINE( 734)									this->bananaSell = this->bananaCounter;
HXLINE( 735)									this->bananaCounter = 0;
HXLINE( 736)									 ::flixel::text::FlxText _hx_tmp1 = this->sellAmoText;
HXDLIN( 736)									::String _hx_tmp2 = ((HX_("0\n",da,29,00,00) + ::Std_obj::string(this->shibaPrizeNow)) + HX_("\n",0a,00,00,00));
HXDLIN( 736)									_hx_tmp1->set_text((_hx_tmp2 + ::Std_obj::string(this->nftPrizeNow)));
HXLINE( 737)									this->updateBag();
HXLINE( 738)									this->mainChat = ((((HX_W(u"\u7329\u7329\u7d66\u8001\u95c6 ",4dd9,2f92) + this->bananaSell) + HX_W(u" \u7247\u9999\u8549\u8449\uff01\n\u8001\u95c6\u7d66\u7329\u7329 ",a2c8,7dea)) + this->bananaSell) + HX_W(u" \u500b\u80fd\u91cf\u5e63\uff01",6884,c2ae));
HXLINE( 739)									this->dealText->set_text((this->mainChat + HX_("\n",0a,00,00,00)));
            								}
            								else {
HXLINE( 742)									this->noNoise->play(true,null(),null());
            								}
HXLINE( 730)								goto _hx_goto_38;
            							}
            							if (  (_hx_switch_2==HX_("money",40,ba,5f,0c)) ){
HXLINE( 786)								this->check->play(true,null(),null());
HXLINE( 787)								this->name = HX_W(u":\u55ef\uff1f\u62b1\u6b49\uff0c\u6211\u5011\u4e0d\u5e6b\u5fd9\u4e1f\u56de\u6536\u7d19\u985e\u5594\u3002",6468,ee35);
HXLINE( 788)								this->txt = false;
HXLINE( 789)								this->shopChatStart(this->name,this->txt);
HXLINE( 785)								goto _hx_goto_38;
            							}
            							if (  (_hx_switch_2==HX_("nft",3c,d1,53,00)) ){
HXLINE( 765)								if ((this->nftPrizeNow > 0)) {
HXLINE( 767)									this->check->play(true,null(),null());
HXLINE( 768)									 ::Bag _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 768)									_hx_tmp->diamondCounter = (_hx_tmp->diamondCounter + this->nftPrizeNow);
HXLINE( 769)									 ::flixel::text::FlxText _hx_tmp1 = this->sellAmoText;
HXDLIN( 769)									::String _hx_tmp2 = (::Std_obj::string(this->bananaCounter) + HX_("\n",0a,00,00,00));
HXDLIN( 769)									_hx_tmp1->set_text(((_hx_tmp2 + ::Std_obj::string(this->shibaPrizeNow)) + HX_("\n0",e6,08,00,00)));
HXLINE( 770)									this->updateBag();
HXLINE( 771)									::String _hx_tmp3 = ((((HX_W(u"\u7329\u7329\u4ee5 ",bd72,0754) + this->nftInvest) + HX_W(u" \u8cb7\u9032NFT\n\u4ee5 ",2c4e,6339)) + this->nftPrizeNow) + HX_W(u" \u8ce3\u51fa\n\u8cfa\u4e86",21ab,5022));
HXDLIN( 771)									this->mainChat = ((_hx_tmp3 + ::flixel::math::FlxMath_obj::roundDecimal((this->nftPrizeNow - ( (Float)(this->nftInvest) )),2)) + HX_W(u"\u80fd\u91cf\u5e63\uff01\n",dd16,d771));
HXLINE( 772)									this->nftWave = ( (Float)(0) );
HXLINE( 773)									this->nftInvest = 0;
HXLINE( 774)									this->nftPrizeNow = ( (Float)(0) );
HXLINE( 775)									this->nftTimer->cancel();
HXLINE( 776)									if ((this->nftNotifText->text != HX_("done",82,f0,6d,42))) {
HXLINE( 777)										this->nftNotifTimer->cancel();
            									}
HXLINE( 778)									this->nftNotifUi->set_visible(false);
HXLINE( 779)									this->nftWaveText->set_text(HX_("+0",a5,25,00,00));
HXLINE( 780)									this->nftNotifText->set_text(HX_("oui",83,a0,54,00));
HXLINE( 781)									this->nftWaveText->set_color(-16744448);
            								}
            								else {
HXLINE( 784)									this->noNoise->play(true,null(),null());
            								}
HXLINE( 765)								goto _hx_goto_38;
            							}
            							if (  (_hx_switch_2==HX_("shibaCoin",24,c0,b3,42)) ){
HXLINE( 744)								if ((this->shibaPrizeNow > 0)) {
HXLINE( 746)									this->check->play(true,null(),null());
HXLINE( 747)									 ::Bag _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 747)									_hx_tmp->diamondCounter = (_hx_tmp->diamondCounter + this->shibaPrizeNow);
HXLINE( 748)									 ::flixel::text::FlxText _hx_tmp1 = this->sellAmoText;
HXDLIN( 748)									::String _hx_tmp2 = (::Std_obj::string(this->bananaCounter) + HX_("\n0\n",64,c0,07,00));
HXDLIN( 748)									_hx_tmp1->set_text((_hx_tmp2 + ::Std_obj::string(this->nftPrizeNow)));
HXLINE( 749)									this->updateBag();
HXLINE( 750)									::String _hx_tmp3 = ((((HX_W(u"\u7329\u7329\u4ee5 ",bd72,0754) + this->shibaInvest) + HX_W(u" \u8cb7\u9032\u72d7\u72d7\u5e63\n\u4ee5 ",12fb,340c)) + this->shibaPrizeNow) + HX_W(u" \u8ce3\u51fa\n\u8cfa\u4e86",21ab,5022));
HXDLIN( 750)									this->mainChat = ((_hx_tmp3 + ::flixel::math::FlxMath_obj::roundDecimal((this->shibaPrizeNow - ( (Float)(this->shibaInvest) )),2)) + HX_W(u"\u80fd\u91cf\u5e63\uff01\n",dd16,d771));
HXLINE( 751)									this->shibaWave = ( (Float)(0) );
HXLINE( 752)									this->shibaInvest = 0;
HXLINE( 753)									this->shibaPrizeNow = ( (Float)(0) );
HXLINE( 754)									this->shibaTimer->cancel();
HXLINE( 755)									if ((this->shibaNotifText->text != HX_("done",82,f0,6d,42))) {
HXLINE( 756)										this->shibaNotifTimer->cancel();
            									}
HXLINE( 757)									this->shibaNotifUi->set_visible(false);
HXLINE( 758)									this->shibaWaveText->set_text(HX_("+0",a5,25,00,00));
HXLINE( 759)									this->shibaNotifText->set_text(HX_("oui",83,a0,54,00));
HXLINE( 760)									this->shibaWaveText->set_color(-16744448);
            								}
            								else {
HXLINE( 763)									this->noNoise->play(true,null(),null());
            								}
HXLINE( 744)								goto _hx_goto_38;
            							}
            							_hx_goto_38:;
            						}
            						else {
HXLINE( 799)							if (::hx::IsPointerEq( this->shopChoice,::ShopChoice_obj::chat_dyn() )) {
HXLINE( 801)								this->check->play(true,null(),null());
HXLINE( 802)								::String _hx_switch_3 = this->pointer->selected;
            								if (  (_hx_switch_3==HX_("branch",a2,fe,18,13)) ){
HXLINE( 810)									this->name = HX_("assets/data/shopBranchTalk.txt",bf,d9,d4,7d);
HXLINE( 811)									this->txt = true;
HXLINE( 812)									this->shopChatStart(this->name,this->txt);
HXLINE( 813)									this->background->loadGraphic(HX_("assets/images/shopkeeperSmile.png",70,28,31,5b),null(),null(),null(),null(),null());
HXLINE( 809)									goto _hx_goto_39;
            								}
            								if (  (_hx_switch_3==HX_("exit",1e,f7,1d,43)) ){
HXLINE( 820)									this->mainChat = HX_W(u"\u7329\u7329\u8ddf\u8001\u95c6\u804a\u5929\u4e86\uff01",5e9c,3ae8);
HXLINE( 821)									this->setMainShop();
HXLINE( 819)									goto _hx_goto_39;
            								}
            								if (  (_hx_switch_3==HX_("gameGuide",6a,a9,06,d1)) ){
HXLINE( 815)									this->name = HX_("assets/data/shopGuide.txt",4f,cb,f3,04);
HXLINE( 816)									this->txt = true;
HXLINE( 817)									this->shopChatStart(this->name,this->txt);
HXLINE( 818)									this->background->loadGraphic(HX_("assets/images/shopkeeperSmile.png",70,28,31,5b),null(),null(),null(),null(),null());
HXLINE( 814)									goto _hx_goto_39;
            								}
            								if (  (_hx_switch_3==HX_("yelling",16,51,aa,80)) ){
HXLINE( 805)									this->name = HX_("assets/data/shopYellingTalk.txt",b5,57,67,6d);
HXLINE( 806)									this->txt = true;
HXLINE( 807)									this->background->loadGraphic(HX_("assets/images/shopkeeperTalk.png",9a,24,41,e2),null(),null(),null(),null(),null());
HXLINE( 808)									this->shopChatStart(this->name,this->txt);
HXLINE( 804)									goto _hx_goto_39;
            								}
            								_hx_goto_39:;
            							}
            						}
            					}
            				}
            			}
            			else {
HXLINE( 825)				if (this->shopText->over) {
HXLINE( 827)					this->pointer->set_visible(true);
HXLINE( 828)					if (::hx::IsPointerEq( this->shopChoice,::ShopChoice_obj::chat_dyn() )) {
HXLINE( 830)						this->shopText->resetText(this->chatCho);
            					}
            					else {
HXLINE( 832)						if (::hx::IsPointerEq( this->shopChoice,::ShopChoice_obj::sell_dyn() )) {
HXLINE( 834)							this->shopText->resetText(this->sellCho);
HXLINE( 835)							this->sellAmoText->set_visible(true);
            						}
            					}
HXLINE( 837)					this->shopText->start(null(),false,false,null(),null());
HXLINE( 838)					this->shopText->skip();
HXLINE( 839)					this->textRunDone = true;
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bag_obj,updateEnter,(void))

void Bag_obj::setMainShop(){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Bag,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_b7696cfb93a7c658_853_setMainShop)
HXLINE( 854)			_gthis->textRunDone = true;
HXLINE( 855)			_gthis->enterCur->set_visible(true);
HXLINE( 856)			{
HXLINE( 856)				 ::Dynamic CompletionCallback = null();
HXDLIN( 856)				 ::Dynamic ProgressCallback = null();
HXDLIN( 856)				::flixel::effects::FlxFlicker_obj::flicker(( ( ::flixel::FlxObject)(_gthis->enterCur) ),0,((Float)0.5),true,true,CompletionCallback,ProgressCallback);
            			}
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_b7696cfb93a7c658_846_setMainShop)
HXDLIN( 846)		 ::Bag _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 847)		this->textRunDone = false;
HXLINE( 848)		{
HXLINE( 848)			 ::flixel::FlxObject Object = this->enterCur;
HXDLIN( 848)			::flixel::effects::FlxFlicker_obj::stopFlickering(Object);
            		}
HXLINE( 849)		this->enterCur->set_visible(false);
HXLINE( 850)		this->background->loadGraphic(HX_("assets/images/shopkeeperTalk.png",9a,24,41,e2),null(),null(),null(),null(),null());
HXLINE( 851)		this->shopText->resetText(this->mainChat);
HXLINE( 852)		this->shopText->start(null(),false,false,null(), ::Dynamic(new _hx_Closure_0(_gthis)));
HXLINE( 858)		this->pointer->setPointer((this->background->x + 285),this->shopCho->y,90,this->mainChoices,HX_("ud",4f,66,00,00));
HXLINE( 859)		this->shopChoice = ::ShopChoice_obj::main_dyn();
HXLINE( 860)		this->bananaSell = 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Bag_obj,setMainShop,(void))

void Bag_obj::shopChatStart(::String name,bool txt){
            	HX_STACKFRAME(&_hx_pos_b7696cfb93a7c658_865_shopChatStart)
HXLINE( 866)		this->pointer->set_visible(false);
HXLINE( 867)		this->sellAmoText->set_visible(false);
HXLINE( 868)		this->shopText->show(name,txt);
            	}


HX_DEFINE_DYNAMIC_FUNC2(Bag_obj,shopChatStart,(void))


::hx::ObjectPtr< Bag_obj > Bag_obj::__new() {
	::hx::ObjectPtr< Bag_obj > __this = new Bag_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Bag_obj > Bag_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Bag_obj *__this = (Bag_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Bag_obj), true, "Bag"));
	*(void **)__this = Bag_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Bag_obj::Bag_obj()
{
}

void Bag_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Bag);
	HX_MARK_MEMBER_NAME(shopUi,"shopUi");
	HX_MARK_MEMBER_NAME(itemUi,"itemUi");
	HX_MARK_MEMBER_NAME(dealUi,"dealUi");
	HX_MARK_MEMBER_NAME(diamondUi,"diamondUi");
	HX_MARK_MEMBER_NAME(shibaUi,"shibaUi");
	HX_MARK_MEMBER_NAME(nftUi,"nftUi");
	HX_MARK_MEMBER_NAME(rodUi,"rodUi");
	HX_MARK_MEMBER_NAME(shibaNotifUi,"shibaNotifUi");
	HX_MARK_MEMBER_NAME(nftNotifUi,"nftNotifUi");
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(check,"check");
	HX_MARK_MEMBER_NAME(move,"move");
	HX_MARK_MEMBER_NAME(cancel,"cancel");
	HX_MARK_MEMBER_NAME(noNoise,"noNoise");
	HX_MARK_MEMBER_NAME(bananaCounter,"bananaCounter");
	HX_MARK_MEMBER_NAME(diamondCounter,"diamondCounter");
	HX_MARK_MEMBER_NAME(diamondText,"diamondText");
	HX_MARK_MEMBER_NAME(diamondIcon,"diamondIcon");
	HX_MARK_MEMBER_NAME(bananaCounterText,"bananaCounterText");
	HX_MARK_MEMBER_NAME(bananaCounterIcon,"bananaCounterIcon");
	HX_MARK_MEMBER_NAME(dealText,"dealText");
	HX_MARK_MEMBER_NAME(shopCho,"shopCho");
	HX_MARK_MEMBER_NAME(shopText,"shopText");
	HX_MARK_MEMBER_NAME(mainChat,"mainChat");
	HX_MARK_MEMBER_NAME(bananaSell,"bananaSell");
	HX_MARK_MEMBER_NAME(buyCho,"buyCho");
	HX_MARK_MEMBER_NAME(sellCho,"sellCho");
	HX_MARK_MEMBER_NAME(chatCho,"chatCho");
	HX_MARK_MEMBER_NAME(pointer,"pointer");
	HX_MARK_MEMBER_NAME(shopChoice,"shopChoice");
	HX_MARK_MEMBER_NAME(mainChoices,"mainChoices");
	HX_MARK_MEMBER_NAME(buyChoices,"buyChoices");
	HX_MARK_MEMBER_NAME(sellChoices,"sellChoices");
	HX_MARK_MEMBER_NAME(chatChoices,"chatChoices");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(txt,"txt");
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_MEMBER_NAME(textRunDone,"textRunDone");
	HX_MARK_MEMBER_NAME(enterCur,"enterCur");
	HX_MARK_MEMBER_NAME(sellAmoText,"sellAmoText");
	HX_MARK_MEMBER_NAME(shibaPrizeNow,"shibaPrizeNow");
	HX_MARK_MEMBER_NAME(shiba,"shiba");
	HX_MARK_MEMBER_NAME(shibaWaveText,"shibaWaveText");
	HX_MARK_MEMBER_NAME(shibaTimer,"shibaTimer");
	HX_MARK_MEMBER_NAME(firstShiba,"firstShiba");
	HX_MARK_MEMBER_NAME(shibaInvest,"shibaInvest");
	HX_MARK_MEMBER_NAME(shibaWave,"shibaWave");
	HX_MARK_MEMBER_NAME(nftPrizeNow,"nftPrizeNow");
	HX_MARK_MEMBER_NAME(nft,"nft");
	HX_MARK_MEMBER_NAME(nftWaveText,"nftWaveText");
	HX_MARK_MEMBER_NAME(nftTimer,"nftTimer");
	HX_MARK_MEMBER_NAME(firstNft,"firstNft");
	HX_MARK_MEMBER_NAME(nftInvest,"nftInvest");
	HX_MARK_MEMBER_NAME(nftWave,"nftWave");
	HX_MARK_MEMBER_NAME(rodPrizeNow,"rodPrizeNow");
	HX_MARK_MEMBER_NAME(rod,"rod");
	HX_MARK_MEMBER_NAME(rodWaveText,"rodWaveText");
	HX_MARK_MEMBER_NAME(rodTimer,"rodTimer");
	HX_MARK_MEMBER_NAME(rodInvest,"rodInvest");
	HX_MARK_MEMBER_NAME(rodWave,"rodWave");
	HX_MARK_MEMBER_NAME(rodWaveAdd,"rodWaveAdd");
	HX_MARK_MEMBER_NAME(rodNum,"rodNum");
	HX_MARK_MEMBER_NAME(notifTimer,"notifTimer");
	HX_MARK_MEMBER_NAME(shibaNotif,"shibaNotif");
	HX_MARK_MEMBER_NAME(shibaNewsDown,"shibaNewsDown");
	HX_MARK_MEMBER_NAME(shibaNewsUp,"shibaNewsUp");
	HX_MARK_MEMBER_NAME(shibaNotifText,"shibaNotifText");
	HX_MARK_MEMBER_NAME(shibaNotifTimer,"shibaNotifTimer");
	HX_MARK_MEMBER_NAME(nftNotif,"nftNotif");
	HX_MARK_MEMBER_NAME(nftNewsDown,"nftNewsDown");
	HX_MARK_MEMBER_NAME(nftNewsUp,"nftNewsUp");
	HX_MARK_MEMBER_NAME(nftNotifText,"nftNotifText");
	HX_MARK_MEMBER_NAME(nftNotifTimer,"nftNotifTimer");
	HX_MARK_MEMBER_NAME(bananaCoinIcon,"bananaCoinIcon");
	HX_MARK_MEMBER_NAME(bananaCoinText,"bananaCoinText");
	HX_MARK_MEMBER_NAME(bananaCoin,"bananaCoin");
	HX_MARK_MEMBER_NAME(appleCoinIcon,"appleCoinIcon");
	HX_MARK_MEMBER_NAME(appleCoinText,"appleCoinText");
	HX_MARK_MEMBER_NAME(appleCoin,"appleCoin");
	HX_MARK_MEMBER_NAME(dexCoinIcon,"dexCoinIcon");
	HX_MARK_MEMBER_NAME(dexCoinText,"dexCoinText");
	HX_MARK_MEMBER_NAME(dexCoin,"dexCoin");
	HX_MARK_MEMBER_NAME(ufo,"ufo");
	HX_MARK_MEMBER_NAME(save,"save");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Bag_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(shopUi,"shopUi");
	HX_VISIT_MEMBER_NAME(itemUi,"itemUi");
	HX_VISIT_MEMBER_NAME(dealUi,"dealUi");
	HX_VISIT_MEMBER_NAME(diamondUi,"diamondUi");
	HX_VISIT_MEMBER_NAME(shibaUi,"shibaUi");
	HX_VISIT_MEMBER_NAME(nftUi,"nftUi");
	HX_VISIT_MEMBER_NAME(rodUi,"rodUi");
	HX_VISIT_MEMBER_NAME(shibaNotifUi,"shibaNotifUi");
	HX_VISIT_MEMBER_NAME(nftNotifUi,"nftNotifUi");
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(check,"check");
	HX_VISIT_MEMBER_NAME(move,"move");
	HX_VISIT_MEMBER_NAME(cancel,"cancel");
	HX_VISIT_MEMBER_NAME(noNoise,"noNoise");
	HX_VISIT_MEMBER_NAME(bananaCounter,"bananaCounter");
	HX_VISIT_MEMBER_NAME(diamondCounter,"diamondCounter");
	HX_VISIT_MEMBER_NAME(diamondText,"diamondText");
	HX_VISIT_MEMBER_NAME(diamondIcon,"diamondIcon");
	HX_VISIT_MEMBER_NAME(bananaCounterText,"bananaCounterText");
	HX_VISIT_MEMBER_NAME(bananaCounterIcon,"bananaCounterIcon");
	HX_VISIT_MEMBER_NAME(dealText,"dealText");
	HX_VISIT_MEMBER_NAME(shopCho,"shopCho");
	HX_VISIT_MEMBER_NAME(shopText,"shopText");
	HX_VISIT_MEMBER_NAME(mainChat,"mainChat");
	HX_VISIT_MEMBER_NAME(bananaSell,"bananaSell");
	HX_VISIT_MEMBER_NAME(buyCho,"buyCho");
	HX_VISIT_MEMBER_NAME(sellCho,"sellCho");
	HX_VISIT_MEMBER_NAME(chatCho,"chatCho");
	HX_VISIT_MEMBER_NAME(pointer,"pointer");
	HX_VISIT_MEMBER_NAME(shopChoice,"shopChoice");
	HX_VISIT_MEMBER_NAME(mainChoices,"mainChoices");
	HX_VISIT_MEMBER_NAME(buyChoices,"buyChoices");
	HX_VISIT_MEMBER_NAME(sellChoices,"sellChoices");
	HX_VISIT_MEMBER_NAME(chatChoices,"chatChoices");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(txt,"txt");
	HX_VISIT_MEMBER_NAME(i,"i");
	HX_VISIT_MEMBER_NAME(textRunDone,"textRunDone");
	HX_VISIT_MEMBER_NAME(enterCur,"enterCur");
	HX_VISIT_MEMBER_NAME(sellAmoText,"sellAmoText");
	HX_VISIT_MEMBER_NAME(shibaPrizeNow,"shibaPrizeNow");
	HX_VISIT_MEMBER_NAME(shiba,"shiba");
	HX_VISIT_MEMBER_NAME(shibaWaveText,"shibaWaveText");
	HX_VISIT_MEMBER_NAME(shibaTimer,"shibaTimer");
	HX_VISIT_MEMBER_NAME(firstShiba,"firstShiba");
	HX_VISIT_MEMBER_NAME(shibaInvest,"shibaInvest");
	HX_VISIT_MEMBER_NAME(shibaWave,"shibaWave");
	HX_VISIT_MEMBER_NAME(nftPrizeNow,"nftPrizeNow");
	HX_VISIT_MEMBER_NAME(nft,"nft");
	HX_VISIT_MEMBER_NAME(nftWaveText,"nftWaveText");
	HX_VISIT_MEMBER_NAME(nftTimer,"nftTimer");
	HX_VISIT_MEMBER_NAME(firstNft,"firstNft");
	HX_VISIT_MEMBER_NAME(nftInvest,"nftInvest");
	HX_VISIT_MEMBER_NAME(nftWave,"nftWave");
	HX_VISIT_MEMBER_NAME(rodPrizeNow,"rodPrizeNow");
	HX_VISIT_MEMBER_NAME(rod,"rod");
	HX_VISIT_MEMBER_NAME(rodWaveText,"rodWaveText");
	HX_VISIT_MEMBER_NAME(rodTimer,"rodTimer");
	HX_VISIT_MEMBER_NAME(rodInvest,"rodInvest");
	HX_VISIT_MEMBER_NAME(rodWave,"rodWave");
	HX_VISIT_MEMBER_NAME(rodWaveAdd,"rodWaveAdd");
	HX_VISIT_MEMBER_NAME(rodNum,"rodNum");
	HX_VISIT_MEMBER_NAME(notifTimer,"notifTimer");
	HX_VISIT_MEMBER_NAME(shibaNotif,"shibaNotif");
	HX_VISIT_MEMBER_NAME(shibaNewsDown,"shibaNewsDown");
	HX_VISIT_MEMBER_NAME(shibaNewsUp,"shibaNewsUp");
	HX_VISIT_MEMBER_NAME(shibaNotifText,"shibaNotifText");
	HX_VISIT_MEMBER_NAME(shibaNotifTimer,"shibaNotifTimer");
	HX_VISIT_MEMBER_NAME(nftNotif,"nftNotif");
	HX_VISIT_MEMBER_NAME(nftNewsDown,"nftNewsDown");
	HX_VISIT_MEMBER_NAME(nftNewsUp,"nftNewsUp");
	HX_VISIT_MEMBER_NAME(nftNotifText,"nftNotifText");
	HX_VISIT_MEMBER_NAME(nftNotifTimer,"nftNotifTimer");
	HX_VISIT_MEMBER_NAME(bananaCoinIcon,"bananaCoinIcon");
	HX_VISIT_MEMBER_NAME(bananaCoinText,"bananaCoinText");
	HX_VISIT_MEMBER_NAME(bananaCoin,"bananaCoin");
	HX_VISIT_MEMBER_NAME(appleCoinIcon,"appleCoinIcon");
	HX_VISIT_MEMBER_NAME(appleCoinText,"appleCoinText");
	HX_VISIT_MEMBER_NAME(appleCoin,"appleCoin");
	HX_VISIT_MEMBER_NAME(dexCoinIcon,"dexCoinIcon");
	HX_VISIT_MEMBER_NAME(dexCoinText,"dexCoinText");
	HX_VISIT_MEMBER_NAME(dexCoin,"dexCoin");
	HX_VISIT_MEMBER_NAME(ufo,"ufo");
	HX_VISIT_MEMBER_NAME(save,"save");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Bag_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { return ::hx::Val( i ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"txt") ) { return ::hx::Val( txt ); }
		if (HX_FIELD_EQ(inName,"nft") ) { return ::hx::Val( nft ); }
		if (HX_FIELD_EQ(inName,"rod") ) { return ::hx::Val( rod ); }
		if (HX_FIELD_EQ(inName,"ufo") ) { return ::hx::Val( ufo ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"move") ) { return ::hx::Val( move ); }
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"save") ) { return ::hx::Val( save ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"nftUi") ) { return ::hx::Val( nftUi ); }
		if (HX_FIELD_EQ(inName,"rodUi") ) { return ::hx::Val( rodUi ); }
		if (HX_FIELD_EQ(inName,"check") ) { return ::hx::Val( check ); }
		if (HX_FIELD_EQ(inName,"shiba") ) { return ::hx::Val( shiba ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shopUi") ) { return ::hx::Val( shopUi ); }
		if (HX_FIELD_EQ(inName,"itemUi") ) { return ::hx::Val( itemUi ); }
		if (HX_FIELD_EQ(inName,"dealUi") ) { return ::hx::Val( dealUi ); }
		if (HX_FIELD_EQ(inName,"cancel") ) { return ::hx::Val( cancel ); }
		if (HX_FIELD_EQ(inName,"buyCho") ) { return ::hx::Val( buyCho ); }
		if (HX_FIELD_EQ(inName,"rodNum") ) { return ::hx::Val( rodNum ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"shibaUi") ) { return ::hx::Val( shibaUi ); }
		if (HX_FIELD_EQ(inName,"noNoise") ) { return ::hx::Val( noNoise ); }
		if (HX_FIELD_EQ(inName,"shopCho") ) { return ::hx::Val( shopCho ); }
		if (HX_FIELD_EQ(inName,"sellCho") ) { return ::hx::Val( sellCho ); }
		if (HX_FIELD_EQ(inName,"chatCho") ) { return ::hx::Val( chatCho ); }
		if (HX_FIELD_EQ(inName,"pointer") ) { return ::hx::Val( pointer ); }
		if (HX_FIELD_EQ(inName,"nftWave") ) { return ::hx::Val( nftWave ); }
		if (HX_FIELD_EQ(inName,"rodWave") ) { return ::hx::Val( rodWave ); }
		if (HX_FIELD_EQ(inName,"dexCoin") ) { return ::hx::Val( dexCoin ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dealText") ) { return ::hx::Val( dealText ); }
		if (HX_FIELD_EQ(inName,"shopText") ) { return ::hx::Val( shopText ); }
		if (HX_FIELD_EQ(inName,"mainChat") ) { return ::hx::Val( mainChat ); }
		if (HX_FIELD_EQ(inName,"enterCur") ) { return ::hx::Val( enterCur ); }
		if (HX_FIELD_EQ(inName,"nftTimer") ) { return ::hx::Val( nftTimer ); }
		if (HX_FIELD_EQ(inName,"firstNft") ) { return ::hx::Val( firstNft ); }
		if (HX_FIELD_EQ(inName,"rodTimer") ) { return ::hx::Val( rodTimer ); }
		if (HX_FIELD_EQ(inName,"nftNotif") ) { return ::hx::Val( nftNotif ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"diamondUi") ) { return ::hx::Val( diamondUi ); }
		if (HX_FIELD_EQ(inName,"shibaWave") ) { return ::hx::Val( shibaWave ); }
		if (HX_FIELD_EQ(inName,"nftInvest") ) { return ::hx::Val( nftInvest ); }
		if (HX_FIELD_EQ(inName,"rodInvest") ) { return ::hx::Val( rodInvest ); }
		if (HX_FIELD_EQ(inName,"nftNewsUp") ) { return ::hx::Val( nftNewsUp ); }
		if (HX_FIELD_EQ(inName,"appleCoin") ) { return ::hx::Val( appleCoin ); }
		if (HX_FIELD_EQ(inName,"bagUiShow") ) { return ::hx::Val( bagUiShow_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateBag") ) { return ::hx::Val( updateBag_dyn() ); }
		if (HX_FIELD_EQ(inName,"countWave") ) { return ::hx::Val( countWave_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nftNotifUi") ) { return ::hx::Val( nftNotifUi ); }
		if (HX_FIELD_EQ(inName,"background") ) { return ::hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"bananaSell") ) { return ::hx::Val( bananaSell ); }
		if (HX_FIELD_EQ(inName,"shopChoice") ) { return ::hx::Val( shopChoice ); }
		if (HX_FIELD_EQ(inName,"buyChoices") ) { return ::hx::Val( buyChoices ); }
		if (HX_FIELD_EQ(inName,"shibaTimer") ) { return ::hx::Val( shibaTimer ); }
		if (HX_FIELD_EQ(inName,"firstShiba") ) { return ::hx::Val( firstShiba ); }
		if (HX_FIELD_EQ(inName,"rodWaveAdd") ) { return ::hx::Val( rodWaveAdd ); }
		if (HX_FIELD_EQ(inName,"notifTimer") ) { return ::hx::Val( notifTimer ); }
		if (HX_FIELD_EQ(inName,"shibaNotif") ) { return ::hx::Val( shibaNotif ); }
		if (HX_FIELD_EQ(inName,"bananaCoin") ) { return ::hx::Val( bananaCoin ); }
		if (HX_FIELD_EQ(inName,"redOrGreen") ) { return ::hx::Val( redOrGreen_dyn() ); }
		if (HX_FIELD_EQ(inName,"buyAndSell") ) { return ::hx::Val( buyAndSell_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"diamondText") ) { return ::hx::Val( diamondText ); }
		if (HX_FIELD_EQ(inName,"diamondIcon") ) { return ::hx::Val( diamondIcon ); }
		if (HX_FIELD_EQ(inName,"mainChoices") ) { return ::hx::Val( mainChoices ); }
		if (HX_FIELD_EQ(inName,"sellChoices") ) { return ::hx::Val( sellChoices ); }
		if (HX_FIELD_EQ(inName,"chatChoices") ) { return ::hx::Val( chatChoices ); }
		if (HX_FIELD_EQ(inName,"textRunDone") ) { return ::hx::Val( textRunDone ); }
		if (HX_FIELD_EQ(inName,"sellAmoText") ) { return ::hx::Val( sellAmoText ); }
		if (HX_FIELD_EQ(inName,"shibaInvest") ) { return ::hx::Val( shibaInvest ); }
		if (HX_FIELD_EQ(inName,"nftPrizeNow") ) { return ::hx::Val( nftPrizeNow ); }
		if (HX_FIELD_EQ(inName,"nftWaveText") ) { return ::hx::Val( nftWaveText ); }
		if (HX_FIELD_EQ(inName,"rodPrizeNow") ) { return ::hx::Val( rodPrizeNow ); }
		if (HX_FIELD_EQ(inName,"rodWaveText") ) { return ::hx::Val( rodWaveText ); }
		if (HX_FIELD_EQ(inName,"shibaNewsUp") ) { return ::hx::Val( shibaNewsUp ); }
		if (HX_FIELD_EQ(inName,"nftNewsDown") ) { return ::hx::Val( nftNewsDown ); }
		if (HX_FIELD_EQ(inName,"dexCoinIcon") ) { return ::hx::Val( dexCoinIcon ); }
		if (HX_FIELD_EQ(inName,"dexCoinText") ) { return ::hx::Val( dexCoinText ); }
		if (HX_FIELD_EQ(inName,"updateEnter") ) { return ::hx::Val( updateEnter_dyn() ); }
		if (HX_FIELD_EQ(inName,"setMainShop") ) { return ::hx::Val( setMainShop_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"shibaNotifUi") ) { return ::hx::Val( shibaNotifUi ); }
		if (HX_FIELD_EQ(inName,"nftNotifText") ) { return ::hx::Val( nftNotifText ); }
		if (HX_FIELD_EQ(inName,"countNftWave") ) { return ::hx::Val( countNftWave_dyn() ); }
		if (HX_FIELD_EQ(inName,"countRodWave") ) { return ::hx::Val( countRodWave_dyn() ); }
		if (HX_FIELD_EQ(inName,"notification") ) { return ::hx::Val( notification_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bananaCounter") ) { return ::hx::Val( bananaCounter ); }
		if (HX_FIELD_EQ(inName,"shibaPrizeNow") ) { return ::hx::Val( shibaPrizeNow ); }
		if (HX_FIELD_EQ(inName,"shibaWaveText") ) { return ::hx::Val( shibaWaveText ); }
		if (HX_FIELD_EQ(inName,"shibaNewsDown") ) { return ::hx::Val( shibaNewsDown ); }
		if (HX_FIELD_EQ(inName,"nftNotifTimer") ) { return ::hx::Val( nftNotifTimer ); }
		if (HX_FIELD_EQ(inName,"appleCoinIcon") ) { return ::hx::Val( appleCoinIcon ); }
		if (HX_FIELD_EQ(inName,"appleCoinText") ) { return ::hx::Val( appleCoinText ); }
		if (HX_FIELD_EQ(inName,"shopChatStart") ) { return ::hx::Val( shopChatStart_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"diamondCounter") ) { return ::hx::Val( diamondCounter ); }
		if (HX_FIELD_EQ(inName,"shibaNotifText") ) { return ::hx::Val( shibaNotifText ); }
		if (HX_FIELD_EQ(inName,"bananaCoinIcon") ) { return ::hx::Val( bananaCoinIcon ); }
		if (HX_FIELD_EQ(inName,"bananaCoinText") ) { return ::hx::Val( bananaCoinText ); }
		if (HX_FIELD_EQ(inName,"countShibaWave") ) { return ::hx::Val( countShibaWave_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"shibaNotifTimer") ) { return ::hx::Val( shibaNotifTimer ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"bananaCounterText") ) { return ::hx::Val( bananaCounterText ); }
		if (HX_FIELD_EQ(inName,"bananaCounterIcon") ) { return ::hx::Val( bananaCounterIcon ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Bag_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast< int >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"txt") ) { txt=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nft") ) { nft=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rod") ) { rod=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ufo") ) { ufo=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"move") ) { move=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"save") ) { save=inValue.Cast<  ::flixel::util::FlxSave >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"nftUi") ) { nftUi=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rodUi") ) { rodUi=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check") ) { check=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shiba") ) { shiba=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shopUi") ) { shopUi=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"itemUi") ) { itemUi=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dealUi") ) { dealUi=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cancel") ) { cancel=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buyCho") ) { buyCho=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rodNum") ) { rodNum=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"shibaUi") ) { shibaUi=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"noNoise") ) { noNoise=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shopCho") ) { shopCho=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sellCho") ) { sellCho=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chatCho") ) { chatCho=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointer") ) { pointer=inValue.Cast<  ::Pointer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nftWave") ) { nftWave=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rodWave") ) { rodWave=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dexCoin") ) { dexCoin=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"dealText") ) { dealText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shopText") ) { shopText=inValue.Cast<  ::Text >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mainChat") ) { mainChat=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enterCur") ) { enterCur=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nftTimer") ) { nftTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"firstNft") ) { firstNft=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rodTimer") ) { rodTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nftNotif") ) { nftNotif=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"diamondUi") ) { diamondUi=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shibaWave") ) { shibaWave=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nftInvest") ) { nftInvest=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rodInvest") ) { rodInvest=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nftNewsUp") ) { nftNewsUp=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"appleCoin") ) { appleCoin=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"nftNotifUi") ) { nftNotifUi=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bananaSell") ) { bananaSell=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shopChoice") ) { shopChoice=inValue.Cast<  ::ShopChoice >(); return inValue; }
		if (HX_FIELD_EQ(inName,"buyChoices") ) { buyChoices=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shibaTimer") ) { shibaTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"firstShiba") ) { firstShiba=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rodWaveAdd") ) { rodWaveAdd=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"notifTimer") ) { notifTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shibaNotif") ) { shibaNotif=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bananaCoin") ) { bananaCoin=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"diamondText") ) { diamondText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diamondIcon") ) { diamondIcon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mainChoices") ) { mainChoices=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sellChoices") ) { sellChoices=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"chatChoices") ) { chatChoices=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"textRunDone") ) { textRunDone=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sellAmoText") ) { sellAmoText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shibaInvest") ) { shibaInvest=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nftPrizeNow") ) { nftPrizeNow=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nftWaveText") ) { nftWaveText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rodPrizeNow") ) { rodPrizeNow=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"rodWaveText") ) { rodWaveText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shibaNewsUp") ) { shibaNewsUp=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nftNewsDown") ) { nftNewsDown=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dexCoinIcon") ) { dexCoinIcon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dexCoinText") ) { dexCoinText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"shibaNotifUi") ) { shibaNotifUi=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nftNotifText") ) { nftNotifText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"bananaCounter") ) { bananaCounter=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shibaPrizeNow") ) { shibaPrizeNow=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shibaWaveText") ) { shibaWaveText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shibaNewsDown") ) { shibaNewsDown=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nftNotifTimer") ) { nftNotifTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		if (HX_FIELD_EQ(inName,"appleCoinIcon") ) { appleCoinIcon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"appleCoinText") ) { appleCoinText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"diamondCounter") ) { diamondCounter=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shibaNotifText") ) { shibaNotifText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bananaCoinIcon") ) { bananaCoinIcon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bananaCoinText") ) { bananaCoinText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"shibaNotifTimer") ) { shibaNotifTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"bananaCounterText") ) { bananaCounterText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bananaCounterIcon") ) { bananaCounterIcon=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Bag_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("shopUi",ea,c8,6a,26));
	outFields->push(HX_("itemUi",47,ba,09,09));
	outFields->push(HX_("dealUi",20,9c,98,63));
	outFields->push(HX_("diamondUi",c8,2e,02,65));
	outFields->push(HX_("shibaUi",27,96,65,f9));
	outFields->push(HX_("nftUi",b0,e2,d7,99));
	outFields->push(HX_("rodUi",3b,fc,58,ed));
	outFields->push(HX_("shibaNotifUi",71,09,c4,4b));
	outFields->push(HX_("nftNotifUi",48,ac,62,b4));
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("check",c8,98,b6,45));
	outFields->push(HX_("move",11,e3,60,48));
	outFields->push(HX_("cancel",7a,ed,33,b8));
	outFields->push(HX_("noNoise",99,13,c6,72));
	outFields->push(HX_("bananaCounter",17,49,85,13));
	outFields->push(HX_("diamondCounter",08,c2,48,b6));
	outFields->push(HX_("diamondText",21,9a,55,4c));
	outFields->push(HX_("diamondIcon",ed,b4,0e,45));
	outFields->push(HX_("bananaCounterText",64,19,68,70));
	outFields->push(HX_("bananaCounterIcon",30,34,21,69));
	outFields->push(HX_("dealText",79,0d,64,ef));
	outFields->push(HX_("shopCho",d4,5a,f7,76));
	outFields->push(HX_("shopText",c3,80,b2,ac));
	outFields->push(HX_("mainChat",b1,d3,41,9a));
	outFields->push(HX_("bananaSell",97,62,93,eb));
	outFields->push(HX_("buyCho",84,3e,09,dd));
	outFields->push(HX_("sellCho",b8,ad,0c,87));
	outFields->push(HX_("chatCho",32,aa,a8,d0));
	outFields->push(HX_("pointer",bd,c0,21,51));
	outFields->push(HX_("shopChoice",f7,24,0e,07));
	outFields->push(HX_("mainChoices",b9,0e,05,7a));
	outFields->push(HX_("buyChoices",4c,af,17,b4));
	outFields->push(HX_("sellChoices",80,c8,d4,86));
	outFields->push(HX_("chatChoices",fa,89,01,73));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("txt",70,6e,58,00));
	outFields->push(HX_("i",69,00,00,00));
	outFields->push(HX_("textRunDone",40,00,2b,ab));
	outFields->push(HX_("enterCur",48,0f,8c,43));
	outFields->push(HX_("sellAmoText",de,c2,92,25));
	outFields->push(HX_("shibaPrizeNow",b7,e5,1d,52));
	outFields->push(HX_("shiba",f3,e8,22,7c));
	outFields->push(HX_("shibaWaveText",19,7f,a0,2f));
	outFields->push(HX_("shibaTimer",d2,f5,6f,e0));
	outFields->push(HX_("firstShiba",a3,32,01,ba));
	outFields->push(HX_("shibaInvest",48,fd,8d,02));
	outFields->push(HX_("shibaWave",4c,70,e1,4f));
	outFields->push(HX_("nftPrizeNow",00,bf,4d,74));
	outFields->push(HX_("nft",3c,d1,53,00));
	outFields->push(HX_("nftWaveText",62,58,d0,51));
	outFields->push(HX_("nftTimer",e9,64,03,2a));
	outFields->push(HX_("firstNft",ec,4e,13,f1));
	outFields->push(HX_("nftInvest",51,c2,fb,19));
	outFields->push(HX_("nftWave",15,b1,e6,aa));
	outFields->push(HX_("rodPrizeNow",cb,12,4f,0b));
	outFields->push(HX_("rod",07,e2,56,00));
	outFields->push(HX_("rodWaveText",2d,ac,d1,e8));
	outFields->push(HX_("rodTimer",3e,94,58,1f));
	outFields->push(HX_("rodInvest",5c,fd,2f,cf));
	outFields->push(HX_("rodWave",60,83,09,b4));
	outFields->push(HX_("rodWaveAdd",a1,82,30,8e));
	outFields->push(HX_("rodNum",7f,72,7e,c0));
	outFields->push(HX_("notifTimer",f5,71,9f,7b));
	outFields->push(HX_("shibaNotif",bd,15,05,70));
	outFields->push(HX_("shibaNewsDown",28,fe,9b,3e));
	outFields->push(HX_("shibaNewsUp",a1,4e,6f,d4));
	outFields->push(HX_("shibaNotifText",0a,31,42,cb));
	outFields->push(HX_("shibaNotifTimer",c8,2c,45,11));
	outFields->push(HX_("nftNotif",d4,84,98,b9));
	outFields->push(HX_("nftNewsDown",71,d7,cb,60));
	outFields->push(HX_("nftNewsUp",aa,13,dd,eb));
	outFields->push(HX_("nftNotifText",a1,77,f0,92));
	outFields->push(HX_("nftNotifTimer",51,aa,14,02));
	outFields->push(HX_("bananaCoinIcon",2f,a3,64,18));
	outFields->push(HX_("bananaCoinText",63,88,ab,1f));
	outFields->push(HX_("bananaCoin",96,8c,07,e1));
	outFields->push(HX_("appleCoinIcon",24,91,c2,6d));
	outFields->push(HX_("appleCoinText",58,76,09,75));
	outFields->push(HX_("appleCoin",0b,1c,90,a7));
	outFields->push(HX_("dexCoinIcon",a1,8a,87,97));
	outFields->push(HX_("dexCoinText",d5,6f,ce,9e));
	outFields->push(HX_("dexCoin",08,53,21,e5));
	outFields->push(HX_("ufo",fe,20,59,00));
	outFields->push(HX_("save",3d,8b,4d,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Bag_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Bag_obj,shopUi),HX_("shopUi",ea,c8,6a,26)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Bag_obj,itemUi),HX_("itemUi",47,ba,09,09)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Bag_obj,dealUi),HX_("dealUi",20,9c,98,63)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Bag_obj,diamondUi),HX_("diamondUi",c8,2e,02,65)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Bag_obj,shibaUi),HX_("shibaUi",27,96,65,f9)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Bag_obj,nftUi),HX_("nftUi",b0,e2,d7,99)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Bag_obj,rodUi),HX_("rodUi",3b,fc,58,ed)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Bag_obj,shibaNotifUi),HX_("shibaNotifUi",71,09,c4,4b)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(Bag_obj,nftNotifUi),HX_("nftNotifUi",48,ac,62,b4)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Bag_obj,background),HX_("background",ee,93,1d,26)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(Bag_obj,check),HX_("check",c8,98,b6,45)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(Bag_obj,move),HX_("move",11,e3,60,48)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(Bag_obj,cancel),HX_("cancel",7a,ed,33,b8)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(Bag_obj,noNoise),HX_("noNoise",99,13,c6,72)},
	{::hx::fsInt,(int)offsetof(Bag_obj,bananaCounter),HX_("bananaCounter",17,49,85,13)},
	{::hx::fsFloat,(int)offsetof(Bag_obj,diamondCounter),HX_("diamondCounter",08,c2,48,b6)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Bag_obj,diamondText),HX_("diamondText",21,9a,55,4c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Bag_obj,diamondIcon),HX_("diamondIcon",ed,b4,0e,45)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Bag_obj,bananaCounterText),HX_("bananaCounterText",64,19,68,70)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Bag_obj,bananaCounterIcon),HX_("bananaCounterIcon",30,34,21,69)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Bag_obj,dealText),HX_("dealText",79,0d,64,ef)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Bag_obj,shopCho),HX_("shopCho",d4,5a,f7,76)},
	{::hx::fsObject /*  ::Text */ ,(int)offsetof(Bag_obj,shopText),HX_("shopText",c3,80,b2,ac)},
	{::hx::fsString,(int)offsetof(Bag_obj,mainChat),HX_("mainChat",b1,d3,41,9a)},
	{::hx::fsInt,(int)offsetof(Bag_obj,bananaSell),HX_("bananaSell",97,62,93,eb)},
	{::hx::fsString,(int)offsetof(Bag_obj,buyCho),HX_("buyCho",84,3e,09,dd)},
	{::hx::fsString,(int)offsetof(Bag_obj,sellCho),HX_("sellCho",b8,ad,0c,87)},
	{::hx::fsString,(int)offsetof(Bag_obj,chatCho),HX_("chatCho",32,aa,a8,d0)},
	{::hx::fsObject /*  ::Pointer */ ,(int)offsetof(Bag_obj,pointer),HX_("pointer",bd,c0,21,51)},
	{::hx::fsObject /*  ::ShopChoice */ ,(int)offsetof(Bag_obj,shopChoice),HX_("shopChoice",f7,24,0e,07)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Bag_obj,mainChoices),HX_("mainChoices",b9,0e,05,7a)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Bag_obj,buyChoices),HX_("buyChoices",4c,af,17,b4)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Bag_obj,sellChoices),HX_("sellChoices",80,c8,d4,86)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Bag_obj,chatChoices),HX_("chatChoices",fa,89,01,73)},
	{::hx::fsString,(int)offsetof(Bag_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsBool,(int)offsetof(Bag_obj,txt),HX_("txt",70,6e,58,00)},
	{::hx::fsInt,(int)offsetof(Bag_obj,i),HX_("i",69,00,00,00)},
	{::hx::fsBool,(int)offsetof(Bag_obj,textRunDone),HX_("textRunDone",40,00,2b,ab)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Bag_obj,enterCur),HX_("enterCur",48,0f,8c,43)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Bag_obj,sellAmoText),HX_("sellAmoText",de,c2,92,25)},
	{::hx::fsFloat,(int)offsetof(Bag_obj,shibaPrizeNow),HX_("shibaPrizeNow",b7,e5,1d,52)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Bag_obj,shiba),HX_("shiba",f3,e8,22,7c)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Bag_obj,shibaWaveText),HX_("shibaWaveText",19,7f,a0,2f)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(Bag_obj,shibaTimer),HX_("shibaTimer",d2,f5,6f,e0)},
	{::hx::fsBool,(int)offsetof(Bag_obj,firstShiba),HX_("firstShiba",a3,32,01,ba)},
	{::hx::fsInt,(int)offsetof(Bag_obj,shibaInvest),HX_("shibaInvest",48,fd,8d,02)},
	{::hx::fsFloat,(int)offsetof(Bag_obj,shibaWave),HX_("shibaWave",4c,70,e1,4f)},
	{::hx::fsFloat,(int)offsetof(Bag_obj,nftPrizeNow),HX_("nftPrizeNow",00,bf,4d,74)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Bag_obj,nft),HX_("nft",3c,d1,53,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Bag_obj,nftWaveText),HX_("nftWaveText",62,58,d0,51)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(Bag_obj,nftTimer),HX_("nftTimer",e9,64,03,2a)},
	{::hx::fsBool,(int)offsetof(Bag_obj,firstNft),HX_("firstNft",ec,4e,13,f1)},
	{::hx::fsInt,(int)offsetof(Bag_obj,nftInvest),HX_("nftInvest",51,c2,fb,19)},
	{::hx::fsFloat,(int)offsetof(Bag_obj,nftWave),HX_("nftWave",15,b1,e6,aa)},
	{::hx::fsFloat,(int)offsetof(Bag_obj,rodPrizeNow),HX_("rodPrizeNow",cb,12,4f,0b)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Bag_obj,rod),HX_("rod",07,e2,56,00)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Bag_obj,rodWaveText),HX_("rodWaveText",2d,ac,d1,e8)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(Bag_obj,rodTimer),HX_("rodTimer",3e,94,58,1f)},
	{::hx::fsInt,(int)offsetof(Bag_obj,rodInvest),HX_("rodInvest",5c,fd,2f,cf)},
	{::hx::fsFloat,(int)offsetof(Bag_obj,rodWave),HX_("rodWave",60,83,09,b4)},
	{::hx::fsFloat,(int)offsetof(Bag_obj,rodWaveAdd),HX_("rodWaveAdd",a1,82,30,8e)},
	{::hx::fsInt,(int)offsetof(Bag_obj,rodNum),HX_("rodNum",7f,72,7e,c0)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(Bag_obj,notifTimer),HX_("notifTimer",f5,71,9f,7b)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Bag_obj,shibaNotif),HX_("shibaNotif",bd,15,05,70)},
	{::hx::fsString,(int)offsetof(Bag_obj,shibaNewsDown),HX_("shibaNewsDown",28,fe,9b,3e)},
	{::hx::fsString,(int)offsetof(Bag_obj,shibaNewsUp),HX_("shibaNewsUp",a1,4e,6f,d4)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Bag_obj,shibaNotifText),HX_("shibaNotifText",0a,31,42,cb)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(Bag_obj,shibaNotifTimer),HX_("shibaNotifTimer",c8,2c,45,11)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Bag_obj,nftNotif),HX_("nftNotif",d4,84,98,b9)},
	{::hx::fsString,(int)offsetof(Bag_obj,nftNewsDown),HX_("nftNewsDown",71,d7,cb,60)},
	{::hx::fsString,(int)offsetof(Bag_obj,nftNewsUp),HX_("nftNewsUp",aa,13,dd,eb)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Bag_obj,nftNotifText),HX_("nftNotifText",a1,77,f0,92)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(Bag_obj,nftNotifTimer),HX_("nftNotifTimer",51,aa,14,02)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Bag_obj,bananaCoinIcon),HX_("bananaCoinIcon",2f,a3,64,18)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Bag_obj,bananaCoinText),HX_("bananaCoinText",63,88,ab,1f)},
	{::hx::fsFloat,(int)offsetof(Bag_obj,bananaCoin),HX_("bananaCoin",96,8c,07,e1)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Bag_obj,appleCoinIcon),HX_("appleCoinIcon",24,91,c2,6d)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Bag_obj,appleCoinText),HX_("appleCoinText",58,76,09,75)},
	{::hx::fsFloat,(int)offsetof(Bag_obj,appleCoin),HX_("appleCoin",0b,1c,90,a7)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Bag_obj,dexCoinIcon),HX_("dexCoinIcon",a1,8a,87,97)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Bag_obj,dexCoinText),HX_("dexCoinText",d5,6f,ce,9e)},
	{::hx::fsFloat,(int)offsetof(Bag_obj,dexCoin),HX_("dexCoin",08,53,21,e5)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Bag_obj,ufo),HX_("ufo",fe,20,59,00)},
	{::hx::fsObject /*  ::flixel::util::FlxSave */ ,(int)offsetof(Bag_obj,save),HX_("save",3d,8b,4d,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Bag_obj_sStaticStorageInfo = 0;
#endif

static ::String Bag_obj_sMemberFields[] = {
	HX_("shopUi",ea,c8,6a,26),
	HX_("itemUi",47,ba,09,09),
	HX_("dealUi",20,9c,98,63),
	HX_("diamondUi",c8,2e,02,65),
	HX_("shibaUi",27,96,65,f9),
	HX_("nftUi",b0,e2,d7,99),
	HX_("rodUi",3b,fc,58,ed),
	HX_("shibaNotifUi",71,09,c4,4b),
	HX_("nftNotifUi",48,ac,62,b4),
	HX_("background",ee,93,1d,26),
	HX_("check",c8,98,b6,45),
	HX_("move",11,e3,60,48),
	HX_("cancel",7a,ed,33,b8),
	HX_("noNoise",99,13,c6,72),
	HX_("bananaCounter",17,49,85,13),
	HX_("diamondCounter",08,c2,48,b6),
	HX_("diamondText",21,9a,55,4c),
	HX_("diamondIcon",ed,b4,0e,45),
	HX_("bananaCounterText",64,19,68,70),
	HX_("bananaCounterIcon",30,34,21,69),
	HX_("dealText",79,0d,64,ef),
	HX_("shopCho",d4,5a,f7,76),
	HX_("shopText",c3,80,b2,ac),
	HX_("mainChat",b1,d3,41,9a),
	HX_("bananaSell",97,62,93,eb),
	HX_("buyCho",84,3e,09,dd),
	HX_("sellCho",b8,ad,0c,87),
	HX_("chatCho",32,aa,a8,d0),
	HX_("pointer",bd,c0,21,51),
	HX_("shopChoice",f7,24,0e,07),
	HX_("mainChoices",b9,0e,05,7a),
	HX_("buyChoices",4c,af,17,b4),
	HX_("sellChoices",80,c8,d4,86),
	HX_("chatChoices",fa,89,01,73),
	HX_("name",4b,72,ff,48),
	HX_("txt",70,6e,58,00),
	HX_("i",69,00,00,00),
	HX_("textRunDone",40,00,2b,ab),
	HX_("enterCur",48,0f,8c,43),
	HX_("sellAmoText",de,c2,92,25),
	HX_("shibaPrizeNow",b7,e5,1d,52),
	HX_("shiba",f3,e8,22,7c),
	HX_("shibaWaveText",19,7f,a0,2f),
	HX_("shibaTimer",d2,f5,6f,e0),
	HX_("firstShiba",a3,32,01,ba),
	HX_("shibaInvest",48,fd,8d,02),
	HX_("shibaWave",4c,70,e1,4f),
	HX_("nftPrizeNow",00,bf,4d,74),
	HX_("nft",3c,d1,53,00),
	HX_("nftWaveText",62,58,d0,51),
	HX_("nftTimer",e9,64,03,2a),
	HX_("firstNft",ec,4e,13,f1),
	HX_("nftInvest",51,c2,fb,19),
	HX_("nftWave",15,b1,e6,aa),
	HX_("rodPrizeNow",cb,12,4f,0b),
	HX_("rod",07,e2,56,00),
	HX_("rodWaveText",2d,ac,d1,e8),
	HX_("rodTimer",3e,94,58,1f),
	HX_("rodInvest",5c,fd,2f,cf),
	HX_("rodWave",60,83,09,b4),
	HX_("rodWaveAdd",a1,82,30,8e),
	HX_("rodNum",7f,72,7e,c0),
	HX_("notifTimer",f5,71,9f,7b),
	HX_("shibaNotif",bd,15,05,70),
	HX_("shibaNewsDown",28,fe,9b,3e),
	HX_("shibaNewsUp",a1,4e,6f,d4),
	HX_("shibaNotifText",0a,31,42,cb),
	HX_("shibaNotifTimer",c8,2c,45,11),
	HX_("nftNotif",d4,84,98,b9),
	HX_("nftNewsDown",71,d7,cb,60),
	HX_("nftNewsUp",aa,13,dd,eb),
	HX_("nftNotifText",a1,77,f0,92),
	HX_("nftNotifTimer",51,aa,14,02),
	HX_("bananaCoinIcon",2f,a3,64,18),
	HX_("bananaCoinText",63,88,ab,1f),
	HX_("bananaCoin",96,8c,07,e1),
	HX_("appleCoinIcon",24,91,c2,6d),
	HX_("appleCoinText",58,76,09,75),
	HX_("appleCoin",0b,1c,90,a7),
	HX_("dexCoinIcon",a1,8a,87,97),
	HX_("dexCoinText",d5,6f,ce,9e),
	HX_("dexCoin",08,53,21,e5),
	HX_("ufo",fe,20,59,00),
	HX_("save",3d,8b,4d,4c),
	HX_("bagUiShow",59,cd,3e,d0),
	HX_("updateBag",3f,8f,d7,82),
	HX_("countShibaWave",7d,79,ff,06),
	HX_("countNftWave",06,5c,4f,36),
	HX_("countRodWave",51,2e,72,3f),
	HX_("countWave",28,ea,12,61),
	HX_("notification",eb,f6,0a,5c),
	HX_("redOrGreen",4f,a9,05,c9),
	HX_("update",09,86,05,87),
	HX_("buyAndSell",63,63,1f,63),
	HX_("updateEnter",4f,d6,1e,56),
	HX_("setMainShop",91,13,36,d5),
	HX_("shopChatStart",94,72,2f,b8),
	::String(null()) };

::hx::Class Bag_obj::__mClass;

void Bag_obj::__register()
{
	Bag_obj _hx_dummy;
	Bag_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Bag",a8,69,32,00);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Bag_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Bag_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Bag_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Bag_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

