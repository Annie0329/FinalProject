// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_MissionText
#include <MissionText.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Tip
#include <Tip.h>
#endif
#ifndef INCLUDED_TipText
#include <TipText.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_text_FlxTypeText
#include <flixel/addons/text/FlxTypeText.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_utils_Assets
#include <openfl/utils/Assets.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_4583ff71a3aa143b_74_new,"Tip","new",0x3c2073ad,"Tip.new","Tip.hx",74,0x55386063)
HX_DEFINE_STACK_FRAME(_hx_pos_4583ff71a3aa143b_39_new,"Tip","new",0x3c2073ad,"Tip.new","Tip.hx",39,0x55386063)
HX_LOCAL_STACK_FRAME(_hx_pos_4583ff71a3aa143b_100_tipGetText,"Tip","tipGetText",0x022c049b,"Tip.tipGetText","Tip.hx",100,0x55386063)
HX_LOCAL_STACK_FRAME(_hx_pos_4583ff71a3aa143b_81_tipGetText,"Tip","tipGetText",0x022c049b,"Tip.tipGetText","Tip.hx",81,0x55386063)
HX_LOCAL_STACK_FRAME(_hx_pos_4583ff71a3aa143b_106_missionGetText,"Tip","missionGetText",0x6b6efb4a,"Tip.missionGetText","Tip.hx",106,0x55386063)
HX_LOCAL_STACK_FRAME(_hx_pos_4583ff71a3aa143b_117_update,"Tip","update",0xa36630dc,"Tip.update","Tip.hx",117,0x55386063)

void Tip_obj::__construct(){
            		HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(1)
            		void _hx_run( ::flixel::FlxSprite sprite){
            			HX_GC_STACKFRAME(&_hx_pos_4583ff71a3aa143b_74_new)
HXLINE(  74)			sprite->scrollFactor->set(0,0);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_4583ff71a3aa143b_39_new)
HXLINE(  48)		this->k = HX_("ouiMission",09,ae,25,3f);
HXLINE(  47)		this->j = HX_("oui",83,a0,54,00);
HXLINE(  56)		super::__construct(null());
HXLINE(  58)		this->background =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,990,795,HX_("assets/images/tip.png",cb,ab,be,60));
HXLINE(  59)		this->add(this->background);
HXLINE(  61)		Float _hx_tmp = (this->background->x + 33);
HXDLIN(  61)		Float _hx_tmp1 = (this->background->y + 126);
HXDLIN(  61)		this->missionText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,_hx_tmp,_hx_tmp1,::Std_obj::_hx_int((this->background->get_width() - ( (Float)(30) ))),HX_("text",ad,cc,f9,4c),60,true);
HXLINE(  62)		this->missionText->set_font(HX_("assets/data/silver.ttf",3e,fd,5b,64));
HXLINE(  63)		this->add(this->missionText);
HXLINE(  65)		Float _hx_tmp2 = this->missionText->x;
HXDLIN(  65)		Float _hx_tmp3 = (this->missionText->y + 60);
HXDLIN(  65)		this->tipText =  ::flixel::addons::text::FlxTypeText_obj::__alloc( HX_CTX ,_hx_tmp2,_hx_tmp3,::Std_obj::_hx_int((this->background->get_width() - ( (Float)(30) ))),HX_("text",ad,cc,f9,4c),60,true);
HXLINE(  66)		this->tipText->set_font(HX_("assets/data/silver.ttf",3e,fd,5b,64));
HXLINE(  67)		this->add(this->tipText);
HXLINE(  68)		this->tipText->set_visible(false);
HXLINE(  70)		this->tip_boxes = ::openfl::utils::Assets_obj::getText(HX_("assets/data/tipText.txt",51,66,fe,25)).split(HX_(":",3a,00,00,00));
HXLINE(  71)		this->mis_boxes = ::openfl::utils::Assets_obj::getText(HX_("assets/data/missionText.txt",c2,fd,da,af)).split(HX_(":",3a,00,00,00));
HXLINE(  74)		this->forEach( ::Dynamic(new _hx_Closure_0()),null());
HXLINE(  75)		this->set_visible(false);
HXLINE(  76)		this->set_active(false);
            	}

Dynamic Tip_obj::__CreateEmpty() { return new Tip_obj; }

void *Tip_obj::_hx_vtable = 0;

Dynamic Tip_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Tip_obj > _hx_result = new Tip_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Tip_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x7ccf8994) {
		if (inClassId<=(int)0x62817b24) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x62817b24;
		} else {
			return inClassId==(int)0x7ccf8994;
		}
	} else {
		return inClassId==(int)0x7ee45dcf;
	}
}

void Tip_obj::tipGetText( ::TipText title){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::Tip,_gthis) HXARGC(1)
            		void _hx_run( ::flixel::util::FlxTimer timer){
            			HX_GC_STACKFRAME(&_hx_pos_4583ff71a3aa143b_100_tipGetText)
HXLINE( 100)			_gthis->tipText->set_visible(false);
            		}
            		HX_END_LOCAL_FUNC1((void))

            	HX_GC_STACKFRAME(&_hx_pos_4583ff71a3aa143b_81_tipGetText)
HXDLIN(  81)		 ::Tip _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE(  82)		if (this->tipText->visible) {
HXLINE(  83)			this->tipTimer->cancel();
            		}
            		else {
HXLINE(  85)			this->tipText->set_visible(true);
            		}
HXLINE(  87)		this->j = ::Std_obj::string(title);
HXLINE(  88)		{
HXLINE(  88)			int _g = 0;
HXDLIN(  88)			int _g1 = this->tip_boxes->length;
HXDLIN(  88)			while((_g < _g1)){
HXLINE(  88)				_g = (_g + 1);
HXDLIN(  88)				int i = (_g - 1);
HXLINE(  90)				if ((this->j == this->tip_boxes->__get(i))) {
HXLINE(  93)					this->tipText->resetText(this->tip_boxes->__get((i + 1)));
HXLINE(  94)					this->tipText->start(null(),true,null(),null(),null());
            				}
            			}
            		}
HXLINE(  98)		this->tipTimer =  ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(10, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tip_obj,tipGetText,(void))

void Tip_obj::missionGetText( ::MissionText title){
            	HX_STACKFRAME(&_hx_pos_4583ff71a3aa143b_106_missionGetText)
HXLINE( 107)		this->k = ::Std_obj::string(title);
HXLINE( 108)		{
HXLINE( 108)			int _g = 0;
HXDLIN( 108)			int _g1 = this->mis_boxes->length;
HXDLIN( 108)			while((_g < _g1)){
HXLINE( 108)				_g = (_g + 1);
HXDLIN( 108)				int i = (_g - 1);
HXLINE( 110)				if ((this->k == this->mis_boxes->__get(i))) {
HXLINE( 111)					this->missionText->set_text(this->mis_boxes->__get((i + 1)));
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Tip_obj,missionGetText,(void))

void Tip_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_4583ff71a3aa143b_117_update)
HXDLIN( 117)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< Tip_obj > Tip_obj::__new() {
	::hx::ObjectPtr< Tip_obj > __this = new Tip_obj();
	__this->__construct();
	return __this;
}

::hx::ObjectPtr< Tip_obj > Tip_obj::__alloc(::hx::Ctx *_hx_ctx) {
	Tip_obj *__this = (Tip_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Tip_obj), true, "Tip"));
	*(void **)__this = Tip_obj::_hx_vtable;
	__this->__construct();
	return __this;
}

Tip_obj::Tip_obj()
{
}

void Tip_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Tip);
	HX_MARK_MEMBER_NAME(background,"background");
	HX_MARK_MEMBER_NAME(missionText,"missionText");
	HX_MARK_MEMBER_NAME(tipText,"tipText");
	HX_MARK_MEMBER_NAME(i,"i");
	HX_MARK_MEMBER_NAME(j,"j");
	HX_MARK_MEMBER_NAME(k,"k");
	HX_MARK_MEMBER_NAME(tip_boxes,"tip_boxes");
	HX_MARK_MEMBER_NAME(mis_boxes,"mis_boxes");
	HX_MARK_MEMBER_NAME(tipTimer,"tipTimer");
	 ::flixel::group::FlxTypedGroup_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Tip_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(background,"background");
	HX_VISIT_MEMBER_NAME(missionText,"missionText");
	HX_VISIT_MEMBER_NAME(tipText,"tipText");
	HX_VISIT_MEMBER_NAME(i,"i");
	HX_VISIT_MEMBER_NAME(j,"j");
	HX_VISIT_MEMBER_NAME(k,"k");
	HX_VISIT_MEMBER_NAME(tip_boxes,"tip_boxes");
	HX_VISIT_MEMBER_NAME(mis_boxes,"mis_boxes");
	HX_VISIT_MEMBER_NAME(tipTimer,"tipTimer");
	 ::flixel::group::FlxTypedGroup_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Tip_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { return ::hx::Val( i ); }
		if (HX_FIELD_EQ(inName,"j") ) { return ::hx::Val( j ); }
		if (HX_FIELD_EQ(inName,"k") ) { return ::hx::Val( k ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tipText") ) { return ::hx::Val( tipText ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tipTimer") ) { return ::hx::Val( tipTimer ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tip_boxes") ) { return ::hx::Val( tip_boxes ); }
		if (HX_FIELD_EQ(inName,"mis_boxes") ) { return ::hx::Val( mis_boxes ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { return ::hx::Val( background ); }
		if (HX_FIELD_EQ(inName,"tipGetText") ) { return ::hx::Val( tipGetText_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"missionText") ) { return ::hx::Val( missionText ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"missionGetText") ) { return ::hx::Val( missionGetText_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Tip_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"i") ) { i=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"j") ) { j=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"k") ) { k=inValue.Cast< ::String >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"tipText") ) { tipText=inValue.Cast<  ::flixel::addons::text::FlxTypeText >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"tipTimer") ) { tipTimer=inValue.Cast<  ::flixel::util::FlxTimer >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"tip_boxes") ) { tip_boxes=inValue.Cast< ::Array< ::String > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mis_boxes") ) { mis_boxes=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"background") ) { background=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"missionText") ) { missionText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Tip_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("background",ee,93,1d,26));
	outFields->push(HX_("missionText",19,cf,2b,2f));
	outFields->push(HX_("tipText",a8,a3,e6,87));
	outFields->push(HX_("i",69,00,00,00));
	outFields->push(HX_("j",6a,00,00,00));
	outFields->push(HX_("k",6b,00,00,00));
	outFields->push(HX_("tip_boxes",15,8e,5e,ef));
	outFields->push(HX_("mis_boxes",51,13,85,a7));
	outFields->push(HX_("tipTimer",6a,04,85,64));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Tip_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(Tip_obj,background),HX_("background",ee,93,1d,26)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(Tip_obj,missionText),HX_("missionText",19,cf,2b,2f)},
	{::hx::fsObject /*  ::flixel::addons::text::FlxTypeText */ ,(int)offsetof(Tip_obj,tipText),HX_("tipText",a8,a3,e6,87)},
	{::hx::fsInt,(int)offsetof(Tip_obj,i),HX_("i",69,00,00,00)},
	{::hx::fsString,(int)offsetof(Tip_obj,j),HX_("j",6a,00,00,00)},
	{::hx::fsString,(int)offsetof(Tip_obj,k),HX_("k",6b,00,00,00)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Tip_obj,tip_boxes),HX_("tip_boxes",15,8e,5e,ef)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(Tip_obj,mis_boxes),HX_("mis_boxes",51,13,85,a7)},
	{::hx::fsObject /*  ::flixel::util::FlxTimer */ ,(int)offsetof(Tip_obj,tipTimer),HX_("tipTimer",6a,04,85,64)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Tip_obj_sStaticStorageInfo = 0;
#endif

static ::String Tip_obj_sMemberFields[] = {
	HX_("background",ee,93,1d,26),
	HX_("missionText",19,cf,2b,2f),
	HX_("tipText",a8,a3,e6,87),
	HX_("i",69,00,00,00),
	HX_("j",6a,00,00,00),
	HX_("k",6b,00,00,00),
	HX_("tip_boxes",15,8e,5e,ef),
	HX_("mis_boxes",51,13,85,a7),
	HX_("tipTimer",6a,04,85,64),
	HX_("tipGetText",48,f4,a1,99),
	HX_("missionGetText",77,c5,5a,c2),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Tip_obj::__mClass;

void Tip_obj::__register()
{
	Tip_obj _hx_dummy;
	Tip_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Tip",3b,19,40,00);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Tip_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Tip_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Tip_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Tip_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

