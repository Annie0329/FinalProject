// Generated by Haxe 4.2.1+bf9ff69
#ifndef INCLUDED_Dia
#define INCLUDED_Dia

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
HX_DECLARE_CLASS0(Dia)
HX_DECLARE_CLASS0(NpcType)
HX_DECLARE_CLASS0(Pointer)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxObject)
HX_DECLARE_CLASS1(flixel,FlxSprite)
HX_DECLARE_CLASS3(flixel,addons,text,FlxTypeText)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,_hx_system,FlxSound)
HX_DECLARE_CLASS2(flixel,text,FlxText)
HX_DECLARE_CLASS2(flixel,util,FlxSave)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)



class HXCPP_CLASS_ATTRIBUTES Dia_obj : public  ::flixel::group::FlxTypedGroup_obj
{
	public:
		typedef  ::flixel::group::FlxTypedGroup_obj super;
		typedef Dia_obj OBJ_;
		Dia_obj();

	public:
		enum { _hx_ClassId = 0x7ed839b0 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="Dia")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"Dia"); }
		static ::hx::ObjectPtr< Dia_obj > __new();
		static ::hx::ObjectPtr< Dia_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Dia_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Dia",1c,f5,33,00); }

		bool win;
		 ::flixel::FlxSprite background;
		 ::flixel::addons::text::FlxTypeText text;
		 ::flixel::FlxSprite enterCur;
		 ::flixel::_hx_system::FlxSound next;
		 ::flixel::_hx_system::FlxSound check;
		 ::flixel::_hx_system::FlxSound cancel;
		 ::flixel::FlxSprite minerPoster;
		int i;
		int profile;
		::String profilePic;
		 ::NpcType npcType;
		::String name;
		::Array< ::String > dilog_boxes;
		bool txt;
		bool textRunDone;
		::String saveShow;
		::String diaUpDown;
		 ::Pointer pointer;
		::String pointerQ;
		bool saveStoneIntro;
		bool stoneTextYes;
		bool leafYes;
		bool talkMiss;
		bool talkDone;
		bool readDaSign;
		bool lakeTalking;
		bool saveStoneYes;
		Float appleCoin;
		Float bananaCoin;
		Float dexCoin;
		Float rodWave;
		 ::flixel::text::FlxText coinText;
		int bck;
		int bcBananaCoinIn;
		Float bcCoinIn;
		int ack;
		int acAppleCoinIn;
		Float acCoinIn;
		int cak;
		int caCoinIn;
		Float caAppleCoinIn;
		int coinOut;
		Float machGain;
		int bananaPrize;
		int dexPrizeBuy;
		Float dexPrizeSell;
		Float interest;
		Float loanGain;
		bool loan;
		Float diamond;
		 ::flixel::text::FlxText diamondUiText;
		bool updateDiamond;
		 ::flixel::util::FlxSave save;
		void show(::String name,bool txt);
		::Dynamic show_dyn();

		void changeProfile();
		::Dynamic changeProfile_dyn();

		void diaPosition(::String diaUpDown);
		::Dynamic diaPosition_dyn();

		void getDiamond(Float diamond, ::flixel::text::FlxText diamondUiText,Float bananaCoin,Float appleCoin,Float rodWave,Float dexCoin);
		::Dynamic getDiamond_dyn();

		void saveShowTime(Float money,::String place);
		::Dynamic saveShowTime_dyn();

		void context( ::NpcType npcType);
		::Dynamic context_dyn();

		void getPointer(::String quest);
		::Dynamic getPointer_dyn();

		void updateLr();
		::Dynamic updateLr_dyn();

		void update(Float elapsed);

		void updateEnter();
		::Dynamic updateEnter_dyn();

		void updateSkip();
		::Dynamic updateSkip_dyn();

};


#endif /* INCLUDED_Dia */ 
