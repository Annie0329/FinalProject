// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_Bag
#include <Bag.h>
#endif
#ifndef INCLUDED_CombatHUD
#include <CombatHUD.h>
#endif
#ifndef INCLUDED_Dia
#include <Dia.h>
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_EnemyType
#include <EnemyType.h>
#endif
#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_MinerState
#include <MinerState.h>
#endif
#ifndef INCLUDED_MissionText
#include <MissionText.h>
#endif
#ifndef INCLUDED_NPC
#include <NPC.h>
#endif
#ifndef INCLUDED_NpcType
#include <NpcType.h>
#endif
#ifndef INCLUDED_Outcome
#include <Outcome.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Tip
#include <Tip.h>
#endif
#ifndef INCLUDED_TipText
#include <TipText.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxCameraFollowStyle
#include <flixel/FlxCameraFollowStyle.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_addons_editors_ogmo_FlxOgmo3Loader
#include <flixel/addons/editors/ogmo/FlxOgmo3Loader.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxEffectSprite
#include <flixel/addons/effects/chainable/FlxEffectSprite.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_FlxRainbowEffect
#include <flixel/addons/effects/chainable/FlxRainbowEffect.h>
#endif
#ifndef INCLUDED_flixel_addons_effects_chainable_IFlxEffect
#include <flixel/addons/effects/chainable/IFlxEffect.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxBaseTilemap
#include <flixel/tile/FlxBaseTilemap.h>
#endif
#ifndef INCLUDED_flixel_tile_FlxTilemap
#include <flixel/tile/FlxTilemap.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimer
#include <flixel/util/FlxTimer.h>
#endif
#ifndef INCLUDED_flixel_util_FlxTimerManager
#include <flixel/util/FlxTimerManager.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_af23706db05c7feb_19_new,"PlayState","new",0xf8bf96cf,"PlayState.new","PlayState.hx",19,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_109_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",109,0xb30d7781)
static const int _hx_array_data_46c2835d_2[] = {
	(int)0,(int)1,(int)2,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_252_create,"PlayState","create",0x82220fed,"PlayState.create","PlayState.hx",252,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_271_placeEntities,"PlayState","placeEntities",0xcb21ad57,"PlayState.placeEntities","PlayState.hx",271,0xb30d7781)
static const int _hx_array_data_46c2835d_6[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,(int)10,(int)11,(int)12,(int)13,(int)14,(int)15,(int)16,(int)17,(int)18,
};
static const int _hx_array_data_46c2835d_7[] = {
	(int)0,(int)1,(int)2,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_348_saveFile,"PlayState","saveFile",0xa638ef8a,"PlayState.saveFile","PlayState.hx",348,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_385_loadFile,"PlayState","loadFile",0x631f26f3,"PlayState.loadFile","PlayState.hx",385,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_478_update,"PlayState","update",0x8d182efa,"PlayState.update","PlayState.hx",478,0xb30d7781)
static const int _hx_array_data_46c2835d_11[] = {
	(int)69,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_522_updateMission,"PlayState","updateMission",0xb282ec72,"PlayState.updateMission","PlayState.hx",522,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_565_updateInCombat,"PlayState","updateInCombat",0xef0ccf13,"PlayState.updateInCombat","PlayState.hx",565,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_614_playerTouchEnemy,"PlayState","playerTouchEnemy",0xc787e8fb,"PlayState.playerTouchEnemy","PlayState.hx",614,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_641_checkEnemyVision,"PlayState","checkEnemyVision",0xe46dc499,"PlayState.checkEnemyVision","PlayState.hx",641,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_657_npcTalk,"PlayState","npcTalk",0x28eded9c,"PlayState.npcTalk","PlayState.hx",657,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_664_getBanana,"PlayState","getBanana",0x0a80614a,"PlayState.getBanana","PlayState.hx",664,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_677_goToMiner,"PlayState","goToMiner",0x8a91656b,"PlayState.goToMiner","PlayState.hx",677,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_682_goToMiner,"PlayState","goToMiner",0x8a91656b,"PlayState.goToMiner","PlayState.hx",682,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_711_shopOpen,"PlayState","shopOpen",0x58303f11,"PlayState.shopOpen","PlayState.hx",711,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_709_shopOpen,"PlayState","shopOpen",0x58303f11,"PlayState.shopOpen","PlayState.hx",709,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_719_updateTalking,"PlayState","updateTalking",0x95a6835c,"PlayState.updateTalking","PlayState.hx",719,0xb30d7781)
static const int _hx_array_data_46c2835d_23[] = {
	(int)13,(int)32,
};
static const int _hx_array_data_46c2835d_24[] = {
	(int)65,(int)83,(int)87,(int)68,(int)38,(int)40,(int)37,(int)39,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_781_updateWhenDiaInvisible,"PlayState","updateWhenDiaInvisible",0x7990ef45,"PlayState.updateWhenDiaInvisible","PlayState.hx",781,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_815_updateWhenDiaInvisible,"PlayState","updateWhenDiaInvisible",0x7990ef45,"PlayState.updateWhenDiaInvisible","PlayState.hx",815,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_831_updateWhenDiaInvisible,"PlayState","updateWhenDiaInvisible",0x7990ef45,"PlayState.updateWhenDiaInvisible","PlayState.hx",831,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_852_playerUpDown,"PlayState","playerUpDown",0x8910664f,"PlayState.playerUpDown","PlayState.hx",852,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_860_updateF4,"PlayState","updateF4",0x26bd9ea8,"PlayState.updateF4","PlayState.hx",860,0xb30d7781)
static const int _hx_array_data_46c2835d_30[] = {
	(int)115,
};
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_867_updateF4,"PlayState","updateF4",0x26bd9ea8,"PlayState.updateF4","PlayState.hx",867,0xb30d7781)
HX_LOCAL_STACK_FRAME(_hx_pos_af23706db05c7feb_874_updateC,"PlayState","updateC",0xe810ec09,"PlayState.updateC","PlayState.hx",874,0xb30d7781)
static const int _hx_array_data_46c2835d_33[] = {
	(int)67,
};

void PlayState_obj::__construct(bool loadsave){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_19_new)
HXLINE(  90)		this->getBag = false;
HXLINE(  81)		this->sea = null();
HXLINE(  73)		this->talkCounter = 0;
HXLINE(  72)		this->lakeMoney = false;
HXLINE(  71)		this->minerYes = false;
HXLINE(  70)		this->minerOpen = false;
HXLINE(  55)		this->seePlayerNow = false;
HXLINE(  54)		this->seePlayerThen = false;
HXLINE(  53)		this->nftYes = false;
HXLINE(  52)		this->shibaYes = false;
HXLINE(  51)		this->enemyFlicker = false;
HXLINE(  49)		this->inCombat = false;
HXLINE(  44)		this->twentyBanana = false;
HXLINE(  42)		this->banana = null();
HXLINE(  39)		this->talkYes = false;
HXLINE(  38)		this->txt = true;
HXLINE( 103)		super::__construct(null());
HXLINE( 104)		this->loadsave = loadsave;
            	}

Dynamic PlayState_obj::__CreateEmpty() { return new PlayState_obj; }

void *PlayState_obj::_hx_vtable = 0;

Dynamic PlayState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PlayState_obj > _hx_result = new PlayState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PlayState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x0a05f89d) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0a05f89d;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void PlayState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_109_create)
HXDLIN( 109)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 110)		this->map =  ::flixel::addons::editors::ogmo::FlxOgmo3Loader_obj::__alloc( HX_CTX ,HX_("assets/data/deFiMap.ogmo",49,bf,cf,04),HX_("assets/data/monumentMap.json",9a,09,0c,0f));
HXLINE( 113)		this->cancel = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/cancel.ogg",27,62,c6,8f),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 114)		this->bananaSound = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/pickUp.ogg",49,1b,7f,aa),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 115)		this->touchEnemy = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/touchEnemy.ogg",36,b4,7a,db),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 116)		this->openBag = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/openBag.ogg",b3,d3,d1,28),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 117)		this->doorTele = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/doorTele.ogg",65,65,21,35),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 118)		this->saveNoise = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/save.ogg",6a,12,2d,60),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE( 121)		this->ground = this->map->loadTilemap(HX_("assets/images/mtSmall.png",50,bb,bc,ad),HX_("ground",87,22,28,1c),null());
HXLINE( 122)		this->ground->follow(null(),null(),null());
HXLINE( 123)		this->add(this->ground);
HXLINE( 126)		this->road = this->map->loadTilemap(HX_("assets/images/mtSmall.png",50,bb,bc,ad),HX_("road",e0,e1,ae,4b),null());
HXLINE( 127)		this->road->follow(null(),null(),null());
HXLINE( 128)		this->add(this->road);
HXLINE( 131)		this->walls = this->map->loadTilemap(HX_("assets/images/mtSmall.png",50,bb,bc,ad),HX_("wall",0a,5d,f2,4e),null());
HXLINE( 132)		this->walls->follow(null(),null(),null());
HXLINE( 133)		this->add(this->walls);
HXLINE( 136)		this->sea =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 137)		this->add(this->sea);
HXLINE( 140)		this->treeBar =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),HX_("assets/images/treeBar.png",05,ad,03,c4));
HXLINE( 141)		this->treeBar->set_immovable(true);
HXLINE( 142)		this->add(this->treeBar);
HXLINE( 149)		this->banana =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 150)		this->add(this->banana);
HXLINE( 153)		this->minerDoor =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->loadGraphic(HX_("assets/images/minerDoor.png",bd,bc,65,6d),true,360,480,null(),null());
HXLINE( 154)		this->minerDoor->animation->add(HX_("glow",8d,4e,67,44),::Array_obj< int >::fromData( _hx_array_data_46c2835d_2,4),3,true,null(),null());
HXLINE( 155)		this->minerDoor->set_immovable(true);
HXLINE( 156)		this->minerDoor->setSize(( (Float)(360) ),( (Float)(120) ));
HXLINE( 157)		this->minerDoor->offset->set(0,360);
HXLINE( 158)		this->add(this->minerDoor);
HXLINE( 159)		this->minerDoor->animation->play(HX_("glow",8d,4e,67,44),null(),null(),null());
HXLINE( 162)		this->shop =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),null())->makeGraphic(240,240,0,null(),null());
HXLINE( 163)		this->shop->set_immovable(true);
HXLINE( 164)		this->add(this->shop);
HXLINE( 167)		this->npc =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 168)		this->add(this->npc);
HXLINE( 171)		this->enemy =  ::flixel::group::FlxTypedGroup_obj::__alloc( HX_CTX ,null());
HXLINE( 172)		this->add(this->enemy);
HXLINE( 175)		this->player =  ::Player_obj::__alloc( HX_CTX ,null(),null());
HXLINE( 176)		this->add(this->player);
HXLINE( 177)		::flixel::FlxG_obj::camera->follow(this->player,::flixel::FlxCameraFollowStyle_obj::TOPDOWN_TIGHT_dyn(),1);
HXLINE( 180)		this->dogeYes =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),HX_("assets/images/exclamDoge.png",f7,76,14,81));
HXLINE( 181)		this->dogeYes->set_visible(false);
HXLINE( 182)		this->add(this->dogeYes);
HXLINE( 184)		this->srYes =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),HX_("assets/images/exclam.png",6e,d2,fe,41));
HXLINE( 185)		this->srYes->set_visible(false);
HXLINE( 186)		this->add(this->srYes);
HXLINE( 188)		this->sgYes =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),HX_("assets/images/exclam.png",6e,d2,fe,41));
HXLINE( 189)		this->sgYes->set_visible(false);
HXLINE( 190)		this->add(this->sgYes);
HXLINE( 192)		this->sbYes =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),HX_("assets/images/exclam.png",6e,d2,fe,41));
HXLINE( 193)		this->sbYes->set_visible(false);
HXLINE( 194)		this->add(this->sbYes);
HXLINE( 196)		this->mingYes =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),HX_("assets/images/exclam.png",6e,d2,fe,41));
HXLINE( 197)		this->mingYes->set_visible(false);
HXLINE( 198)		this->add(this->mingYes);
HXLINE( 200)		this->sblackYes =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),HX_("assets/images/exclam.png",6e,d2,fe,41));
HXLINE( 201)		this->sblackYes->set_visible(false);
HXLINE( 202)		this->add(this->sblackYes);
HXLINE( 204)		this->stoneYes =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,null(),null(),HX_("assets/images/exclamDoge.png",f7,76,14,81));
HXLINE( 205)		this->add(this->stoneYes);
HXLINE( 208)		this->through = this->map->loadTilemap(HX_("assets/images/mtSmall.png",50,bb,bc,ad),HX_("through",45,48,3d,5a),null());
HXLINE( 209)		this->through->follow(null(),null(),null());
HXLINE( 210)		this->add(this->through);
HXLINE( 213)		this->tip =  ::Tip_obj::__alloc( HX_CTX );
HXLINE( 214)		this->add(this->tip);
HXLINE( 217)		this->bag =  ::Bag_obj::__alloc( HX_CTX );
HXLINE( 218)		this->add(this->bag);
HXLINE( 221)		this->combatHud =  ::CombatHUD_obj::__alloc( HX_CTX );
HXLINE( 222)		this->add(this->combatHud);
HXLINE( 225)		this->dia =  ::Dia_obj::__alloc( HX_CTX );
HXLINE( 226)		this->add(this->dia);
HXLINE( 229)		this->map->loadEntities(this->placeEntities_dyn(),HX_("entities",41,96,95,92));
HXLINE( 232)		this->ufo =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,600,HX_("ufo",fe,20,59,00),60,null());
HXLINE( 233)		this->ufo->scrollFactor->set(0,0);
HXLINE( 234)		this->add(this->ufo);
HXLINE( 235)		this->ufo->set_visible(false);
HXLINE( 238)		this->save =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE( 239)		this->save->bind(HX_("DefiAdv",6f,39,37,6e),null());
HXLINE( 242)		if (this->loadsave) {
HXLINE( 244)			::flixel::FlxG_obj::camera->fade(-16777216,((Float).33),true,null(),null());
HXLINE( 245)			this->loadFile();
            		}
            		else {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_252_create)
HXLINE( 253)				_gthis->name = HX_("assets/data/c1Opening.txt",f3,f1,45,bb);
HXLINE( 254)				_gthis->getBag = true;
HXLINE( 255)				_gthis->playerUpDown();
HXLINE( 256)				_gthis->dia->show(_gthis->name,true);
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 250)			this->player->animation->set_frameIndex(11);
HXLINE( 251)			::flixel::FlxG_obj::camera->fade(-16777216,1,true, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
HXLINE( 262)		::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/monumentTheme.ogg",2d,68,2d,ad),((Float)0.3),true,null());
HXLINE( 265)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 266)		this->super::create();
            	}


void PlayState_obj::placeEntities( ::Dynamic entity){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_271_placeEntities)
HXLINE( 272)		int x = ( (int)(entity->__Field(HX_("x",78,00,00,00),::hx::paccDynamic)) );
HXLINE( 273)		int y = ( (int)(entity->__Field(HX_("y",79,00,00,00),::hx::paccDynamic)) );
HXLINE( 275)		::String _hx_switch_0 = ( (::String)(entity->__Field(HX_("name",4b,72,ff,48),::hx::paccDynamic)) );
            		if (  (_hx_switch_0==HX_("banana",65,14,d7,51)) ){
HXLINE( 312)			 ::flixel::FlxSprite b =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,x,y,null())->loadGraphic(HX_("assets/images/banana.png",8b,83,02,03),true,120,240,null(),null());
HXLINE( 313)			b->animation->add(HX_("spin",c2,e1,58,4c),::Array_obj< int >::fromData( _hx_array_data_46c2835d_6,19),5,true,null(),null());
HXLINE( 314)			b->animation->play(HX_("spin",c2,e1,58,4c),null(),null(),null());
HXLINE( 315)			b->set_immovable(true);
HXLINE( 316)			this->banana->add(b).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 311)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("cloudMiner",ca,60,19,c0)) ){
HXLINE( 307)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->enemy;
HXDLIN( 307)			_hx_tmp->add( ::Enemy_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::EnemyType_obj::cloudMiner_dyn())).StaticCast<  ::Enemy >();
HXDLIN( 307)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("dogeYes",3e,9e,4b,31)) ){
HXLINE( 282)			this->dogeYes->setPosition(x,y);
HXDLIN( 282)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("guy",8b,8e,4e,00)) ){
HXLINE( 280)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->npc;
HXDLIN( 280)			_hx_tmp->add( ::NPC_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::NpcType_obj::doge_dyn())).StaticCast<  ::NPC >();
HXDLIN( 280)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("lake",4f,03,ad,47)) ){
HXLINE( 328)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->npc;
HXDLIN( 328)			_hx_tmp->add( ::NPC_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::NpcType_obj::lake_dyn())).StaticCast<  ::NPC >();
HXDLIN( 328)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("minerDoor",8d,3b,b4,57)) ){
HXLINE( 339)			this->minerDoor->setPosition((x + 84),y);
HXDLIN( 339)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("ming",95,4e,5c,48)) ){
HXLINE( 284)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->npc;
HXDLIN( 284)			_hx_tmp->add( ::NPC_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::NpcType_obj::ming_dyn())).StaticCast<  ::NPC >();
HXDLIN( 284)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("mingYes",92,1d,89,4a)) ){
HXLINE( 298)			this->mingYes->setPosition(x,y);
HXDLIN( 298)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("monument",47,ea,c5,03)) ){
HXLINE( 330)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->npc;
HXDLIN( 330)			_hx_tmp->add( ::NPC_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::NpcType_obj::monument_dyn())).StaticCast<  ::NPC >();
HXDLIN( 330)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("nft",3c,d1,53,00)) ){
HXLINE( 309)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->enemy;
HXDLIN( 309)			_hx_tmp->add( ::Enemy_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::EnemyType_obj::nft_dyn())).StaticCast<  ::Enemy >();
HXDLIN( 309)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("player",61,eb,b8,37)) ){
HXLINE( 278)			this->player->setPosition(x,(y + 96));
HXDLIN( 278)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("saveStone",e8,17,c3,12)) ){
HXLINE( 333)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->npc;
HXDLIN( 333)			_hx_tmp->add( ::NPC_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::NpcType_obj::saveStone_dyn())).StaticCast<  ::NPC >();
HXDLIN( 333)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("sbBlack",b0,fa,3c,25)) ){
HXLINE( 300)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->npc;
HXDLIN( 300)			_hx_tmp->add( ::NPC_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::NpcType_obj::sbBlack_dyn())).StaticCast<  ::NPC >();
HXDLIN( 300)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("sbBlue",c9,c6,41,94)) ){
HXLINE( 294)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->npc;
HXDLIN( 294)			_hx_tmp->add( ::NPC_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::NpcType_obj::sbBlue_dyn())).StaticCast<  ::NPC >();
HXDLIN( 294)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("sbGreen",b4,33,38,0a)) ){
HXLINE( 290)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->npc;
HXDLIN( 290)			_hx_tmp->add( ::NPC_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::NpcType_obj::sbGreen_dyn())).StaticCast<  ::NPC >();
HXDLIN( 290)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("sbRed",02,30,1a,78)) ){
HXLINE( 286)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->npc;
HXDLIN( 286)			_hx_tmp->add( ::NPC_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::NpcType_obj::sbRed_dyn())).StaticCast<  ::NPC >();
HXDLIN( 286)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("sbYes",d8,7f,1f,78)) ){
HXLINE( 296)			this->sbYes->setPosition(x,y);
HXDLIN( 296)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("sblackYes",1b,18,17,43)) ){
HXLINE( 302)			this->sblackYes->setPosition(x,y);
HXDLIN( 302)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("sea",8f,9b,57,00)) ){
HXLINE( 319)			 ::flixel::FlxSprite s =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,x,y,null())->loadGraphic(HX_("assets/images/sea.png",ff,0f,b9,fa),true,480,240,null(),null());
HXLINE( 320)			s->animation->add(HX_("oui",83,a0,54,00),::Array_obj< int >::fromData( _hx_array_data_46c2835d_7,4),((Float)2.5),true,null(),null());
HXLINE( 321)			s->animation->play(HX_("oui",83,a0,54,00),null(),null(),null());
HXLINE( 322)			s->set_immovable(true);
HXLINE( 323)			this->sea->add(s).StaticCast<  ::flixel::FlxSprite >();
HXLINE( 318)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("sgYes",f3,90,6d,7b)) ){
HXLINE( 292)			this->sgYes->setPosition(x,y);
HXDLIN( 292)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("shibaCoin",24,c0,b3,42)) ){
HXLINE( 305)			 ::flixel::group::FlxTypedGroup _hx_tmp = this->enemy;
HXDLIN( 305)			_hx_tmp->add( ::Enemy_obj::__alloc( HX_CTX ,( (Float)(x) ),( (Float)(y) ),::EnemyType_obj::shibaCoin_dyn())).StaticCast<  ::Enemy >();
HXDLIN( 305)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("shop",f6,d4,52,4c)) ){
HXLINE( 342)			this->shop->setPosition(x,y);
HXDLIN( 342)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("srYes",c8,e9,b2,82)) ){
HXLINE( 288)			this->srYes->setPosition(x,y);
HXDLIN( 288)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("stoneYes",c2,5d,1a,84)) ){
HXLINE( 336)			this->stoneYes->setPosition((x + 60),y);
HXDLIN( 336)			goto _hx_goto_4;
            		}
            		if (  (_hx_switch_0==HX_("treeBar",15,7f,d6,d6)) ){
HXLINE( 325)			this->treeBar->setPosition(x,y);
HXDLIN( 325)			goto _hx_goto_4;
            		}
            		_hx_goto_4:;
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,placeEntities,(void))

void PlayState_obj::saveFile(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_348_saveFile)
HXLINE( 351)		this->save->data->__SetField(HX_("bananaValue",cc,cc,f1,ec),this->bag->bananaCounter,::hx::paccDynamic);
HXLINE( 352)		this->save->data->__SetField(HX_("diamondValue",7d,77,b0,a2),this->bag->diamondCounter,::hx::paccDynamic);
HXLINE( 354)		this->save->data->__SetField(HX_("shibaInvest",48,fd,8d,02),this->bag->shibaInvest,::hx::paccDynamic);
HXLINE( 355)		this->save->data->__SetField(HX_("shibaWave",4c,70,e1,4f),this->bag->shibaWave,::hx::paccDynamic);
HXLINE( 357)		this->save->data->__SetField(HX_("nftInvest",51,c2,fb,19),this->bag->nftInvest,::hx::paccDynamic);
HXLINE( 358)		this->save->data->__SetField(HX_("nftWave",15,b1,e6,aa),this->bag->nftWave,::hx::paccDynamic);
HXLINE( 359)		this->save->data->__SetField(HX_("nftStyle",55,4a,eb,9d),this->combatHud->nftStyleNum,::hx::paccDynamic);
HXLINE( 361)		this->save->data->__SetField(HX_("bananaCoin",96,8c,07,e1),this->bag->bananaCoin,::hx::paccDynamic);
HXLINE( 362)		this->save->data->__SetField(HX_("appleCoin",0b,1c,90,a7),this->bag->appleCoin,::hx::paccDynamic);
HXLINE( 363)		this->save->data->__SetField(HX_("dexCoin",08,53,21,e5),this->bag->dexCoin,::hx::paccDynamic);
HXLINE( 366)		this->save->data->__SetField(HX_("saveStoneIntro",64,79,c3,53),this->dia->saveStoneIntro,::hx::paccDynamic);
HXLINE( 369)		this->save->data->__SetField(HX_("playerPos",b3,bc,c6,00),this->player->getPosition(null()),::hx::paccDynamic);
HXLINE( 372)		this->save->data->__SetField(HX_("minerYes",e8,c7,20,d7),this->minerYes,::hx::paccDynamic);
HXLINE( 373)		this->save->data->__SetField(HX_("place",c7,f4,8d,c4),HX_("monument",47,ea,c5,03),::hx::paccDynamic);
HXLINE( 374)		this->save->data->__SetField(HX_("leafYes",29,74,a7,0a),this->dia->leafYes,::hx::paccDynamic);
HXLINE( 375)		this->save->data->__SetField(HX_("talkMiss",48,3e,1e,aa),this->dia->talkMiss,::hx::paccDynamic);
HXLINE( 376)		this->save->data->__SetField(HX_("talkDone",ce,db,2f,a4),this->dia->talkDone,::hx::paccDynamic);
HXLINE( 377)		this->save->data->__SetField(HX_("twentyBanana",76,50,2a,4c),this->twentyBanana,::hx::paccDynamic);
HXLINE( 378)		this->save->data->__SetField(HX_("lakeTalking",a7,13,d4,d9),this->dia->lakeTalking,::hx::paccDynamic);
HXLINE( 380)		this->save->flush(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,saveFile,(void))

void PlayState_obj::loadFile(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_385_loadFile)
HXLINE( 388)		this->bag->diamondUi->set_visible(true);
HXLINE( 389)		this->bag->bananaCounter = ( (int)(this->save->data->__Field(HX_("bananaValue",cc,cc,f1,ec),::hx::paccDynamic)) );
HXLINE( 390)		this->bag->diamondCounter = ( (Float)(this->save->data->__Field(HX_("diamondValue",7d,77,b0,a2),::hx::paccDynamic)) );
HXLINE( 392)		this->bag->shibaInvest = ( (int)(this->save->data->__Field(HX_("shibaInvest",48,fd,8d,02),::hx::paccDynamic)) );
HXLINE( 393)		this->bag->shibaWave = ( (Float)(this->save->data->__Field(HX_("shibaWave",4c,70,e1,4f),::hx::paccDynamic)) );
HXLINE( 395)		this->bag->nftInvest = ( (int)(this->save->data->__Field(HX_("nftInvest",51,c2,fb,19),::hx::paccDynamic)) );
HXLINE( 396)		this->bag->nftWave = ( (Float)(this->save->data->__Field(HX_("nftWave",15,b1,e6,aa),::hx::paccDynamic)) );
HXLINE( 397)		this->combatHud->nftStyleNum = ( (int)(this->save->data->__Field(HX_("nftStyle",55,4a,eb,9d),::hx::paccDynamic)) );
HXLINE( 399)		this->bag->bananaCoin = ( (Float)(this->save->data->__Field(HX_("bananaCoin",96,8c,07,e1),::hx::paccDynamic)) );
HXLINE( 400)		this->bag->appleCoin = ( (Float)(this->save->data->__Field(HX_("appleCoin",0b,1c,90,a7),::hx::paccDynamic)) );
HXLINE( 401)		this->bag->dexCoin = ( (Float)(this->save->data->__Field(HX_("dexCoin",08,53,21,e5),::hx::paccDynamic)) );
HXLINE( 402)		this->bag->updateBag();
HXLINE( 403)		this->tip->set_visible(true);
HXLINE( 404)		this->tip->set_active(true);
HXLINE( 407)		if ((this->bag->shibaInvest != 0)) {
HXLINE( 409)			this->bag->firstShiba = true;
HXLINE( 410)			this->bag->shibaNotifText->set_text(HX_("done",82,f0,6d,42));
HXLINE( 411)			this->bag->countShibaWave();
            		}
            		else {
HXLINE( 414)			this->bag->shibaUi->set_visible(false);
            		}
HXLINE( 417)		if ((this->bag->nftInvest != 0)) {
HXLINE( 419)			this->bag->firstNft = true;
HXLINE( 420)			this->bag->nftNotifText->set_text(HX_("done",82,f0,6d,42));
HXLINE( 421)			this->bag->countNftWave(this->combatHud->nftStyleNum);
            		}
            		else {
HXLINE( 424)			this->bag->nftUi->set_visible(false);
            		}
HXLINE( 426)		this->dia->saveStoneIntro = ( (bool)(this->save->data->__Field(HX_("saveStoneIntro",64,79,c3,53),::hx::paccDynamic)) );
HXLINE( 427)		if (this->dia->saveStoneIntro) {
HXLINE( 428)			this->stoneYes->set_visible(false);
            		}
HXLINE( 431)		this->minerYes = ( (bool)(this->save->data->__Field(HX_("minerYes",e8,c7,20,d7),::hx::paccDynamic)) );
HXLINE( 432)		this->dia->leafYes = ( (bool)(this->save->data->__Field(HX_("leafYes",29,74,a7,0a),::hx::paccDynamic)) );
HXLINE( 433)		this->dia->talkMiss = ( (bool)(this->save->data->__Field(HX_("talkMiss",48,3e,1e,aa),::hx::paccDynamic)) );
HXLINE( 434)		this->dia->talkDone = ( (bool)(this->save->data->__Field(HX_("talkDone",ce,db,2f,a4),::hx::paccDynamic)) );
HXLINE( 435)		this->twentyBanana = ( (bool)(this->save->data->__Field(HX_("twentyBanana",76,50,2a,4c),::hx::paccDynamic)) );
HXLINE( 436)		this->dia->lakeTalking = ( (bool)(this->save->data->__Field(HX_("lakeTalking",a7,13,d4,d9),::hx::paccDynamic)) );
HXLINE( 438)		bool _hx_tmp;
HXDLIN( 438)		if (::hx::IsNotNull( this->save->data->__Field(HX_("playerPos",b3,bc,c6,00),::hx::paccDynamic) )) {
HXLINE( 438)			_hx_tmp = ::hx::IsNotNull( this->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic) );
            		}
            		else {
HXLINE( 438)			_hx_tmp = false;
            		}
HXDLIN( 438)		if (_hx_tmp) {
HXLINE( 440)			if (::hx::IsEq( this->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic),HX_("monument",47,ea,c5,03) )) {
HXLINE( 442)				if (!(this->dia->talkMiss)) {
HXLINE( 445)					if ((this->bag->bananaCounter >= 10)) {
HXLINE( 447)						this->dogeYes->set_visible(true);
HXLINE( 448)						this->tip->missionGetText(::MissionText_obj::leavesFin_dyn());
            					}
            					else {
HXLINE( 453)						this->tip->missionGetText(::MissionText_obj::getLeaves_dyn());
            					}
            				}
            				else {
HXLINE( 456)					if (!(this->dia->talkDone)) {
HXLINE( 458)						this->tip->missionGetText(::MissionText_obj::talk_dyn());
HXLINE( 459)						this->srYes->set_visible(true);
HXLINE( 460)						this->sgYes->set_visible(true);
HXLINE( 461)						this->sbYes->set_visible(true);
HXLINE( 462)						this->mingYes->set_visible(true);
            					}
            				}
HXLINE( 465)				this->player->setPosition( ::Dynamic(this->save->data->__Field(HX_("playerPos",b3,bc,c6,00),::hx::paccDynamic))->__Field(HX_("x",78,00,00,00),::hx::paccDynamic), ::Dynamic(this->save->data->__Field(HX_("playerPos",b3,bc,c6,00),::hx::paccDynamic))->__Field(HX_("y",79,00,00,00),::hx::paccDynamic));
            			}
            			else {
HXLINE( 467)				if (::hx::IsEq( this->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic),HX_("miner",7f,72,68,08) )) {
HXLINE( 469)					 ::Player _hx_tmp = this->player;
HXDLIN( 469)					Float _hx_tmp1 = this->minerDoor->x;
HXDLIN( 469)					Float _hx_tmp2 = this->minerDoor->get_width();
HXDLIN( 469)					Float _hx_tmp3 = (_hx_tmp1 + ((_hx_tmp2 - this->player->get_width()) / ( (Float)(2) )));
HXDLIN( 469)					_hx_tmp->setPosition(_hx_tmp3,(this->minerDoor->y - ( (Float)(60) )));
HXLINE( 470)					this->saveFile();
            				}
            			}
            		}
HXLINE( 473)		this->save->flush(null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,loadFile,(void))

void PlayState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_478_update)
HXLINE( 479)		this->super::update(elapsed);
HXLINE( 481)		 ::flixel::text::FlxText _hx_tmp = this->ufo;
HXDLIN( 481)		_hx_tmp->set_text(::Std_obj::string( ::Dynamic(this->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic))));
HXLINE( 482)		bool e = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_46c2835d_11,1),-1);
HXLINE( 483)		if (e) {
HXLINE( 486)			this->dia->talkDone = true;
HXLINE( 487)			 ::Bag fh = this->bag;
HXDLIN( 487)			fh->diamondCounter = (fh->diamondCounter + 100);
HXLINE( 488)			this->saveFile();
HXLINE( 489)			this->bag->updateBag();
            		}
HXLINE( 493)		this->updateInCombat();
HXLINE( 494)		this->updateWhenDiaInvisible();
HXLINE( 495)		this->updateTalking();
HXLINE( 496)		this->updateF4();
HXLINE( 497)		this->updateC();
HXLINE( 498)		this->updateMission();
HXLINE( 501)		::flixel::FlxG_obj::overlap(this->player,this->ground,null(),null());
HXLINE( 502)		::flixel::FlxG_obj::overlap(this->player,this->road,null(),null());
HXLINE( 503)		{
HXLINE( 503)			 ::Dynamic NotifyCallback = null();
HXDLIN( 503)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->walls) ),NotifyCallback,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE( 504)		::flixel::FlxG_obj::overlap(this->player,this->through,null(),null());
HXLINE( 505)		{
HXLINE( 505)			 ::Dynamic NotifyCallback1 = null();
HXDLIN( 505)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->treeBar) ),NotifyCallback1,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE( 507)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->npc) ),this->npcTalk_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 509)		::flixel::FlxG_obj::overlap(this->player,this->banana,this->getBanana_dyn(),null());
HXLINE( 511)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->shop) ),this->shopOpen_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 512)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->minerDoor) ),this->goToMiner_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 514)		{
HXLINE( 514)			 ::Dynamic NotifyCallback2 = null();
HXDLIN( 514)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->enemy) ),( ( ::flixel::FlxBasic)(this->walls) ),NotifyCallback2,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE( 515)		{
HXLINE( 515)			 ::Dynamic NotifyCallback3 = null();
HXDLIN( 515)			::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->enemy) ),( ( ::flixel::FlxBasic)(this->road) ),NotifyCallback3,::flixel::FlxObject_obj::separate_dyn());
            		}
HXLINE( 516)		::flixel::FlxG_obj::overlap(( ( ::flixel::FlxBasic)(this->player) ),( ( ::flixel::FlxBasic)(this->enemy) ),this->playerTouchEnemy_dyn(),::flixel::FlxObject_obj::separate_dyn());
HXLINE( 517)		this->enemy->forEachAlive(this->checkEnemyVision_dyn(),null());
            	}


void PlayState_obj::updateMission(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_522_updateMission)
HXLINE( 524)		bool _hx_tmp;
HXDLIN( 524)		bool _hx_tmp1;
HXDLIN( 524)		if ((this->bag->bananaCounter >= 10)) {
HXLINE( 524)			_hx_tmp1 = !(this->dia->leafYes);
            		}
            		else {
HXLINE( 524)			_hx_tmp1 = false;
            		}
HXDLIN( 524)		if (_hx_tmp1) {
HXLINE( 524)			_hx_tmp = !(this->dia->talkDone);
            		}
            		else {
HXLINE( 524)			_hx_tmp = false;
            		}
HXDLIN( 524)		if (_hx_tmp) {
HXLINE( 526)			this->dia->leafYes = true;
HXLINE( 527)			this->dogeYes->set_visible(true);
HXLINE( 528)			this->tip->missionGetText(::MissionText_obj::leavesFin_dyn());
            		}
HXLINE( 531)		bool _hx_tmp2;
HXDLIN( 531)		bool _hx_tmp3;
HXDLIN( 531)		bool _hx_tmp4;
HXDLIN( 531)		if (this->dia->leafYes) {
HXLINE( 531)			_hx_tmp4 = !(this->dia->talkMiss);
            		}
            		else {
HXLINE( 531)			_hx_tmp4 = false;
            		}
HXDLIN( 531)		if (_hx_tmp4) {
HXLINE( 531)			_hx_tmp3 = !(this->dogeYes->visible);
            		}
            		else {
HXLINE( 531)			_hx_tmp3 = false;
            		}
HXDLIN( 531)		if (_hx_tmp3) {
HXLINE( 531)			_hx_tmp2 = !(this->dia->visible);
            		}
            		else {
HXLINE( 531)			_hx_tmp2 = false;
            		}
HXDLIN( 531)		if (_hx_tmp2) {
HXLINE( 533)			this->dia->talkMiss = true;
HXLINE( 535)			this->srYes->set_visible(true);
HXLINE( 536)			this->sgYes->set_visible(true);
HXLINE( 537)			this->sbYes->set_visible(true);
HXLINE( 538)			this->mingYes->set_visible(true);
HXLINE( 540)			this->tip->missionGetText(::MissionText_obj::talk_dyn());
            		}
HXLINE( 542)		bool _hx_tmp5;
HXDLIN( 542)		if ((this->bag->bananaCounter >= 20)) {
HXLINE( 542)			_hx_tmp5 = !(this->twentyBanana);
            		}
            		else {
HXLINE( 542)			_hx_tmp5 = false;
            		}
HXDLIN( 542)		if (_hx_tmp5) {
HXLINE( 544)			this->twentyBanana = true;
HXLINE( 545)			this->tip->tipGetText(::TipText_obj::sellLeaves_dyn());
            		}
HXLINE( 549)		bool _hx_tmp6;
HXDLIN( 549)		bool _hx_tmp7;
HXDLIN( 549)		bool _hx_tmp8;
HXDLIN( 549)		bool _hx_tmp9;
HXDLIN( 549)		bool _hx_tmp10;
HXDLIN( 549)		bool _hx_tmp11;
HXDLIN( 549)		if (this->dia->talkMiss) {
HXLINE( 549)			_hx_tmp11 = !(this->srYes->visible);
            		}
            		else {
HXLINE( 549)			_hx_tmp11 = false;
            		}
HXDLIN( 549)		if (_hx_tmp11) {
HXLINE( 549)			_hx_tmp10 = !(this->sgYes->visible);
            		}
            		else {
HXLINE( 549)			_hx_tmp10 = false;
            		}
HXDLIN( 549)		if (_hx_tmp10) {
HXLINE( 549)			_hx_tmp9 = !(this->sbYes->visible);
            		}
            		else {
HXLINE( 549)			_hx_tmp9 = false;
            		}
HXDLIN( 549)		if (_hx_tmp9) {
HXLINE( 549)			_hx_tmp8 = !(this->mingYes->visible);
            		}
            		else {
HXLINE( 549)			_hx_tmp8 = false;
            		}
HXDLIN( 549)		if (_hx_tmp8) {
HXLINE( 549)			_hx_tmp7 = !(this->dia->talkDone);
            		}
            		else {
HXLINE( 549)			_hx_tmp7 = false;
            		}
HXDLIN( 549)		if (_hx_tmp7) {
HXLINE( 549)			_hx_tmp6 = !(this->dia->visible);
            		}
            		else {
HXLINE( 549)			_hx_tmp6 = false;
            		}
HXDLIN( 549)		if (_hx_tmp6) {
HXLINE( 551)			this->dia->talkDone = true;
HXLINE( 552)			this->sblackYes->set_visible(true);
HXLINE( 553)			this->tip->missionGetText(::MissionText_obj::talkFin_dyn());
            		}
HXLINE( 555)		bool _hx_tmp12;
HXDLIN( 555)		bool _hx_tmp13;
HXDLIN( 555)		if (this->dia->talkDone) {
HXLINE( 555)			_hx_tmp13 = !(this->sblackYes->visible);
            		}
            		else {
HXLINE( 555)			_hx_tmp13 = false;
            		}
HXDLIN( 555)		if (_hx_tmp13) {
HXLINE( 555)			_hx_tmp12 = !(this->dia->visible);
            		}
            		else {
HXLINE( 555)			_hx_tmp12 = false;
            		}
HXDLIN( 555)		if (_hx_tmp12) {
HXLINE( 557)			this->treeBar->kill();
HXLINE( 558)			this->tip->missionGetText(::MissionText_obj::monuFin_dyn());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateMission,(void))

void PlayState_obj::updateInCombat(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_565_updateInCombat)
HXDLIN( 565)		bool _hx_tmp;
HXDLIN( 565)		if (this->inCombat) {
HXDLIN( 565)			_hx_tmp = !(this->combatHud->visible);
            		}
            		else {
HXDLIN( 565)			_hx_tmp = false;
            		}
HXDLIN( 565)		if (_hx_tmp) {
HXLINE( 567)			this->bag->diamondCounter = this->combatHud->diamond;
HXLINE( 568)			this->bag->updateBag();
HXLINE( 569)			this->inCombat = false;
HXLINE( 570)			this->combatHud->enemy->set_active(true);
HXLINE( 572)			switch((int)(this->combatHud->outcome->_hx_getIndex())){
            				case (int)1: {
HXLINE( 577)					this->combatHud->enemy->enemyFire();
            				}
            				break;
            				case (int)0: case (int)2: {
HXLINE( 575)					this->combatHud->enemy->kill();
            				}
            				break;
            			}
HXLINE( 581)			bool _hx_tmp;
HXDLIN( 581)			if (::hx::IsPointerEq( this->combatHud->enemy->type,::EnemyType_obj::shibaCoin_dyn() )) {
HXLINE( 581)				_hx_tmp = ::hx::IsPointerEq( this->combatHud->outcome,::Outcome_obj::WIN_dyn() );
            			}
            			else {
HXLINE( 581)				_hx_tmp = false;
            			}
HXDLIN( 581)			if (_hx_tmp) {
HXLINE( 583)				 ::Bag fh = this->bag;
HXDLIN( 583)				fh->shibaInvest = (fh->shibaInvest + this->combatHud->investNum);
HXLINE( 584)				 ::Bag fh1 = this->bag;
HXDLIN( 584)				fh1->shibaWave = (fh1->shibaWave + this->bag->shibaInvest);
HXLINE( 585)				if (!(this->bag->shibaUi->visible)) {
HXLINE( 587)					this->bag->shibaUi->set_visible(true);
HXLINE( 588)					this->bag->countShibaWave();
HXLINE( 589)					this->tip->tipGetText(::TipText_obj::shibaNews_dyn());
            				}
            			}
            			else {
HXLINE( 592)				bool _hx_tmp;
HXDLIN( 592)				if (::hx::IsPointerEq( this->combatHud->enemy->type,::EnemyType_obj::nft_dyn() )) {
HXLINE( 592)					_hx_tmp = ::hx::IsPointerEq( this->combatHud->outcome,::Outcome_obj::WIN_dyn() );
            				}
            				else {
HXLINE( 592)					_hx_tmp = false;
            				}
HXDLIN( 592)				if (_hx_tmp) {
HXLINE( 594)					 ::Bag fh = this->bag;
HXDLIN( 594)					fh->nftInvest = (fh->nftInvest + this->combatHud->investNum);
HXLINE( 595)					 ::Bag fh1 = this->bag;
HXDLIN( 595)					fh1->nftWave = (fh1->nftWave + this->bag->nftInvest);
HXLINE( 596)					this->bag->nft->animation->set_frameIndex(this->combatHud->nftStyleNum);
HXLINE( 597)					if (!(this->bag->nftUi->visible)) {
HXLINE( 599)						this->bag->nftUi->set_visible(true);
HXLINE( 600)						this->bag->countNftWave(this->combatHud->nftStyleNum);
HXLINE( 601)						this->tip->tipGetText(::TipText_obj::nftNews_dyn());
            					}
            				}
            				else {
HXLINE( 604)					bool _hx_tmp;
HXDLIN( 604)					if (::hx::IsPointerEq( this->combatHud->enemy->type,::EnemyType_obj::cloudMiner_dyn() )) {
HXLINE( 604)						_hx_tmp = ::hx::IsPointerEq( this->combatHud->outcome,::Outcome_obj::LOSE_dyn() );
            					}
            					else {
HXLINE( 604)						_hx_tmp = false;
            					}
HXDLIN( 604)					if (_hx_tmp) {
HXLINE( 606)						this->tip->tipGetText(::TipText_obj::fraud_dyn());
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateInCombat,(void))

void PlayState_obj::playerTouchEnemy( ::Player player, ::Enemy enemy){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_614_playerTouchEnemy)
HXDLIN( 614)		bool _hx_tmp;
HXDLIN( 614)		bool _hx_tmp1;
HXDLIN( 614)		bool _hx_tmp2;
HXDLIN( 614)		bool _hx_tmp3;
HXDLIN( 614)		if (player->alive) {
HXDLIN( 614)			_hx_tmp3 = player->exists;
            		}
            		else {
HXDLIN( 614)			_hx_tmp3 = false;
            		}
HXDLIN( 614)		if (_hx_tmp3) {
HXDLIN( 614)			_hx_tmp2 = enemy->alive;
            		}
            		else {
HXDLIN( 614)			_hx_tmp2 = false;
            		}
HXDLIN( 614)		if (_hx_tmp2) {
HXDLIN( 614)			_hx_tmp1 = enemy->exists;
            		}
            		else {
HXDLIN( 614)			_hx_tmp1 = false;
            		}
HXDLIN( 614)		if (_hx_tmp1) {
HXDLIN( 614)			_hx_tmp = (enemy->alpha != ((Float)0.5));
            		}
            		else {
HXDLIN( 614)			_hx_tmp = false;
            		}
HXDLIN( 614)		if (_hx_tmp) {
HXLINE( 616)			if ((this->bag->diamondCounter >= 20)) {
HXLINE( 618)				this->touchEnemy->play(null(),null(),null());
HXLINE( 619)				this->inCombat = true;
HXLINE( 620)				player->set_active(false);
HXLINE( 621)				enemy->set_active(false);
HXLINE( 622)				this->combatHud->initCombat(this->bag->diamondCounter,this->bag->diamondText,this->bag->bananaCoin,this->bag->appleCoin,this->bag->dexCoin,enemy);
            			}
            			else {
HXLINE( 626)				this->name = HX_W(u":N:\u4f60\u6c92\u6709\u8db3\u5920\u7684\u80fd\u91cf\u5e63\uff01\u4f60\u9700\u8981\u81f3\u5c1120\u80fd\u91cf\u5e63\uff01",ce86,d812);
HXLINE( 627)				this->txt = false;
HXLINE( 628)				this->playerUpDown();
HXLINE( 629)				this->dia->show(this->name,this->txt);
HXLINE( 630)				this->combatHud->enemy = enemy;
HXLINE( 631)				this->combatHud->enemy->set_alpha(((Float)0.5));
HXLINE( 632)				this->enemyFlicker = true;
            			}
HXLINE( 634)			this->enemyType = enemy->type;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,playerTouchEnemy,(void))

void PlayState_obj::checkEnemyVision( ::Enemy enemy){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_641_checkEnemyVision)
HXDLIN( 641)		bool _hx_tmp;
HXDLIN( 641)		 ::flixel::tile::FlxTilemap _hx_tmp1 = this->walls;
HXDLIN( 641)		 ::flixel::math::FlxPoint _hx_tmp2 = enemy->getMidpoint(null());
HXDLIN( 641)		if (_hx_tmp1->ray(_hx_tmp2,this->player->getMidpoint(null()),null(),null())) {
HXDLIN( 641)			 ::flixel::tile::FlxTilemap _hx_tmp1 = this->road;
HXDLIN( 641)			 ::flixel::math::FlxPoint _hx_tmp2 = enemy->getMidpoint(null());
HXDLIN( 641)			_hx_tmp = _hx_tmp1->ray(_hx_tmp2,this->player->getMidpoint(null()),null(),null());
            		}
            		else {
HXDLIN( 641)			_hx_tmp = false;
            		}
HXDLIN( 641)		if (_hx_tmp) {
HXLINE( 643)			this->enemyType = enemy->type;
HXLINE( 644)			bool _hx_tmp;
HXDLIN( 644)			if (::hx::IsPointerEq( this->enemyType,::EnemyType_obj::shibaCoin_dyn() )) {
HXLINE( 644)				_hx_tmp = (this->tip->j != HX_("shiba",f3,e8,22,7c));
            			}
            			else {
HXLINE( 644)				_hx_tmp = false;
            			}
HXDLIN( 644)			if (_hx_tmp) {
HXLINE( 645)				this->tip->tipGetText(::TipText_obj::shiba_dyn());
            			}
            			else {
HXLINE( 646)				bool _hx_tmp;
HXDLIN( 646)				if (::hx::IsPointerEq( this->enemyType,::EnemyType_obj::nft_dyn() )) {
HXLINE( 646)					_hx_tmp = (this->tip->j != HX_("nft",3c,d1,53,00));
            				}
            				else {
HXLINE( 646)					_hx_tmp = false;
            				}
HXDLIN( 646)				if (_hx_tmp) {
HXLINE( 647)					this->tip->tipGetText(::TipText_obj::nft_dyn());
            				}
            				else {
HXLINE( 648)					bool _hx_tmp;
HXDLIN( 648)					if (::hx::IsPointerEq( this->enemyType,::EnemyType_obj::cloudMiner_dyn() )) {
HXLINE( 648)						_hx_tmp = (this->tip->j != HX_("cloudMiner",ca,60,19,c0));
            					}
            					else {
HXLINE( 648)						_hx_tmp = false;
            					}
HXDLIN( 648)					if (_hx_tmp) {
HXLINE( 649)						this->tip->tipGetText(::TipText_obj::cloudMiner_dyn());
            					}
            				}
            			}
HXLINE( 651)			this->bag->updateBag();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(PlayState_obj,checkEnemyVision,(void))

void PlayState_obj::npcTalk( ::Player player, ::NPC npc){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_657_npcTalk)
HXLINE( 658)		this->talkYes = true;
HXLINE( 659)		this->npcType = npc->type;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,npcTalk,(void))

void PlayState_obj::getBanana( ::Player player, ::flixel::FlxSprite banana){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_664_getBanana)
HXLINE( 665)		banana->kill();
HXLINE( 666)		this->bag->bananaCounter++;
HXLINE( 667)		this->bag->updateBag();
HXLINE( 668)		this->bananaSound->play(true,null(),null());
HXLINE( 669)		bool _hx_tmp;
HXDLIN( 669)		if ((this->bag->bananaCounter < 10)) {
HXLINE( 669)			_hx_tmp = !(this->dia->leafYes);
            		}
            		else {
HXLINE( 669)			_hx_tmp = false;
            		}
HXDLIN( 669)		if (_hx_tmp) {
HXLINE( 671)			this->tip->missionText->set_text(((HX_W(u"\u8490\u96c610\u7247\u8449\u5b50\u5f8c\u53bb\u627eDoge\uff0c\u76ee\u524d\u9032\u5ea6",069f,45b5) + this->bag->bananaCounter) + HX_("/10",ce,d4,23,00)));
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,getBanana,(void))

void PlayState_obj::goToMiner( ::Player player, ::flixel::FlxSprite minerDoor){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_677_goToMiner)
HXDLIN( 677)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 678)		if (this->minerYes) {
            			HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_682_goToMiner)
HXLINE( 683)				_gthis->saveFile();
HXLINE( 684)				{
HXLINE( 684)					 ::flixel::FlxState nextState =  ::MinerState_obj::__alloc( HX_CTX ,null());
HXDLIN( 684)					if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 684)						::flixel::FlxG_obj::game->_requestedState = nextState;
            					}
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 680)			this->doorTele->play(null(),null(),null());
HXLINE( 681)			::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.5),false, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            		}
            		else {
HXLINE( 689)			if ((this->bag->diamondCounter >= 100)) {
HXLINE( 691)				this->name = HX_W(u":N:\u4f60\u6709100\u80fd\u91cf\u5e63\u4e86\uff0c\u6b61\u8fce\u901a\u904e\u6b64\u50b3\u9001\u9ede\uff0c\u9032\u5165\u4e0b\u4e00\u95dc\uff01",9109,8bb8);
HXLINE( 692)				this->txt = false;
HXLINE( 693)				this->playerUpDown();
HXLINE( 694)				this->dia->show(this->name,this->txt);
HXLINE( 695)				this->minerOpen = true;
            			}
            			else {
HXLINE( 699)				this->name = HX_W(u":N:\u4f60\u9700\u8981100\u80fd\u91cf\u5e63\u624d\u80fd\u901a\u904e\u6b64\u50b3\u9001\u9ede\u3002",3f79,f559);
HXLINE( 700)				this->txt = false;
HXLINE( 701)				this->playerUpDown();
HXLINE( 702)				this->dia->show(this->name,this->txt);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,goToMiner,(void))

void PlayState_obj::shopOpen( ::Player player, ::flixel::FlxSprite shop){
            		HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(0)
            		void _hx_run(){
            			HX_STACKFRAME(&_hx_pos_af23706db05c7feb_711_shopOpen)
HXLINE( 712)			_gthis->bag->buyAndSell();
HXLINE( 713)			::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/shopTheme.ogg",9e,e2,37,1e),((Float)0.3),true,null());
            		}
            		HX_END_LOCAL_FUNC0((void))

            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_709_shopOpen)
HXDLIN( 709)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 710)		::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),false, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            	}


HX_DEFINE_DYNAMIC_FUNC2(PlayState_obj,shopOpen,(void))

void PlayState_obj::updateTalking(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_719_updateTalking)
HXLINE( 720)		bool enter = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_46c2835d_23,2),-1);
HXLINE( 723)		if (::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_46c2835d_24,8),2)) {
HXLINE( 724)			this->talkYes = false;
            		}
HXLINE( 727)		bool _hx_tmp;
HXDLIN( 727)		bool _hx_tmp1;
HXDLIN( 727)		bool _hx_tmp2;
HXDLIN( 727)		bool _hx_tmp3;
HXDLIN( 727)		if (this->talkYes) {
HXLINE( 727)			_hx_tmp3 = enter;
            		}
            		else {
HXLINE( 727)			_hx_tmp3 = false;
            		}
HXDLIN( 727)		if (_hx_tmp3) {
HXLINE( 727)			_hx_tmp2 = !(this->bag->itemUi->visible);
            		}
            		else {
HXLINE( 727)			_hx_tmp2 = false;
            		}
HXDLIN( 727)		if (_hx_tmp2) {
HXLINE( 727)			_hx_tmp1 = !(this->bag->dealUi->visible);
            		}
            		else {
HXLINE( 727)			_hx_tmp1 = false;
            		}
HXDLIN( 727)		if (_hx_tmp1) {
HXLINE( 727)			_hx_tmp = !(this->bag->shopUi->visible);
            		}
            		else {
HXLINE( 727)			_hx_tmp = false;
            		}
HXDLIN( 727)		if (_hx_tmp) {
HXLINE( 729)			this->talkYes = false;
HXLINE( 730)			this->playerUpDown();
HXLINE( 733)			bool _hx_tmp;
HXDLIN( 733)			if (::hx::IsPointerEq( this->npcType,::NpcType_obj::doge_dyn() )) {
HXLINE( 733)				_hx_tmp = this->dogeYes->visible;
            			}
            			else {
HXLINE( 733)				_hx_tmp = false;
            			}
HXDLIN( 733)			if (_hx_tmp) {
HXLINE( 734)				this->dogeYes->set_visible(false);
            			}
HXLINE( 735)			bool _hx_tmp1;
HXDLIN( 735)			if (::hx::IsPointerEq( this->npcType,::NpcType_obj::sbRed_dyn() )) {
HXLINE( 735)				_hx_tmp1 = this->srYes->visible;
            			}
            			else {
HXLINE( 735)				_hx_tmp1 = false;
            			}
HXDLIN( 735)			if (_hx_tmp1) {
HXLINE( 737)				this->talkCounter++;
HXLINE( 738)				this->tip->missionText->set_text(((HX_W(u"\u5feb\u53bb\u8ddf\u56db\u4f4d\u5cf6\u6c11\u804a\u5929\u5427\uff0c\u76ee\u524d\u9032\u5ea6",c63e,ac50) + this->talkCounter) + HX_("/4",25,29,00,00)));
HXLINE( 739)				this->srYes->set_visible(false);
            			}
HXLINE( 741)			bool _hx_tmp2;
HXDLIN( 741)			if (::hx::IsPointerEq( this->npcType,::NpcType_obj::sbGreen_dyn() )) {
HXLINE( 741)				_hx_tmp2 = this->sgYes->visible;
            			}
            			else {
HXLINE( 741)				_hx_tmp2 = false;
            			}
HXDLIN( 741)			if (_hx_tmp2) {
HXLINE( 743)				this->talkCounter++;
HXLINE( 744)				this->tip->missionText->set_text(((HX_W(u"\u5feb\u53bb\u8ddf\u56db\u4f4d\u5cf6\u6c11\u804a\u5929\u5427\uff0c\u76ee\u524d\u9032\u5ea6",c63e,ac50) + this->talkCounter) + HX_("/4",25,29,00,00)));
HXLINE( 745)				this->sgYes->set_visible(false);
            			}
HXLINE( 747)			bool _hx_tmp3;
HXDLIN( 747)			if (::hx::IsPointerEq( this->npcType,::NpcType_obj::sbBlue_dyn() )) {
HXLINE( 747)				_hx_tmp3 = this->sbYes->visible;
            			}
            			else {
HXLINE( 747)				_hx_tmp3 = false;
            			}
HXDLIN( 747)			if (_hx_tmp3) {
HXLINE( 749)				this->talkCounter++;
HXLINE( 750)				this->tip->missionText->set_text(((HX_W(u"\u5feb\u53bb\u8ddf\u56db\u4f4d\u5cf6\u6c11\u804a\u5929\u5427\uff0c\u76ee\u524d\u9032\u5ea6",c63e,ac50) + this->talkCounter) + HX_("/4",25,29,00,00)));
HXLINE( 751)				this->sbYes->set_visible(false);
            			}
HXLINE( 753)			bool _hx_tmp4;
HXDLIN( 753)			if (::hx::IsPointerEq( this->npcType,::NpcType_obj::ming_dyn() )) {
HXLINE( 753)				_hx_tmp4 = this->mingYes->visible;
            			}
            			else {
HXLINE( 753)				_hx_tmp4 = false;
            			}
HXDLIN( 753)			if (_hx_tmp4) {
HXLINE( 755)				this->talkCounter++;
HXLINE( 756)				this->tip->missionText->set_text(((HX_W(u"\u5feb\u53bb\u8ddf\u56db\u4f4d\u5cf6\u6c11\u804a\u5929\u5427\uff0c\u76ee\u524d\u9032\u5ea6",c63e,ac50) + this->talkCounter) + HX_("/4",25,29,00,00)));
HXLINE( 757)				this->mingYes->set_visible(false);
            			}
HXLINE( 759)			bool _hx_tmp5;
HXDLIN( 759)			if (::hx::IsPointerEq( this->npcType,::NpcType_obj::sbBlack_dyn() )) {
HXLINE( 759)				_hx_tmp5 = this->sblackYes->visible;
            			}
            			else {
HXLINE( 759)				_hx_tmp5 = false;
            			}
HXDLIN( 759)			if (_hx_tmp5) {
HXLINE( 760)				this->sblackYes->set_visible(false);
            			}
HXLINE( 763)			if (::hx::IsPointerEq( this->npcType,::NpcType_obj::saveStone_dyn() )) {
HXLINE( 765)				this->saveFile();
HXLINE( 766)				this->dia->saveShowTime(this->bag->diamondCounter,HX_W(u"\u65b0\u624b\u6751",0832,d3bf));
HXLINE( 767)				if (this->dia->saveStoneIntro) {
HXLINE( 768)					this->saveNoise->play(null(),null(),null());
            				}
HXLINE( 769)				bool _hx_tmp;
HXDLIN( 769)				if (this->stoneYes->visible) {
HXLINE( 769)					_hx_tmp = !(this->dia->saveStoneIntro);
            				}
            				else {
HXLINE( 769)					_hx_tmp = false;
            				}
HXDLIN( 769)				if (_hx_tmp) {
HXLINE( 770)					this->stoneYes->set_visible(false);
            				}
            			}
            			else {
HXLINE( 772)				bool _hx_tmp;
HXDLIN( 772)				if (::hx::IsPointerEq( this->npcType,::NpcType_obj::lake_dyn() )) {
HXLINE( 772)					_hx_tmp = !(this->dia->lakeTalking);
            				}
            				else {
HXLINE( 772)					_hx_tmp = false;
            				}
HXDLIN( 772)				if (_hx_tmp) {
HXLINE( 773)					this->lakeMoney = true;
            				}
            			}
HXLINE( 775)			this->dia->context(this->npcType);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateTalking,(void))

void PlayState_obj::updateWhenDiaInvisible(){
            	HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_781_updateWhenDiaInvisible)
HXDLIN( 781)		 ::PlayState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 783)		bool _hx_tmp;
HXDLIN( 783)		bool _hx_tmp1;
HXDLIN( 783)		bool _hx_tmp2;
HXDLIN( 783)		bool _hx_tmp3;
HXDLIN( 783)		if (!(this->dia->visible)) {
HXLINE( 783)			_hx_tmp3 = this->bag->shopUi->visible;
            		}
            		else {
HXLINE( 783)			_hx_tmp3 = true;
            		}
HXDLIN( 783)		if (!(_hx_tmp3)) {
HXLINE( 783)			_hx_tmp2 = this->bag->itemUi->visible;
            		}
            		else {
HXLINE( 783)			_hx_tmp2 = true;
            		}
HXDLIN( 783)		if (!(_hx_tmp2)) {
HXLINE( 783)			_hx_tmp1 = this->bag->dealUi->visible;
            		}
            		else {
HXLINE( 783)			_hx_tmp1 = true;
            		}
HXDLIN( 783)		if (!(_hx_tmp1)) {
HXLINE( 783)			_hx_tmp = this->combatHud->visible;
            		}
            		else {
HXLINE( 783)			_hx_tmp = true;
            		}
HXDLIN( 783)		if (_hx_tmp) {
HXLINE( 785)			this->player->set_active(false);
HXLINE( 786)			this->enemy->set_active(false);
            		}
            		else {
HXLINE( 790)			this->player->set_active(true);
HXLINE( 791)			this->enemy->set_active(true);
            		}
HXLINE( 795)		if (!(this->dia->visible)) {
HXLINE( 798)			if (this->getBag) {
HXLINE( 800)				this->player->animation->set_frameIndex(0);
HXLINE( 801)				this->bag->diamondUi->set_visible(true);
HXLINE( 802)				this->getBag = false;
HXLINE( 803)				this->tip->set_visible(true);
HXLINE( 804)				this->tip->set_active(true);
HXLINE( 805)				this->tip->missionGetText(::MissionText_obj::getLeaves_dyn());
            			}
HXLINE( 808)			if (this->minerOpen) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::PlayState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_815_updateWhenDiaInvisible)
HXLINE( 816)					_gthis->saveFile();
HXLINE( 817)					{
HXLINE( 817)						 ::flixel::FlxState nextState =  ::MinerState_obj::__alloc( HX_CTX ,null());
HXDLIN( 817)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 817)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 810)				this->minerOpen = false;
HXLINE( 811)				this->minerYes = true;
HXLINE( 813)				this->doorTele->play(null(),null(),null());
HXLINE( 814)				::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.5),false, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            			}
HXLINE( 821)			if (this->lakeMoney) {
HXLINE( 823)				this->lakeMoney = false;
HXLINE( 824)				 ::Bag fh = this->bag;
HXDLIN( 824)				fh->diamondCounter = (fh->diamondCounter + 20);
HXLINE( 825)				this->bag->updateBag();
            			}
HXLINE( 828)			if (this->enemyFlicker) {
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::PlayState,_gthis) HXARGC(1)
            				void _hx_run( ::flixel::util::FlxTimer timer){
            					HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_831_updateWhenDiaInvisible)
HXLINE( 832)					_gthis->combatHud->enemy->set_alpha(( (Float)(1) ));
HXLINE( 833)					_gthis->enemyFlicker = false;
            				}
            				HX_END_LOCAL_FUNC1((void))

HXLINE( 830)				 ::flixel::util::FlxTimer_obj::__alloc( HX_CTX ,null())->start(1, ::Dynamic(new _hx_Closure_1(_gthis)),null());
            			}
HXLINE( 837)			if (this->dia->saveStoneYes) {
HXLINE( 839)				this->dia->saveStoneYes = false;
HXLINE( 840)				this->name = ((HX_W(u":N:\u7329\u7329  \u65b0\u624b\u6751  ",e70c,115d) + this->bag->diamondCounter) + HX_W(u"\u80fd\u91cf\u5e63\n\u5b58\u6a94\u6210\u529f\uff01",463e,47f1));
HXLINE( 841)				this->saveNoise->play(null(),null(),null());
HXLINE( 842)				this->dia->show(this->name,false);
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateWhenDiaInvisible,(void))

void PlayState_obj::playerUpDown(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_852_playerUpDown)
HXDLIN( 852)		Float _hx_tmp = this->player->y;
HXDLIN( 852)		Float _hx_tmp1 = (_hx_tmp - (this->player->get_height() / ( (Float)(2) )));
HXDLIN( 852)		if (((_hx_tmp1 - (::flixel::FlxG_obj::camera->scroll->y * this->player->scrollFactor->y)) > (( (Float)(::flixel::FlxG_obj::height) ) / ( (Float)(2) )))) {
HXLINE( 853)			this->dia->diaUpDown = HX_("up",5b,66,00,00);
            		}
            		else {
HXLINE( 855)			this->dia->diaUpDown = HX_("down",62,f8,6d,42);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,playerUpDown,(void))

void PlayState_obj::updateF4(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_860_updateF4)
HXLINE( 861)		bool f4 = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_46c2835d_30,1),-1);
HXLINE( 862)		bool _hx_tmp;
HXDLIN( 862)		if (f4) {
HXLINE( 862)			_hx_tmp = !(this->dia->visible);
            		}
            		else {
HXLINE( 862)			_hx_tmp = false;
            		}
HXDLIN( 862)		if (_hx_tmp) {
            			HX_BEGIN_LOCAL_FUNC_S0(::hx::LocalFunc,_hx_Closure_0) HXARGC(0)
            			void _hx_run(){
            				HX_GC_STACKFRAME(&_hx_pos_af23706db05c7feb_867_updateF4)
HXLINE( 867)				 ::flixel::FlxState nextState =  ::MenuState_obj::__alloc( HX_CTX ,null());
HXDLIN( 867)				if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 867)					::flixel::FlxG_obj::game->_requestedState = nextState;
            				}
            			}
            			HX_END_LOCAL_FUNC0((void))

HXLINE( 864)			this->cancel->play(true,null(),null());
HXLINE( 865)			::flixel::FlxG_obj::camera->fade(-16777216,((Float).33),false, ::Dynamic(new _hx_Closure_0()),null());
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateF4,(void))

void PlayState_obj::updateC(){
            	HX_STACKFRAME(&_hx_pos_af23706db05c7feb_874_updateC)
HXLINE( 875)		bool c = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_46c2835d_33,1),-1);
HXLINE( 876)		bool _hx_tmp;
HXDLIN( 876)		bool _hx_tmp1;
HXDLIN( 876)		bool _hx_tmp2;
HXDLIN( 876)		bool _hx_tmp3;
HXDLIN( 876)		if (c) {
HXLINE( 876)			_hx_tmp3 = !(this->dia->visible);
            		}
            		else {
HXLINE( 876)			_hx_tmp3 = false;
            		}
HXDLIN( 876)		if (_hx_tmp3) {
HXLINE( 876)			_hx_tmp2 = !(this->bag->itemUi->visible);
            		}
            		else {
HXLINE( 876)			_hx_tmp2 = false;
            		}
HXDLIN( 876)		if (_hx_tmp2) {
HXLINE( 876)			_hx_tmp1 = !(this->bag->dealUi->visible);
            		}
            		else {
HXLINE( 876)			_hx_tmp1 = false;
            		}
HXDLIN( 876)		if (_hx_tmp1) {
HXLINE( 876)			_hx_tmp = !(this->bag->shopUi->visible);
            		}
            		else {
HXLINE( 876)			_hx_tmp = false;
            		}
HXDLIN( 876)		if (_hx_tmp) {
HXLINE( 878)			this->openBag->play(null(),null(),null());
HXLINE( 879)			this->bag->bagUiShow();
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PlayState_obj,updateC,(void))


::hx::ObjectPtr< PlayState_obj > PlayState_obj::__new(bool loadsave) {
	::hx::ObjectPtr< PlayState_obj > __this = new PlayState_obj();
	__this->__construct(loadsave);
	return __this;
}

::hx::ObjectPtr< PlayState_obj > PlayState_obj::__alloc(::hx::Ctx *_hx_ctx,bool loadsave) {
	PlayState_obj *__this = (PlayState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PlayState_obj), true, "PlayState"));
	*(void **)__this = PlayState_obj::_hx_vtable;
	__this->__construct(loadsave);
	return __this;
}

PlayState_obj::PlayState_obj()
{
}

void PlayState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PlayState);
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(tip,"tip");
	HX_MARK_MEMBER_NAME(bag,"bag");
	HX_MARK_MEMBER_NAME(cancel,"cancel");
	HX_MARK_MEMBER_NAME(bananaSound,"bananaSound");
	HX_MARK_MEMBER_NAME(touchEnemy,"touchEnemy");
	HX_MARK_MEMBER_NAME(openBag,"openBag");
	HX_MARK_MEMBER_NAME(doorTele,"doorTele");
	HX_MARK_MEMBER_NAME(saveNoise,"saveNoise");
	HX_MARK_MEMBER_NAME(dia,"dia");
	HX_MARK_MEMBER_NAME(diaUpDown,"diaUpDown");
	HX_MARK_MEMBER_NAME(name,"name");
	HX_MARK_MEMBER_NAME(txt,"txt");
	HX_MARK_MEMBER_NAME(talkYes,"talkYes");
	HX_MARK_MEMBER_NAME(banana,"banana");
	HX_MARK_MEMBER_NAME(twentyBanana,"twentyBanana");
	HX_MARK_MEMBER_NAME(enemy,"enemy");
	HX_MARK_MEMBER_NAME(enemyType,"enemyType");
	HX_MARK_MEMBER_NAME(inCombat,"inCombat");
	HX_MARK_MEMBER_NAME(combatHud,"combatHud");
	HX_MARK_MEMBER_NAME(enemyFlicker,"enemyFlicker");
	HX_MARK_MEMBER_NAME(shibaYes,"shibaYes");
	HX_MARK_MEMBER_NAME(nftYes,"nftYes");
	HX_MARK_MEMBER_NAME(seePlayerThen,"seePlayerThen");
	HX_MARK_MEMBER_NAME(seePlayerNow,"seePlayerNow");
	HX_MARK_MEMBER_NAME(npc,"npc");
	HX_MARK_MEMBER_NAME(npcType,"npcType");
	HX_MARK_MEMBER_NAME(dogeYes,"dogeYes");
	HX_MARK_MEMBER_NAME(srYes,"srYes");
	HX_MARK_MEMBER_NAME(sgYes,"sgYes");
	HX_MARK_MEMBER_NAME(sbYes,"sbYes");
	HX_MARK_MEMBER_NAME(sblackYes,"sblackYes");
	HX_MARK_MEMBER_NAME(mingYes,"mingYes");
	HX_MARK_MEMBER_NAME(stoneYes,"stoneYes");
	HX_MARK_MEMBER_NAME(shop,"shop");
	HX_MARK_MEMBER_NAME(minerDoor,"minerDoor");
	HX_MARK_MEMBER_NAME(minerOpen,"minerOpen");
	HX_MARK_MEMBER_NAME(minerYes,"minerYes");
	HX_MARK_MEMBER_NAME(lakeMoney,"lakeMoney");
	HX_MARK_MEMBER_NAME(talkCounter,"talkCounter");
	HX_MARK_MEMBER_NAME(map,"map");
	HX_MARK_MEMBER_NAME(through,"through");
	HX_MARK_MEMBER_NAME(walls,"walls");
	HX_MARK_MEMBER_NAME(road,"road");
	HX_MARK_MEMBER_NAME(ground,"ground");
	HX_MARK_MEMBER_NAME(sea,"sea");
	HX_MARK_MEMBER_NAME(treeBar,"treeBar");
	HX_MARK_MEMBER_NAME(weirdTreeBar,"weirdTreeBar");
	HX_MARK_MEMBER_NAME(treeBarWave,"treeBarWave");
	HX_MARK_MEMBER_NAME(loadsave,"loadsave");
	HX_MARK_MEMBER_NAME(getBag,"getBag");
	HX_MARK_MEMBER_NAME(ufo,"ufo");
	HX_MARK_MEMBER_NAME(save,"save");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PlayState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(tip,"tip");
	HX_VISIT_MEMBER_NAME(bag,"bag");
	HX_VISIT_MEMBER_NAME(cancel,"cancel");
	HX_VISIT_MEMBER_NAME(bananaSound,"bananaSound");
	HX_VISIT_MEMBER_NAME(touchEnemy,"touchEnemy");
	HX_VISIT_MEMBER_NAME(openBag,"openBag");
	HX_VISIT_MEMBER_NAME(doorTele,"doorTele");
	HX_VISIT_MEMBER_NAME(saveNoise,"saveNoise");
	HX_VISIT_MEMBER_NAME(dia,"dia");
	HX_VISIT_MEMBER_NAME(diaUpDown,"diaUpDown");
	HX_VISIT_MEMBER_NAME(name,"name");
	HX_VISIT_MEMBER_NAME(txt,"txt");
	HX_VISIT_MEMBER_NAME(talkYes,"talkYes");
	HX_VISIT_MEMBER_NAME(banana,"banana");
	HX_VISIT_MEMBER_NAME(twentyBanana,"twentyBanana");
	HX_VISIT_MEMBER_NAME(enemy,"enemy");
	HX_VISIT_MEMBER_NAME(enemyType,"enemyType");
	HX_VISIT_MEMBER_NAME(inCombat,"inCombat");
	HX_VISIT_MEMBER_NAME(combatHud,"combatHud");
	HX_VISIT_MEMBER_NAME(enemyFlicker,"enemyFlicker");
	HX_VISIT_MEMBER_NAME(shibaYes,"shibaYes");
	HX_VISIT_MEMBER_NAME(nftYes,"nftYes");
	HX_VISIT_MEMBER_NAME(seePlayerThen,"seePlayerThen");
	HX_VISIT_MEMBER_NAME(seePlayerNow,"seePlayerNow");
	HX_VISIT_MEMBER_NAME(npc,"npc");
	HX_VISIT_MEMBER_NAME(npcType,"npcType");
	HX_VISIT_MEMBER_NAME(dogeYes,"dogeYes");
	HX_VISIT_MEMBER_NAME(srYes,"srYes");
	HX_VISIT_MEMBER_NAME(sgYes,"sgYes");
	HX_VISIT_MEMBER_NAME(sbYes,"sbYes");
	HX_VISIT_MEMBER_NAME(sblackYes,"sblackYes");
	HX_VISIT_MEMBER_NAME(mingYes,"mingYes");
	HX_VISIT_MEMBER_NAME(stoneYes,"stoneYes");
	HX_VISIT_MEMBER_NAME(shop,"shop");
	HX_VISIT_MEMBER_NAME(minerDoor,"minerDoor");
	HX_VISIT_MEMBER_NAME(minerOpen,"minerOpen");
	HX_VISIT_MEMBER_NAME(minerYes,"minerYes");
	HX_VISIT_MEMBER_NAME(lakeMoney,"lakeMoney");
	HX_VISIT_MEMBER_NAME(talkCounter,"talkCounter");
	HX_VISIT_MEMBER_NAME(map,"map");
	HX_VISIT_MEMBER_NAME(through,"through");
	HX_VISIT_MEMBER_NAME(walls,"walls");
	HX_VISIT_MEMBER_NAME(road,"road");
	HX_VISIT_MEMBER_NAME(ground,"ground");
	HX_VISIT_MEMBER_NAME(sea,"sea");
	HX_VISIT_MEMBER_NAME(treeBar,"treeBar");
	HX_VISIT_MEMBER_NAME(weirdTreeBar,"weirdTreeBar");
	HX_VISIT_MEMBER_NAME(treeBarWave,"treeBarWave");
	HX_VISIT_MEMBER_NAME(loadsave,"loadsave");
	HX_VISIT_MEMBER_NAME(getBag,"getBag");
	HX_VISIT_MEMBER_NAME(ufo,"ufo");
	HX_VISIT_MEMBER_NAME(save,"save");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PlayState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"tip") ) { return ::hx::Val( tip ); }
		if (HX_FIELD_EQ(inName,"bag") ) { return ::hx::Val( bag ); }
		if (HX_FIELD_EQ(inName,"dia") ) { return ::hx::Val( dia ); }
		if (HX_FIELD_EQ(inName,"txt") ) { return ::hx::Val( txt ); }
		if (HX_FIELD_EQ(inName,"npc") ) { return ::hx::Val( npc ); }
		if (HX_FIELD_EQ(inName,"map") ) { return ::hx::Val( map ); }
		if (HX_FIELD_EQ(inName,"sea") ) { return ::hx::Val( sea ); }
		if (HX_FIELD_EQ(inName,"ufo") ) { return ::hx::Val( ufo ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { return ::hx::Val( name ); }
		if (HX_FIELD_EQ(inName,"shop") ) { return ::hx::Val( shop ); }
		if (HX_FIELD_EQ(inName,"road") ) { return ::hx::Val( road ); }
		if (HX_FIELD_EQ(inName,"save") ) { return ::hx::Val( save ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"enemy") ) { return ::hx::Val( enemy ); }
		if (HX_FIELD_EQ(inName,"srYes") ) { return ::hx::Val( srYes ); }
		if (HX_FIELD_EQ(inName,"sgYes") ) { return ::hx::Val( sgYes ); }
		if (HX_FIELD_EQ(inName,"sbYes") ) { return ::hx::Val( sbYes ); }
		if (HX_FIELD_EQ(inName,"walls") ) { return ::hx::Val( walls ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { return ::hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"cancel") ) { return ::hx::Val( cancel ); }
		if (HX_FIELD_EQ(inName,"banana") ) { return ::hx::Val( banana ); }
		if (HX_FIELD_EQ(inName,"nftYes") ) { return ::hx::Val( nftYes ); }
		if (HX_FIELD_EQ(inName,"ground") ) { return ::hx::Val( ground ); }
		if (HX_FIELD_EQ(inName,"getBag") ) { return ::hx::Val( getBag ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"openBag") ) { return ::hx::Val( openBag ); }
		if (HX_FIELD_EQ(inName,"talkYes") ) { return ::hx::Val( talkYes ); }
		if (HX_FIELD_EQ(inName,"npcType") ) { return ::hx::Val( npcType ); }
		if (HX_FIELD_EQ(inName,"dogeYes") ) { return ::hx::Val( dogeYes ); }
		if (HX_FIELD_EQ(inName,"mingYes") ) { return ::hx::Val( mingYes ); }
		if (HX_FIELD_EQ(inName,"through") ) { return ::hx::Val( through ); }
		if (HX_FIELD_EQ(inName,"treeBar") ) { return ::hx::Val( treeBar ); }
		if (HX_FIELD_EQ(inName,"npcTalk") ) { return ::hx::Val( npcTalk_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateC") ) { return ::hx::Val( updateC_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"doorTele") ) { return ::hx::Val( doorTele ); }
		if (HX_FIELD_EQ(inName,"inCombat") ) { return ::hx::Val( inCombat ); }
		if (HX_FIELD_EQ(inName,"shibaYes") ) { return ::hx::Val( shibaYes ); }
		if (HX_FIELD_EQ(inName,"stoneYes") ) { return ::hx::Val( stoneYes ); }
		if (HX_FIELD_EQ(inName,"minerYes") ) { return ::hx::Val( minerYes ); }
		if (HX_FIELD_EQ(inName,"loadsave") ) { return ::hx::Val( loadsave ); }
		if (HX_FIELD_EQ(inName,"saveFile") ) { return ::hx::Val( saveFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"loadFile") ) { return ::hx::Val( loadFile_dyn() ); }
		if (HX_FIELD_EQ(inName,"shopOpen") ) { return ::hx::Val( shopOpen_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateF4") ) { return ::hx::Val( updateF4_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"saveNoise") ) { return ::hx::Val( saveNoise ); }
		if (HX_FIELD_EQ(inName,"diaUpDown") ) { return ::hx::Val( diaUpDown ); }
		if (HX_FIELD_EQ(inName,"enemyType") ) { return ::hx::Val( enemyType ); }
		if (HX_FIELD_EQ(inName,"combatHud") ) { return ::hx::Val( combatHud ); }
		if (HX_FIELD_EQ(inName,"sblackYes") ) { return ::hx::Val( sblackYes ); }
		if (HX_FIELD_EQ(inName,"minerDoor") ) { return ::hx::Val( minerDoor ); }
		if (HX_FIELD_EQ(inName,"minerOpen") ) { return ::hx::Val( minerOpen ); }
		if (HX_FIELD_EQ(inName,"lakeMoney") ) { return ::hx::Val( lakeMoney ); }
		if (HX_FIELD_EQ(inName,"getBanana") ) { return ::hx::Val( getBanana_dyn() ); }
		if (HX_FIELD_EQ(inName,"goToMiner") ) { return ::hx::Val( goToMiner_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"touchEnemy") ) { return ::hx::Val( touchEnemy ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bananaSound") ) { return ::hx::Val( bananaSound ); }
		if (HX_FIELD_EQ(inName,"talkCounter") ) { return ::hx::Val( talkCounter ); }
		if (HX_FIELD_EQ(inName,"treeBarWave") ) { return ::hx::Val( treeBarWave ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"twentyBanana") ) { return ::hx::Val( twentyBanana ); }
		if (HX_FIELD_EQ(inName,"enemyFlicker") ) { return ::hx::Val( enemyFlicker ); }
		if (HX_FIELD_EQ(inName,"seePlayerNow") ) { return ::hx::Val( seePlayerNow ); }
		if (HX_FIELD_EQ(inName,"weirdTreeBar") ) { return ::hx::Val( weirdTreeBar ); }
		if (HX_FIELD_EQ(inName,"playerUpDown") ) { return ::hx::Val( playerUpDown_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"seePlayerThen") ) { return ::hx::Val( seePlayerThen ); }
		if (HX_FIELD_EQ(inName,"placeEntities") ) { return ::hx::Val( placeEntities_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateMission") ) { return ::hx::Val( updateMission_dyn() ); }
		if (HX_FIELD_EQ(inName,"updateTalking") ) { return ::hx::Val( updateTalking_dyn() ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"updateInCombat") ) { return ::hx::Val( updateInCombat_dyn() ); }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"playerTouchEnemy") ) { return ::hx::Val( playerTouchEnemy_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkEnemyVision") ) { return ::hx::Val( checkEnemyVision_dyn() ); }
		break;
	case 22:
		if (HX_FIELD_EQ(inName,"updateWhenDiaInvisible") ) { return ::hx::Val( updateWhenDiaInvisible_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PlayState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"tip") ) { tip=inValue.Cast<  ::Tip >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bag") ) { bag=inValue.Cast<  ::Bag >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dia") ) { dia=inValue.Cast<  ::Dia >(); return inValue; }
		if (HX_FIELD_EQ(inName,"txt") ) { txt=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"npc") ) { npc=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"map") ) { map=inValue.Cast<  ::flixel::addons::editors::ogmo::FlxOgmo3Loader >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sea") ) { sea=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ufo") ) { ufo=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"name") ) { name=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shop") ) { shop=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"road") ) { road=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"save") ) { save=inValue.Cast<  ::flixel::util::FlxSave >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"enemy") ) { enemy=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"srYes") ) { srYes=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sgYes") ) { sgYes=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sbYes") ) { sbYes=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"walls") ) { walls=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cancel") ) { cancel=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"banana") ) { banana=inValue.Cast<  ::flixel::group::FlxTypedGroup >(); return inValue; }
		if (HX_FIELD_EQ(inName,"nftYes") ) { nftYes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ground") ) { ground=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"getBag") ) { getBag=inValue.Cast< bool >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"openBag") ) { openBag=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"talkYes") ) { talkYes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"npcType") ) { npcType=inValue.Cast<  ::NpcType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dogeYes") ) { dogeYes=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"mingYes") ) { mingYes=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"through") ) { through=inValue.Cast<  ::flixel::tile::FlxTilemap >(); return inValue; }
		if (HX_FIELD_EQ(inName,"treeBar") ) { treeBar=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"doorTele") ) { doorTele=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"inCombat") ) { inCombat=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"shibaYes") ) { shibaYes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"stoneYes") ) { stoneYes=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minerYes") ) { minerYes=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loadsave") ) { loadsave=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"saveNoise") ) { saveNoise=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"diaUpDown") ) { diaUpDown=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enemyType") ) { enemyType=inValue.Cast<  ::EnemyType >(); return inValue; }
		if (HX_FIELD_EQ(inName,"combatHud") ) { combatHud=inValue.Cast<  ::CombatHUD >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sblackYes") ) { sblackYes=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minerDoor") ) { minerDoor=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"minerOpen") ) { minerOpen=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lakeMoney") ) { lakeMoney=inValue.Cast< bool >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"touchEnemy") ) { touchEnemy=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"bananaSound") ) { bananaSound=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"talkCounter") ) { talkCounter=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"treeBarWave") ) { treeBarWave=inValue.Cast<  ::flixel::addons::effects::chainable::FlxRainbowEffect >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"twentyBanana") ) { twentyBanana=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"enemyFlicker") ) { enemyFlicker=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"seePlayerNow") ) { seePlayerNow=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"weirdTreeBar") ) { weirdTreeBar=inValue.Cast<  ::flixel::addons::effects::chainable::FlxEffectSprite >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"seePlayerThen") ) { seePlayerThen=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PlayState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("player",61,eb,b8,37));
	outFields->push(HX_("tip",5b,61,58,00));
	outFields->push(HX_("bag",c8,b1,4a,00));
	outFields->push(HX_("cancel",7a,ed,33,b8));
	outFields->push(HX_("bananaSound",2a,da,05,3c));
	outFields->push(HX_("touchEnemy",09,f6,0b,6a));
	outFields->push(HX_("openBag",1e,60,27,40));
	outFields->push(HX_("doorTele",b8,2e,a1,9c));
	outFields->push(HX_("saveNoise",1d,97,6f,2e));
	outFields->push(HX_("dia",3c,3d,4c,00));
	outFields->push(HX_("diaUpDown",b9,9a,1d,44));
	outFields->push(HX_("name",4b,72,ff,48));
	outFields->push(HX_("txt",70,6e,58,00));
	outFields->push(HX_("talkYes",5b,2b,9c,16));
	outFields->push(HX_("banana",65,14,d7,51));
	outFields->push(HX_("twentyBanana",76,50,2a,4c));
	outFields->push(HX_("enemy",48,12,7b,70));
	outFields->push(HX_("enemyType",22,f5,27,ad));
	outFields->push(HX_("inCombat",f9,59,a4,4f));
	outFields->push(HX_("combatHud",e3,10,9a,6a));
	outFields->push(HX_("enemyFlicker",90,49,59,4b));
	outFields->push(HX_("shibaYes",f4,d1,80,3f));
	outFields->push(HX_("nftYes",4b,7d,11,03));
	outFields->push(HX_("seePlayerThen",51,d4,2d,c4));
	outFields->push(HX_("seePlayerNow",22,f2,b7,e0));
	outFields->push(HX_("npc",e1,d9,53,00));
	outFields->push(HX_("npcType",3b,fd,be,de));
	outFields->push(HX_("dogeYes",3e,9e,4b,31));
	outFields->push(HX_("srYes",c8,e9,b2,82));
	outFields->push(HX_("sgYes",f3,90,6d,7b));
	outFields->push(HX_("sbYes",d8,7f,1f,78));
	outFields->push(HX_("sblackYes",1b,18,17,43));
	outFields->push(HX_("mingYes",92,1d,89,4a));
	outFields->push(HX_("stoneYes",c2,5d,1a,84));
	outFields->push(HX_("shop",f6,d4,52,4c));
	outFields->push(HX_("minerDoor",8d,3b,b4,57));
	outFields->push(HX_("minerOpen",e9,4d,fa,5e));
	outFields->push(HX_("minerYes",e8,c7,20,d7));
	outFields->push(HX_("lakeMoney",71,c8,06,0d));
	outFields->push(HX_("talkCounter",30,db,98,11));
	outFields->push(HX_("map",9c,0a,53,00));
	outFields->push(HX_("through",45,48,3d,5a));
	outFields->push(HX_("walls",29,0c,1f,c5));
	outFields->push(HX_("road",e0,e1,ae,4b));
	outFields->push(HX_("ground",87,22,28,1c));
	outFields->push(HX_("sea",8f,9b,57,00));
	outFields->push(HX_("treeBar",15,7f,d6,d6));
	outFields->push(HX_("weirdTreeBar",88,6d,a4,31));
	outFields->push(HX_("treeBarWave",6e,bf,b7,2e));
	outFields->push(HX_("loadsave",63,30,14,d2));
	outFields->push(HX_("getBag",d2,ea,19,a3));
	outFields->push(HX_("ufo",fe,20,59,00));
	outFields->push(HX_("save",3d,8b,4d,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PlayState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::Player */ ,(int)offsetof(PlayState_obj,player),HX_("player",61,eb,b8,37)},
	{::hx::fsObject /*  ::Tip */ ,(int)offsetof(PlayState_obj,tip),HX_("tip",5b,61,58,00)},
	{::hx::fsObject /*  ::Bag */ ,(int)offsetof(PlayState_obj,bag),HX_("bag",c8,b1,4a,00)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,cancel),HX_("cancel",7a,ed,33,b8)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,bananaSound),HX_("bananaSound",2a,da,05,3c)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,touchEnemy),HX_("touchEnemy",09,f6,0b,6a)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,openBag),HX_("openBag",1e,60,27,40)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,doorTele),HX_("doorTele",b8,2e,a1,9c)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(PlayState_obj,saveNoise),HX_("saveNoise",1d,97,6f,2e)},
	{::hx::fsObject /*  ::Dia */ ,(int)offsetof(PlayState_obj,dia),HX_("dia",3c,3d,4c,00)},
	{::hx::fsString,(int)offsetof(PlayState_obj,diaUpDown),HX_("diaUpDown",b9,9a,1d,44)},
	{::hx::fsString,(int)offsetof(PlayState_obj,name),HX_("name",4b,72,ff,48)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,txt),HX_("txt",70,6e,58,00)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,talkYes),HX_("talkYes",5b,2b,9c,16)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,banana),HX_("banana",65,14,d7,51)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,twentyBanana),HX_("twentyBanana",76,50,2a,4c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,enemy),HX_("enemy",48,12,7b,70)},
	{::hx::fsObject /*  ::EnemyType */ ,(int)offsetof(PlayState_obj,enemyType),HX_("enemyType",22,f5,27,ad)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,inCombat),HX_("inCombat",f9,59,a4,4f)},
	{::hx::fsObject /*  ::CombatHUD */ ,(int)offsetof(PlayState_obj,combatHud),HX_("combatHud",e3,10,9a,6a)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,enemyFlicker),HX_("enemyFlicker",90,49,59,4b)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,shibaYes),HX_("shibaYes",f4,d1,80,3f)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,nftYes),HX_("nftYes",4b,7d,11,03)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,seePlayerThen),HX_("seePlayerThen",51,d4,2d,c4)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,seePlayerNow),HX_("seePlayerNow",22,f2,b7,e0)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,npc),HX_("npc",e1,d9,53,00)},
	{::hx::fsObject /*  ::NpcType */ ,(int)offsetof(PlayState_obj,npcType),HX_("npcType",3b,fd,be,de)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,dogeYes),HX_("dogeYes",3e,9e,4b,31)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,srYes),HX_("srYes",c8,e9,b2,82)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,sgYes),HX_("sgYes",f3,90,6d,7b)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,sbYes),HX_("sbYes",d8,7f,1f,78)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,sblackYes),HX_("sblackYes",1b,18,17,43)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,mingYes),HX_("mingYes",92,1d,89,4a)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,stoneYes),HX_("stoneYes",c2,5d,1a,84)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,shop),HX_("shop",f6,d4,52,4c)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,minerDoor),HX_("minerDoor",8d,3b,b4,57)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,minerOpen),HX_("minerOpen",e9,4d,fa,5e)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,minerYes),HX_("minerYes",e8,c7,20,d7)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,lakeMoney),HX_("lakeMoney",71,c8,06,0d)},
	{::hx::fsInt,(int)offsetof(PlayState_obj,talkCounter),HX_("talkCounter",30,db,98,11)},
	{::hx::fsObject /*  ::flixel::addons::editors::ogmo::FlxOgmo3Loader */ ,(int)offsetof(PlayState_obj,map),HX_("map",9c,0a,53,00)},
	{::hx::fsObject /*  ::flixel::tile::FlxTilemap */ ,(int)offsetof(PlayState_obj,through),HX_("through",45,48,3d,5a)},
	{::hx::fsObject /*  ::flixel::tile::FlxTilemap */ ,(int)offsetof(PlayState_obj,walls),HX_("walls",29,0c,1f,c5)},
	{::hx::fsObject /*  ::flixel::tile::FlxTilemap */ ,(int)offsetof(PlayState_obj,road),HX_("road",e0,e1,ae,4b)},
	{::hx::fsObject /*  ::flixel::tile::FlxTilemap */ ,(int)offsetof(PlayState_obj,ground),HX_("ground",87,22,28,1c)},
	{::hx::fsObject /*  ::flixel::group::FlxTypedGroup */ ,(int)offsetof(PlayState_obj,sea),HX_("sea",8f,9b,57,00)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(PlayState_obj,treeBar),HX_("treeBar",15,7f,d6,d6)},
	{::hx::fsObject /*  ::flixel::addons::effects::chainable::FlxEffectSprite */ ,(int)offsetof(PlayState_obj,weirdTreeBar),HX_("weirdTreeBar",88,6d,a4,31)},
	{::hx::fsObject /*  ::flixel::addons::effects::chainable::FlxRainbowEffect */ ,(int)offsetof(PlayState_obj,treeBarWave),HX_("treeBarWave",6e,bf,b7,2e)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,loadsave),HX_("loadsave",63,30,14,d2)},
	{::hx::fsBool,(int)offsetof(PlayState_obj,getBag),HX_("getBag",d2,ea,19,a3)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(PlayState_obj,ufo),HX_("ufo",fe,20,59,00)},
	{::hx::fsObject /*  ::flixel::util::FlxSave */ ,(int)offsetof(PlayState_obj,save),HX_("save",3d,8b,4d,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PlayState_obj_sStaticStorageInfo = 0;
#endif

static ::String PlayState_obj_sMemberFields[] = {
	HX_("player",61,eb,b8,37),
	HX_("tip",5b,61,58,00),
	HX_("bag",c8,b1,4a,00),
	HX_("cancel",7a,ed,33,b8),
	HX_("bananaSound",2a,da,05,3c),
	HX_("touchEnemy",09,f6,0b,6a),
	HX_("openBag",1e,60,27,40),
	HX_("doorTele",b8,2e,a1,9c),
	HX_("saveNoise",1d,97,6f,2e),
	HX_("dia",3c,3d,4c,00),
	HX_("diaUpDown",b9,9a,1d,44),
	HX_("name",4b,72,ff,48),
	HX_("txt",70,6e,58,00),
	HX_("talkYes",5b,2b,9c,16),
	HX_("banana",65,14,d7,51),
	HX_("twentyBanana",76,50,2a,4c),
	HX_("enemy",48,12,7b,70),
	HX_("enemyType",22,f5,27,ad),
	HX_("inCombat",f9,59,a4,4f),
	HX_("combatHud",e3,10,9a,6a),
	HX_("enemyFlicker",90,49,59,4b),
	HX_("shibaYes",f4,d1,80,3f),
	HX_("nftYes",4b,7d,11,03),
	HX_("seePlayerThen",51,d4,2d,c4),
	HX_("seePlayerNow",22,f2,b7,e0),
	HX_("npc",e1,d9,53,00),
	HX_("npcType",3b,fd,be,de),
	HX_("dogeYes",3e,9e,4b,31),
	HX_("srYes",c8,e9,b2,82),
	HX_("sgYes",f3,90,6d,7b),
	HX_("sbYes",d8,7f,1f,78),
	HX_("sblackYes",1b,18,17,43),
	HX_("mingYes",92,1d,89,4a),
	HX_("stoneYes",c2,5d,1a,84),
	HX_("shop",f6,d4,52,4c),
	HX_("minerDoor",8d,3b,b4,57),
	HX_("minerOpen",e9,4d,fa,5e),
	HX_("minerYes",e8,c7,20,d7),
	HX_("lakeMoney",71,c8,06,0d),
	HX_("talkCounter",30,db,98,11),
	HX_("map",9c,0a,53,00),
	HX_("through",45,48,3d,5a),
	HX_("walls",29,0c,1f,c5),
	HX_("road",e0,e1,ae,4b),
	HX_("ground",87,22,28,1c),
	HX_("sea",8f,9b,57,00),
	HX_("treeBar",15,7f,d6,d6),
	HX_("weirdTreeBar",88,6d,a4,31),
	HX_("treeBarWave",6e,bf,b7,2e),
	HX_("loadsave",63,30,14,d2),
	HX_("getBag",d2,ea,19,a3),
	HX_("ufo",fe,20,59,00),
	HX_("save",3d,8b,4d,4c),
	HX_("create",fc,66,0f,7c),
	HX_("placeEntities",28,e6,91,17),
	HX_("saveFile",59,68,75,f7),
	HX_("loadFile",c2,9f,5b,b4),
	HX_("update",09,86,05,87),
	HX_("updateMission",43,25,f3,fe),
	HX_("updateInCombat",22,4d,ce,84),
	HX_("playerTouchEnemy",ca,48,30,6f),
	HX_("checkEnemyVision",68,24,16,8c),
	HX_("npcTalk",ad,c3,ac,de),
	HX_("getBanana",9b,9d,2d,ce),
	HX_("goToMiner",bc,a1,3e,4e),
	HX_("shopOpen",e0,b7,6c,a9),
	HX_("updateTalking",2d,bc,16,e2),
	HX_("updateWhenDiaInvisible",54,94,25,66),
	HX_("playerUpDown",9e,f2,da,6d),
	HX_("updateF4",77,17,fa,77),
	HX_("updateC",1a,c2,cf,9d),
	::String(null()) };

::hx::Class PlayState_obj::__mClass;

void PlayState_obj::__register()
{
	PlayState_obj _hx_dummy;
	PlayState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("PlayState",5d,83,c2,46);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PlayState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PlayState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PlayState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PlayState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

