// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_MenuState
#include <MenuState.h>
#endif
#ifndef INCLUDED_MinerState
#include <MinerState.h>
#endif
#ifndef INCLUDED_OpeningState
#include <OpeningState.h>
#endif
#ifndef INCLUDED_PlayState
#include <PlayState.h>
#endif
#ifndef INCLUDED_Pointer
#include <Pointer.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StreetState
#include <StreetState.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxCamera
#include <flixel/FlxCamera.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_FlxPointer
#include <flixel/input/FlxPointer.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_input_mouse_FlxMouse
#include <flixel/input/mouse/FlxMouse.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSound
#include <flixel/system/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_FlxSoundGroup
#include <flixel/system/FlxSoundGroup.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_text_FlxText
#include <flixel/text/FlxText.h>
#endif
#ifndef INCLUDED_flixel_util_FlxAxes
#include <flixel/util/FlxAxes.h>
#endif
#ifndef INCLUDED_flixel_util_FlxSave
#include <flixel/util/FlxSave.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_1f119275e66a7b90_12_new,"MenuState","new",0xe563b1c4,"MenuState.new","MenuState.hx",12,0xdfbcb22c)
static const ::String _hx_array_data_c0b6bfd2_1[] = {
	HX_("continue",67,e0,c8,31),HX_("restart",cf,c7,a5,6a),HX_("about",4d,ce,f9,1a),
};
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_39_create,"MenuState","create",0xe57b7c18,"MenuState.create","MenuState.hx",39,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_111_update,"MenuState","update",0xf0719b25,"MenuState.update","MenuState.hx",111,0xdfbcb22c)
static const int _hx_array_data_c0b6bfd2_5[] = {
	(int)38,(int)87,
};
static const int _hx_array_data_c0b6bfd2_6[] = {
	(int)40,(int)83,
};
static const int _hx_array_data_c0b6bfd2_7[] = {
	(int)13,(int)32,(int)90,
};
static const int _hx_array_data_c0b6bfd2_8[] = {
	(int)88,(int)27,
};
static const int _hx_array_data_c0b6bfd2_9[] = {
	(int)81,
};
static const int _hx_array_data_c0b6bfd2_10[] = {
	(int)69,
};
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_143_update,"MenuState","update",0xf0719b25,"MenuState.update","MenuState.hx",143,0xdfbcb22c)
HX_LOCAL_STACK_FRAME(_hx_pos_1f119275e66a7b90_161_update,"MenuState","update",0xf0719b25,"MenuState.update","MenuState.hx",161,0xdfbcb22c)

void MenuState_obj::__construct( ::Dynamic MaxSize){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_12_new)
HXLINE(  29)		this->pointerCho = ::Array_obj< ::String >::fromData( _hx_array_data_c0b6bfd2_1,3);
HXLINE(  28)		this->pointerDir = HX_("ud",4f,66,00,00);
HXLINE(  27)		this->pointerChoNum = 3;
HXLINE(  26)		this->pointerBar = 150;
HXLINE(  25)		this->pointerY = 630;
HXLINE(  24)		this->pointerX = 780;
HXLINE(  12)		super::__construct(MaxSize);
            	}

Dynamic MenuState_obj::__CreateEmpty() { return new MenuState_obj; }

void *MenuState_obj::_hx_vtable = 0;

Dynamic MenuState_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MenuState_obj > _hx_result = new MenuState_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool MenuState_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x62817b24) {
		if (inClassId<=(int)0x32c1072e) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x32c1072e;
		} else {
			return inClassId==(int)0x62817b24;
		}
	} else {
		return inClassId==(int)0x7c795c9f || inClassId==(int)0x7ccf8994;
	}
}

void MenuState_obj::create(){
            	HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_39_create)
HXLINE(  41)		this->menuBackground =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/menuMainNew.png",b8,9f,b0,f0));
HXLINE(  42)		this->add(this->menuBackground);
HXLINE(  45)		this->pointer =  ::Pointer_obj::__alloc( HX_CTX ,null(),null());
HXLINE(  46)		this->pointer->set_color(-3369207);
HXLINE(  47)		this->add(this->pointer);
HXLINE(  48)		this->pointer->setPointer(( (Float)(this->pointerX) ),( (Float)(this->pointerY) ),this->pointerBar,this->pointerCho,this->pointerDir);
HXLINE(  51)		this->check = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/check.ogg",5d,94,6a,8d),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  52)		this->cancel = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/cancel.ogg",27,62,c6,8f),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  53)		this->noNoise = ::flixel::FlxG_obj::sound->load(HX_("assets/sound/no.ogg",6e,ee,68,47),null(),null(),null(),null(),null(),null(),null(),null());
HXLINE(  56)		this->about =  ::flixel::FlxSprite_obj::__alloc( HX_CTX ,0,0,HX_("assets/images/menuAbout.png",de,1d,b5,4b));
HXLINE(  57)		this->about->screenCenter(null());
HXLINE(  58)		this->add(this->about);
HXLINE(  59)		this->about->set_visible(false);
HXLINE(  62)		this->aboutText =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,(this->about->y + 150),480,HX_W(u"\u64cd\u4f5c\u8aaa\u660e\uff1a\n\u65b9\u5411\u9375\uff1a\u79fb\u52d5\n\u65b9\u5411\u9375+\u6309\u4f4fShift\uff1a\u8dd1\u6b65\nENTER\u3001SPACE\u3001Z\uff1a\u8abf\u67e5\u3001\u5c0d\u8a71\u63db\u884c\u3001\u78ba\u5b9a\nX\u3001esc\uff1a\u53d6\u6d88\nF4\uff1a\u56de\u4e3b\u9078\u55ae\nC\uff1a\u67e5\u770b\u6301\u6709\u7269\u54c1",0c96,bb84),60,null());
HXLINE(  63)		this->aboutText->set_borderColor(-16777216);
HXLINE(  64)		this->aboutText->set_font(HX_("assets/data/silver.ttf",3e,fd,5b,64));
HXLINE(  65)		this->aboutText->set_color(-16777216);
HXLINE(  66)		this->aboutText->screenCenter(::flixel::util::FlxAxes_obj::X_dyn());
HXLINE(  67)		this->add(this->aboutText);
HXLINE(  68)		this->aboutText->set_visible(false);
HXLINE(  71)		this->ufo =  ::flixel::text::FlxText_obj::__alloc( HX_CTX ,0,0,0,HX_("ufo",fe,20,59,00),60,null());
HXLINE(  72)		this->ufo->set_borderColor(-16777216);
HXLINE(  73)		this->ufo->set_borderSize(( (Float)(1) ));
HXLINE(  74)		this->ufo->set_color(-16777216);
HXLINE(  75)		this->add(this->ufo);
HXLINE(  76)		this->ufo->set_visible(false);
HXLINE(  79)		this->save =  ::flixel::util::FlxSave_obj::__alloc( HX_CTX );
HXLINE(  80)		this->save->bind(HX_("DefiAdv",6f,39,37,6e),null());
HXLINE(  82)		if (::hx::IsNotNull( this->save->data->__Field(HX_("bananaValue",cc,cc,f1,ec),::hx::paccDynamic) )) {
HXLINE(  84)			this->pointer->set_y(( (Float)(this->pointerY) ));
HXLINE(  85)			this->menuBackground->loadGraphic(HX_("assets/images/menuMain.png",de,4a,5c,e3),null(),null(),null(),null(),null());
            		}
            		else {
HXLINE(  89)			this->pointer->set_y(( (Float)((this->pointerY + this->pointerBar)) ));
HXLINE(  90)			this->menuBackground->loadGraphic(HX_("assets/images/menuMainNew.png",b8,9f,b0,f0),null(),null(),null(),null(),null());
            		}
HXLINE(  93)		if (::hx::IsNotNull( this->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic) )) {
HXLINE(  95)			this->save->data->__SetField(HX_("place",c7,f4,8d,c4),this->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic),::hx::paccDynamic);
            		}
HXLINE(  97)		this->save->flush(null(),null());
HXLINE( 100)		::flixel::FlxG_obj::sound->playMusic(HX_("assets/music/menuTheme.ogg",d5,94,0c,f7),((Float)0.3),true,null());
HXLINE( 102)		::flixel::FlxG_obj::mouse->set_visible(false);
HXLINE( 105)		::flixel::FlxG_obj::camera->fade(-16777216,((Float)0.33),true,null(),null());
HXLINE( 107)		this->super::create();
            	}


void MenuState_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_1f119275e66a7b90_111_update)
HXDLIN( 111)		 ::MenuState _gthis = ::hx::ObjectPtr<OBJ_>(this);
HXLINE( 112)		this->super::update(elapsed);
HXLINE( 113)		 ::flixel::text::FlxText _hx_tmp = this->ufo;
HXDLIN( 113)		_hx_tmp->set_text(::Std_obj::string( ::Dynamic(this->save->data->__Field(HX_("bananaValue",cc,cc,f1,ec),::hx::paccDynamic))));
HXLINE( 115)		bool up = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_c0b6bfd2_5,2),-1);
HXLINE( 116)		bool down = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_c0b6bfd2_6,2),-1);
HXLINE( 117)		bool enter = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_c0b6bfd2_7,3),-1);
HXLINE( 118)		bool x = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_c0b6bfd2_8,2),-1);
HXLINE( 119)		bool q = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_c0b6bfd2_9,1),-1);
HXLINE( 121)		bool e = ::flixel::FlxG_obj::keys->checkKeyArrayState(::Array_obj< int >::fromData( _hx_array_data_c0b6bfd2_10,1),-1);
HXLINE( 122)		if (e) {
HXLINE( 124)			this->ufo->set_visible(true);
            		}
HXLINE( 133)		bool _hx_tmp1;
HXDLIN( 133)		if (enter) {
HXLINE( 133)			_hx_tmp1 = !(this->about->visible);
            		}
            		else {
HXLINE( 133)			_hx_tmp1 = false;
            		}
HXDLIN( 133)		if (_hx_tmp1) {
HXLINE( 135)			::String _hx_switch_0 = this->pointer->selected;
            			if (  (_hx_switch_0==HX_("about",4d,ce,f9,1a)) ){
HXLINE( 168)				this->check->play(null(),null(),null());
HXLINE( 169)				this->about->set_visible(true);
HXLINE( 170)				this->aboutText->set_visible(true);
HXLINE( 167)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("continue",67,e0,c8,31)) ){
HXLINE( 139)				if (::hx::IsNotNull( this->save->data->__Field(HX_("bananaValue",cc,cc,f1,ec),::hx::paccDynamic) )) {
            					HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_0, ::MenuState,_gthis) HXARGC(0)
            					void _hx_run(){
            						HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_143_update)
HXLINE( 144)						_gthis->loadsave = true;
HXLINE( 145)						if (::hx::IsEq( _gthis->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic),HX_("miner",7f,72,68,08) )) {
HXLINE( 146)							 ::flixel::FlxState nextState =  ::MinerState_obj::__alloc( HX_CTX ,null());
HXDLIN( 146)							if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 146)								::flixel::FlxG_obj::game->_requestedState = nextState;
            							}
            						}
            						else {
HXLINE( 147)							if (::hx::IsEq( _gthis->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic),HX_("monument",47,ea,c5,03) )) {
HXLINE( 148)								 ::flixel::FlxState nextState =  ::PlayState_obj::__alloc( HX_CTX ,_gthis->loadsave);
HXDLIN( 148)								if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 148)									::flixel::FlxG_obj::game->_requestedState = nextState;
            								}
            							}
            							else {
HXLINE( 149)								if (::hx::IsEq( _gthis->save->data->__Field(HX_("place",c7,f4,8d,c4),::hx::paccDynamic),HX_("street",03,18,2d,11) )) {
HXLINE( 150)									 ::flixel::FlxState nextState =  ::StreetState_obj::__alloc( HX_CTX ,null());
HXDLIN( 150)									if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 150)										::flixel::FlxG_obj::game->_requestedState = nextState;
            									}
            								}
            							}
            						}
            					}
            					HX_END_LOCAL_FUNC0((void))

HXLINE( 141)					this->check->play(null(),null(),null());
HXLINE( 142)					::flixel::FlxG_obj::camera->fade(-16777216,((Float).33),false, ::Dynamic(new _hx_Closure_0(_gthis)),null());
            				}
            				else {
HXLINE( 154)					this->noNoise->play(true,null(),null());
            				}
HXLINE( 155)				this->save->flush(null(),null());
HXLINE( 138)				goto _hx_goto_3;
            			}
            			if (  (_hx_switch_0==HX_("restart",cf,c7,a5,6a)) ){
            				HX_BEGIN_LOCAL_FUNC_S1(::hx::LocalFunc,_hx_Closure_1, ::MenuState,_gthis) HXARGC(0)
            				void _hx_run(){
            					HX_GC_STACKFRAME(&_hx_pos_1f119275e66a7b90_161_update)
HXLINE( 162)					_gthis->save->erase();
HXLINE( 163)					{
HXLINE( 163)						 ::flixel::FlxState nextState =  ::OpeningState_obj::__alloc( HX_CTX ,true);
HXDLIN( 163)						if (::flixel::FlxG_obj::game->_state->switchTo(nextState)) {
HXLINE( 163)							::flixel::FlxG_obj::game->_requestedState = nextState;
            						}
            					}
            				}
            				HX_END_LOCAL_FUNC0((void))

HXLINE( 159)				this->check->play(null(),null(),null());
HXLINE( 160)				::flixel::FlxG_obj::camera->fade(-16777216,((Float).33),false, ::Dynamic(new _hx_Closure_1(_gthis)),null());
HXLINE( 158)				goto _hx_goto_3;
            			}
            			_hx_goto_3:;
            		}
HXLINE( 175)		bool _hx_tmp2;
HXDLIN( 175)		if (x) {
HXLINE( 175)			_hx_tmp2 = this->about->visible;
            		}
            		else {
HXLINE( 175)			_hx_tmp2 = false;
            		}
HXDLIN( 175)		if (_hx_tmp2) {
HXLINE( 177)			this->cancel->play(true,null(),null());
HXLINE( 178)			this->about->set_visible(false);
HXLINE( 179)			this->aboutText->set_visible(false);
            		}
HXLINE( 183)		if (q) {
HXLINE( 185)			::Sys_obj::exit(0);
            		}
            	}



::hx::ObjectPtr< MenuState_obj > MenuState_obj::__new( ::Dynamic MaxSize) {
	::hx::ObjectPtr< MenuState_obj > __this = new MenuState_obj();
	__this->__construct(MaxSize);
	return __this;
}

::hx::ObjectPtr< MenuState_obj > MenuState_obj::__alloc(::hx::Ctx *_hx_ctx, ::Dynamic MaxSize) {
	MenuState_obj *__this = (MenuState_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MenuState_obj), true, "MenuState"));
	*(void **)__this = MenuState_obj::_hx_vtable;
	__this->__construct(MaxSize);
	return __this;
}

MenuState_obj::MenuState_obj()
{
}

void MenuState_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(MenuState);
	HX_MARK_MEMBER_NAME(menuBackground,"menuBackground");
	HX_MARK_MEMBER_NAME(about,"about");
	HX_MARK_MEMBER_NAME(aboutText,"aboutText");
	HX_MARK_MEMBER_NAME(check,"check");
	HX_MARK_MEMBER_NAME(cancel,"cancel");
	HX_MARK_MEMBER_NAME(noNoise,"noNoise");
	HX_MARK_MEMBER_NAME(pointerX,"pointerX");
	HX_MARK_MEMBER_NAME(pointerY,"pointerY");
	HX_MARK_MEMBER_NAME(pointerBar,"pointerBar");
	HX_MARK_MEMBER_NAME(pointerChoNum,"pointerChoNum");
	HX_MARK_MEMBER_NAME(pointerDir,"pointerDir");
	HX_MARK_MEMBER_NAME(pointerCho,"pointerCho");
	HX_MARK_MEMBER_NAME(pointer,"pointer");
	HX_MARK_MEMBER_NAME(loadsave,"loadsave");
	HX_MARK_MEMBER_NAME(ufo,"ufo");
	HX_MARK_MEMBER_NAME(save,"save");
	 ::flixel::FlxState_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void MenuState_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(menuBackground,"menuBackground");
	HX_VISIT_MEMBER_NAME(about,"about");
	HX_VISIT_MEMBER_NAME(aboutText,"aboutText");
	HX_VISIT_MEMBER_NAME(check,"check");
	HX_VISIT_MEMBER_NAME(cancel,"cancel");
	HX_VISIT_MEMBER_NAME(noNoise,"noNoise");
	HX_VISIT_MEMBER_NAME(pointerX,"pointerX");
	HX_VISIT_MEMBER_NAME(pointerY,"pointerY");
	HX_VISIT_MEMBER_NAME(pointerBar,"pointerBar");
	HX_VISIT_MEMBER_NAME(pointerChoNum,"pointerChoNum");
	HX_VISIT_MEMBER_NAME(pointerDir,"pointerDir");
	HX_VISIT_MEMBER_NAME(pointerCho,"pointerCho");
	HX_VISIT_MEMBER_NAME(pointer,"pointer");
	HX_VISIT_MEMBER_NAME(loadsave,"loadsave");
	HX_VISIT_MEMBER_NAME(ufo,"ufo");
	HX_VISIT_MEMBER_NAME(save,"save");
	 ::flixel::FlxState_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val MenuState_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ufo") ) { return ::hx::Val( ufo ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"save") ) { return ::hx::Val( save ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"about") ) { return ::hx::Val( about ); }
		if (HX_FIELD_EQ(inName,"check") ) { return ::hx::Val( check ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cancel") ) { return ::hx::Val( cancel ); }
		if (HX_FIELD_EQ(inName,"create") ) { return ::hx::Val( create_dyn() ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"noNoise") ) { return ::hx::Val( noNoise ); }
		if (HX_FIELD_EQ(inName,"pointer") ) { return ::hx::Val( pointer ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pointerX") ) { return ::hx::Val( pointerX ); }
		if (HX_FIELD_EQ(inName,"pointerY") ) { return ::hx::Val( pointerY ); }
		if (HX_FIELD_EQ(inName,"loadsave") ) { return ::hx::Val( loadsave ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"aboutText") ) { return ::hx::Val( aboutText ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pointerBar") ) { return ::hx::Val( pointerBar ); }
		if (HX_FIELD_EQ(inName,"pointerDir") ) { return ::hx::Val( pointerDir ); }
		if (HX_FIELD_EQ(inName,"pointerCho") ) { return ::hx::Val( pointerCho ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pointerChoNum") ) { return ::hx::Val( pointerChoNum ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"menuBackground") ) { return ::hx::Val( menuBackground ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val MenuState_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"ufo") ) { ufo=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"save") ) { save=inValue.Cast<  ::flixel::util::FlxSave >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"about") ) { about=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
		if (HX_FIELD_EQ(inName,"check") ) { check=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"cancel") ) { cancel=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"noNoise") ) { noNoise=inValue.Cast<  ::flixel::_hx_system::FlxSound >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointer") ) { pointer=inValue.Cast<  ::Pointer >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pointerX") ) { pointerX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointerY") ) { pointerY=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"loadsave") ) { loadsave=inValue.Cast< bool >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"aboutText") ) { aboutText=inValue.Cast<  ::flixel::text::FlxText >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pointerBar") ) { pointerBar=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointerDir") ) { pointerDir=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pointerCho") ) { pointerCho=inValue.Cast< ::Array< ::String > >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"pointerChoNum") ) { pointerChoNum=inValue.Cast< int >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"menuBackground") ) { menuBackground=inValue.Cast<  ::flixel::FlxSprite >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void MenuState_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("menuBackground",6d,ba,74,ab));
	outFields->push(HX_("about",4d,ce,f9,1a));
	outFields->push(HX_("aboutText",9a,71,a6,a4));
	outFields->push(HX_("check",c8,98,b6,45));
	outFields->push(HX_("cancel",7a,ed,33,b8));
	outFields->push(HX_("noNoise",99,13,c6,72));
	outFields->push(HX_("pointerX",fb,e4,66,ac));
	outFields->push(HX_("pointerY",fc,e4,66,ac));
	outFields->push(HX_("pointerBar",16,fd,95,bf));
	outFields->push(HX_("pointerChoNum",d9,32,7a,21));
	outFields->push(HX_("pointerDir",90,88,97,bf));
	outFields->push(HX_("pointerCho",6d,c5,96,bf));
	outFields->push(HX_("pointer",bd,c0,21,51));
	outFields->push(HX_("loadsave",63,30,14,d2));
	outFields->push(HX_("ufo",fe,20,59,00));
	outFields->push(HX_("save",3d,8b,4d,4c));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo MenuState_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuState_obj,menuBackground),HX_("menuBackground",6d,ba,74,ab)},
	{::hx::fsObject /*  ::flixel::FlxSprite */ ,(int)offsetof(MenuState_obj,about),HX_("about",4d,ce,f9,1a)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuState_obj,aboutText),HX_("aboutText",9a,71,a6,a4)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(MenuState_obj,check),HX_("check",c8,98,b6,45)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(MenuState_obj,cancel),HX_("cancel",7a,ed,33,b8)},
	{::hx::fsObject /*  ::flixel::_hx_system::FlxSound */ ,(int)offsetof(MenuState_obj,noNoise),HX_("noNoise",99,13,c6,72)},
	{::hx::fsInt,(int)offsetof(MenuState_obj,pointerX),HX_("pointerX",fb,e4,66,ac)},
	{::hx::fsInt,(int)offsetof(MenuState_obj,pointerY),HX_("pointerY",fc,e4,66,ac)},
	{::hx::fsInt,(int)offsetof(MenuState_obj,pointerBar),HX_("pointerBar",16,fd,95,bf)},
	{::hx::fsInt,(int)offsetof(MenuState_obj,pointerChoNum),HX_("pointerChoNum",d9,32,7a,21)},
	{::hx::fsString,(int)offsetof(MenuState_obj,pointerDir),HX_("pointerDir",90,88,97,bf)},
	{::hx::fsObject /* ::Array< ::String > */ ,(int)offsetof(MenuState_obj,pointerCho),HX_("pointerCho",6d,c5,96,bf)},
	{::hx::fsObject /*  ::Pointer */ ,(int)offsetof(MenuState_obj,pointer),HX_("pointer",bd,c0,21,51)},
	{::hx::fsBool,(int)offsetof(MenuState_obj,loadsave),HX_("loadsave",63,30,14,d2)},
	{::hx::fsObject /*  ::flixel::text::FlxText */ ,(int)offsetof(MenuState_obj,ufo),HX_("ufo",fe,20,59,00)},
	{::hx::fsObject /*  ::flixel::util::FlxSave */ ,(int)offsetof(MenuState_obj,save),HX_("save",3d,8b,4d,4c)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *MenuState_obj_sStaticStorageInfo = 0;
#endif

static ::String MenuState_obj_sMemberFields[] = {
	HX_("menuBackground",6d,ba,74,ab),
	HX_("about",4d,ce,f9,1a),
	HX_("aboutText",9a,71,a6,a4),
	HX_("check",c8,98,b6,45),
	HX_("cancel",7a,ed,33,b8),
	HX_("noNoise",99,13,c6,72),
	HX_("pointerX",fb,e4,66,ac),
	HX_("pointerY",fc,e4,66,ac),
	HX_("pointerBar",16,fd,95,bf),
	HX_("pointerChoNum",d9,32,7a,21),
	HX_("pointerDir",90,88,97,bf),
	HX_("pointerCho",6d,c5,96,bf),
	HX_("pointer",bd,c0,21,51),
	HX_("loadsave",63,30,14,d2),
	HX_("ufo",fe,20,59,00),
	HX_("save",3d,8b,4d,4c),
	HX_("create",fc,66,0f,7c),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class MenuState_obj::__mClass;

void MenuState_obj::__register()
{
	MenuState_obj _hx_dummy;
	MenuState_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("MenuState",d2,bf,b6,c0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(MenuState_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< MenuState_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MenuState_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MenuState_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

