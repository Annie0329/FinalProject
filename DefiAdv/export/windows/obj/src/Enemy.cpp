// Generated by Haxe 4.2.1+bf9ff69
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Enemy
#include <Enemy.h>
#endif
#ifndef INCLUDED_EnemyType
#include <EnemyType.h>
#endif
#ifndef INCLUDED_FSM
#include <FSM.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxObject
#include <flixel/FlxObject.h>
#endif
#ifndef INCLUDED_flixel_FlxSprite
#include <flixel/FlxSprite.h>
#endif
#ifndef INCLUDED_flixel_animation_FlxAnimationController
#include <flixel/animation/FlxAnimationController.h>
#endif
#ifndef INCLUDED_flixel_math_FlxPoint
#include <flixel/math/FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_math_FlxRandom
#include <flixel/math/FlxRandom.h>
#endif
#ifndef INCLUDED_flixel_tweens_FlxTween
#include <flixel/tweens/FlxTween.h>
#endif
#ifndef INCLUDED_flixel_tweens_misc_VarTween
#include <flixel/tweens/misc/VarTween.h>
#endif
#ifndef INCLUDED_flixel_util_FlxPool_flixel_math_FlxPoint
#include <flixel/util/FlxPool_flixel_math_FlxPoint.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPool
#include <flixel/util/IFlxPool.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxPooled
#include <flixel/util/IFlxPooled.h>
#endif
#ifndef INCLUDED_haxe_IMap
#include <haxe/IMap.h>
#endif
#ifndef INCLUDED_haxe_ds_IntMap
#include <haxe/ds/IntMap.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_c595a05c1c7a687d_39_new,"Enemy","new",0x35d4571a,"Enemy.new","Enemy.hx",39,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_73_switchType,"Enemy","switchType",0xdcdc9754,"Enemy.switchType","Enemy.hx",73,0xbda88996)
static const int _hx_array_data_03a88228_2[] = {
	(int)3,(int)4,(int)5,(int)4,
};
static const int _hx_array_data_03a88228_3[] = {
	(int)6,(int)7,(int)8,(int)7,
};
static const int _hx_array_data_03a88228_4[] = {
	(int)0,(int)1,(int)2,(int)1,
};
static const int _hx_array_data_03a88228_5[] = {
	(int)0,(int)1,(int)2,(int)3,
};
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_106_enemyFire,"Enemy","enemyFire",0x6c1c2458,"Enemy.enemyFire","Enemy.hx",106,0xbda88996)
static const int _hx_array_data_03a88228_7[] = {
	(int)0,(int)1,(int)2,(int)3,(int)4,(int)5,(int)6,(int)7,(int)8,(int)9,
};
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_117_idle,"Enemy","idle",0xe0a9031a,"Enemy.idle","Enemy.hx",117,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_159_changeType,"Enemy","changeType",0x98354cd0,"Enemy.changeType","Enemy.hx",159,0xbda88996)
HX_LOCAL_STACK_FRAME(_hx_pos_c595a05c1c7a687d_167_update,"Enemy","update",0xcf0e6f8f,"Enemy.update","Enemy.hx",167,0xbda88996)

void Enemy_obj::__construct(Float x,Float y, ::EnemyType type){
            	HX_GC_STACKFRAME(&_hx_pos_c595a05c1c7a687d_39_new)
HXLINE(  54)		this->onFire = false;
HXLINE(  49)		this->enemyEnd = 2760;
HXLINE(  48)		this->enemyStart = 240;
HXLINE(  42)		this->SPEED = ((Float)100);
HXLINE(  58)		super::__construct(x,y,null());
HXLINE(  59)		this->type = type;
HXLINE(  62)		this->switchType(type);
HXLINE(  64)		 ::flixel::math::FlxPoint _hx_tmp = this->drag;
HXDLIN(  64)		_hx_tmp->set_x(this->drag->set_y(( (Float)(30) )));
HXLINE(  67)		this->brain =  ::FSM_obj::__alloc( HX_CTX ,this->idle_dyn());
HXLINE(  68)		this->idleTimer = ( (Float)(0) );
HXLINE(  69)		 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN(  69)		point->_inPool = false;
HXDLIN(  69)		this->playerPosition = point;
            	}

Dynamic Enemy_obj::__CreateEmpty() { return new Enemy_obj; }

void *Enemy_obj::_hx_vtable = 0;

Dynamic Enemy_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Enemy_obj > _hx_result = new Enemy_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2]);
	return _hx_result;
}

bool Enemy_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x4fa17fa0) {
		if (inClassId<=(int)0x2c01639b) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2c01639b;
		} else {
			return inClassId==(int)0x4fa17fa0;
		}
	} else {
		return inClassId==(int)0x7ccf8994 || inClassId==(int)0x7dab0655;
	}
}

void Enemy_obj::switchType( ::EnemyType type){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_73_switchType)
HXLINE(  74)		switch((int)(type->_hx_getIndex())){
            			case (int)0: {
HXLINE(  77)				this->loadGraphic(HX_("assets/images/shibaCoin.png",d4,d8,f8,19),true,168,192,null(),null());
HXLINE(  79)				this->animation->add(HX_("lr",86,5e,00,00),::Array_obj< int >::fromData( _hx_array_data_03a88228_2,4),6,false,null(),null());
HXLINE(  80)				this->animation->add(HX_("u",75,00,00,00),::Array_obj< int >::fromData( _hx_array_data_03a88228_3,4),6,false,null(),null());
HXLINE(  81)				this->animation->add(HX_("d",64,00,00,00),::Array_obj< int >::fromData( _hx_array_data_03a88228_4,4),6,false,null(),null());
            			}
            			break;
            			case (int)1: {
HXLINE(  83)				this->loadGraphic(HX_("assets/images/cloudMiner.png",f0,f7,64,00),null(),null(),null(),null(),null());
            			}
            			break;
            			case (int)2: {
HXLINE(  85)				this->loadGraphic(HX_("assets/images/nft.png",2c,20,c6,81),true,168,192,null(),null());
HXLINE(  86)				this->animation->set_frameIndex(0);
            			}
            			break;
            			case (int)3: {
HXLINE(  89)				this->loadGraphic(HX_("assets/images/spartanMiner.png",12,62,04,e4),true,192,192,null(),null());
HXLINE(  90)				this->animation->add(HX_("lrSpartan",6d,fa,4d,df),::Array_obj< int >::fromData( _hx_array_data_03a88228_5,4),6,false,null(),null());
HXLINE(  91)				this->set_immovable(true);
            			}
            			break;
            			case (int)4: {
HXLINE(  93)				this->loadGraphic(HX_("assets/images/rod.png",77,f2,e8,8a),null(),null(),null(),null(),null());
            			}
            			break;
            			case (int)5: {
HXLINE(  96)				this->loadGraphic(HX_("assets/images/apeStarter.png",ff,3d,d2,5e),null(),null(),null(),null(),null());
HXLINE(  97)				this->set_immovable(true);
            			}
            			break;
            		}
HXLINE( 100)		this->_facingFlip->set(1, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),false)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
HXLINE( 101)		this->_facingFlip->set(16, ::Dynamic(::hx::Anon_obj::Create(2)
            			->setFixed(0,HX_("x",78,00,00,00),true)
            			->setFixed(1,HX_("y",79,00,00,00),false)));
            	}


HX_DEFINE_DYNAMIC_FUNC1(Enemy_obj,switchType,(void))

void Enemy_obj::enemyFire(){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_106_enemyFire)
HXLINE( 107)		this->onFire = true;
HXLINE( 108)		this->set_alive(false);
HXLINE( 109)		this->loadGraphic(HX_("assets/images/ponziFire.png",84,91,83,54),true,192,192,null(),null());
HXLINE( 110)		this->animation->add(HX_("fire",b6,d3,bb,43),::Array_obj< int >::fromData( _hx_array_data_03a88228_7,10),10,false,null(),null());
HXLINE( 111)		this->animation->play(HX_("fire",b6,d3,bb,43),null(),null(),null());
            	}


HX_DEFINE_DYNAMIC_FUNC0(Enemy_obj,enemyFire,(void))

void Enemy_obj::idle(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_117_idle)
HXDLIN( 117)		if ((this->idleTimer <= 0)) {
HXLINE( 119)			switch((int)(this->type->_hx_getIndex())){
            				case (int)0: case (int)1: case (int)2: case (int)4: {
HXLINE( 135)					if ((::flixel::FlxG_obj::random->_hx_float(0,100,null()) < 1)) {
HXLINE( 137)						this->moveDirection = ( (Float)(-1) );
HXLINE( 138)						 ::flixel::math::FlxPoint _hx_tmp = this->velocity;
HXDLIN( 138)						_hx_tmp->set_x(this->velocity->set_y(( (Float)(0) )));
            					}
            					else {
HXLINE( 143)						this->moveDirection = ( (Float)((::flixel::FlxG_obj::random->_hx_int(0,8,null()) * 45)) );
HXLINE( 144)						this->velocity->set(this->SPEED,0);
HXLINE( 146)						 ::flixel::math::FlxPoint _hx_tmp = this->velocity;
HXDLIN( 146)						 ::flixel::math::FlxPoint point = ::flixel::math::FlxPoint_obj::_pool->get()->set(( (Float)(0) ),( (Float)(0) ));
HXDLIN( 146)						point->_inPool = false;
HXDLIN( 146)						 ::flixel::math::FlxPoint point1 = point;
HXDLIN( 146)						point1->_weak = true;
HXDLIN( 146)						_hx_tmp->rotate(point1,this->moveDirection);
            					}
HXLINE( 149)					this->idleTimer = ( (Float)(::flixel::FlxG_obj::random->_hx_int(1,4,null())) );
            				}
            				break;
            				case (int)3: {
HXLINE( 122)					if ((this->x == this->enemyStart)) {
HXLINE( 124)						::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(1)
            							->setFixed(0,HX_("x",78,00,00,00),this->enemyEnd)),3,null());
HXLINE( 125)						this->set_facing(16);
            					}
            					else {
HXLINE( 127)						if ((this->x == this->enemyEnd)) {
HXLINE( 129)							::flixel::tweens::FlxTween_obj::tween(::hx::ObjectPtr<OBJ_>(this), ::Dynamic(::hx::Anon_obj::Create(1)
            								->setFixed(0,HX_("x",78,00,00,00),this->enemyStart)),3,null());
HXLINE( 130)							this->set_facing(1);
            						}
            					}
HXLINE( 132)					this->animation->play(HX_("lrSpartan",6d,fa,4d,df),null(),null(),null());
            				}
            				break;
            				case (int)5: {
            				}
            				break;
            			}
            		}
            		else {
HXLINE( 154)			 ::Enemy _hx_tmp = ::hx::ObjectPtr<OBJ_>(this);
HXDLIN( 154)			_hx_tmp->idleTimer = (_hx_tmp->idleTimer - elapsed);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Enemy_obj,idle,(void))

void Enemy_obj::changeType( ::EnemyType type){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_159_changeType)
HXDLIN( 159)		if (::hx::IsPointerNotEq( this->type,type )) {
HXLINE( 161)			this->type = type;
HXLINE( 162)			this->switchType(type);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(Enemy_obj,changeType,(void))

void Enemy_obj::update(Float elapsed){
            	HX_STACKFRAME(&_hx_pos_c595a05c1c7a687d_167_update)
HXLINE( 168)		bool _hx_tmp;
HXDLIN( 168)		if (this->onFire) {
HXLINE( 168)			_hx_tmp = this->animation->get_finished();
            		}
            		else {
HXLINE( 168)			_hx_tmp = false;
            		}
HXDLIN( 168)		if (_hx_tmp) {
HXLINE( 170)			this->set_exists(false);
            		}
HXLINE( 174)		bool _hx_tmp1;
HXDLIN( 174)		bool _hx_tmp2;
HXDLIN( 174)		if ((this->velocity->x == 0)) {
HXLINE( 174)			_hx_tmp2 = (this->velocity->y != 0);
            		}
            		else {
HXLINE( 174)			_hx_tmp2 = true;
            		}
HXDLIN( 174)		if (_hx_tmp2) {
HXLINE( 174)			_hx_tmp1 = (this->touching == 0);
            		}
            		else {
HXLINE( 174)			_hx_tmp1 = false;
            		}
HXDLIN( 174)		if (_hx_tmp1) {
HXLINE( 176)			switch((int)(this->type->_hx_getIndex())){
            				case (int)0: {
HXLINE( 180)					if ((::Math_obj::abs(this->velocity->x) > ::Math_obj::abs(this->velocity->y))) {
HXLINE( 182)						if ((this->velocity->x < 0)) {
HXLINE( 183)							this->set_facing(1);
            						}
            						else {
HXLINE( 185)							this->set_facing(16);
            						}
            					}
            					else {
HXLINE( 189)						if ((this->velocity->y < 0)) {
HXLINE( 190)							this->set_facing(256);
            						}
            						else {
HXLINE( 192)							this->set_facing(4096);
            						}
            					}
HXLINE( 194)					switch((int)(this->facing)){
            						case (int)1: case (int)16: {
HXLINE( 197)							this->animation->play(HX_("lr",86,5e,00,00),null(),null(),null());
            						}
            						break;
            						case (int)256: {
HXLINE( 199)							this->animation->play(HX_("u",75,00,00,00),null(),null(),null());
            						}
            						break;
            						case (int)4096: {
HXLINE( 201)							this->animation->play(HX_("d",64,00,00,00),null(),null(),null());
            						}
            						break;
            						default:{
            						}
            					}
            				}
            				break;
            				case (int)1: case (int)2: case (int)3: case (int)4: case (int)5: {
            				}
            				break;
            			}
            		}
HXLINE( 207)		if ((this->alpha == ((Float)0.5))) {
HXLINE( 208)			return;
            		}
HXLINE( 209)		this->brain->update(elapsed);
HXLINE( 210)		this->super::update(elapsed);
            	}



::hx::ObjectPtr< Enemy_obj > Enemy_obj::__new(Float x,Float y, ::EnemyType type) {
	::hx::ObjectPtr< Enemy_obj > __this = new Enemy_obj();
	__this->__construct(x,y,type);
	return __this;
}

::hx::ObjectPtr< Enemy_obj > Enemy_obj::__alloc(::hx::Ctx *_hx_ctx,Float x,Float y, ::EnemyType type) {
	Enemy_obj *__this = (Enemy_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Enemy_obj), true, "Enemy"));
	*(void **)__this = Enemy_obj::_hx_vtable;
	__this->__construct(x,y,type);
	return __this;
}

Enemy_obj::Enemy_obj()
{
}

void Enemy_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Enemy);
	HX_MARK_MEMBER_NAME(SPEED,"SPEED");
	HX_MARK_MEMBER_NAME(brain,"brain");
	HX_MARK_MEMBER_NAME(idleTimer,"idleTimer");
	HX_MARK_MEMBER_NAME(moveDirection,"moveDirection");
	HX_MARK_MEMBER_NAME(enemyStart,"enemyStart");
	HX_MARK_MEMBER_NAME(enemyEnd,"enemyEnd");
	HX_MARK_MEMBER_NAME(type,"type");
	HX_MARK_MEMBER_NAME(seesPlayer,"seesPlayer");
	HX_MARK_MEMBER_NAME(playerPosition,"playerPosition");
	HX_MARK_MEMBER_NAME(onFire,"onFire");
	 ::flixel::FlxSprite_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void Enemy_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(SPEED,"SPEED");
	HX_VISIT_MEMBER_NAME(brain,"brain");
	HX_VISIT_MEMBER_NAME(idleTimer,"idleTimer");
	HX_VISIT_MEMBER_NAME(moveDirection,"moveDirection");
	HX_VISIT_MEMBER_NAME(enemyStart,"enemyStart");
	HX_VISIT_MEMBER_NAME(enemyEnd,"enemyEnd");
	HX_VISIT_MEMBER_NAME(type,"type");
	HX_VISIT_MEMBER_NAME(seesPlayer,"seesPlayer");
	HX_VISIT_MEMBER_NAME(playerPosition,"playerPosition");
	HX_VISIT_MEMBER_NAME(onFire,"onFire");
	 ::flixel::FlxSprite_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val Enemy_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { return ::hx::Val( type ); }
		if (HX_FIELD_EQ(inName,"idle") ) { return ::hx::Val( idle_dyn() ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"SPEED") ) { return ::hx::Val( SPEED ); }
		if (HX_FIELD_EQ(inName,"brain") ) { return ::hx::Val( brain ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onFire") ) { return ::hx::Val( onFire ); }
		if (HX_FIELD_EQ(inName,"update") ) { return ::hx::Val( update_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"enemyEnd") ) { return ::hx::Val( enemyEnd ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"idleTimer") ) { return ::hx::Val( idleTimer ); }
		if (HX_FIELD_EQ(inName,"enemyFire") ) { return ::hx::Val( enemyFire_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"enemyStart") ) { return ::hx::Val( enemyStart ); }
		if (HX_FIELD_EQ(inName,"seesPlayer") ) { return ::hx::Val( seesPlayer ); }
		if (HX_FIELD_EQ(inName,"switchType") ) { return ::hx::Val( switchType_dyn() ); }
		if (HX_FIELD_EQ(inName,"changeType") ) { return ::hx::Val( changeType_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"moveDirection") ) { return ::hx::Val( moveDirection ); }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"playerPosition") ) { return ::hx::Val( playerPosition ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Enemy_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"type") ) { type=inValue.Cast<  ::EnemyType >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"SPEED") ) { SPEED=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"brain") ) { brain=inValue.Cast<  ::FSM >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"onFire") ) { onFire=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"enemyEnd") ) { enemyEnd=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"idleTimer") ) { idleTimer=inValue.Cast< Float >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"enemyStart") ) { enemyStart=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"seesPlayer") ) { seesPlayer=inValue.Cast< bool >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"moveDirection") ) { moveDirection=inValue.Cast< Float >(); return inValue; }
		break;
	case 14:
		if (HX_FIELD_EQ(inName,"playerPosition") ) { playerPosition=inValue.Cast<  ::flixel::math::FlxPoint >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Enemy_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("SPEED",67,cf,57,ff));
	outFields->push(HX_("brain",b6,22,e9,b8));
	outFields->push(HX_("idleTimer",11,60,35,6d));
	outFields->push(HX_("moveDirection",ee,f4,ef,2a));
	outFields->push(HX_("enemyStart",fa,8c,0e,3f));
	outFields->push(HX_("enemyEnd",73,46,08,e4));
	outFields->push(HX_("type",ba,f2,08,4d));
	outFields->push(HX_("seesPlayer",01,05,0b,46));
	outFields->push(HX_("playerPosition",2a,11,41,dd));
	outFields->push(HX_("onFire",75,dc,45,e6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Enemy_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Enemy_obj,SPEED),HX_("SPEED",67,cf,57,ff)},
	{::hx::fsObject /*  ::FSM */ ,(int)offsetof(Enemy_obj,brain),HX_("brain",b6,22,e9,b8)},
	{::hx::fsFloat,(int)offsetof(Enemy_obj,idleTimer),HX_("idleTimer",11,60,35,6d)},
	{::hx::fsFloat,(int)offsetof(Enemy_obj,moveDirection),HX_("moveDirection",ee,f4,ef,2a)},
	{::hx::fsInt,(int)offsetof(Enemy_obj,enemyStart),HX_("enemyStart",fa,8c,0e,3f)},
	{::hx::fsInt,(int)offsetof(Enemy_obj,enemyEnd),HX_("enemyEnd",73,46,08,e4)},
	{::hx::fsObject /*  ::EnemyType */ ,(int)offsetof(Enemy_obj,type),HX_("type",ba,f2,08,4d)},
	{::hx::fsBool,(int)offsetof(Enemy_obj,seesPlayer),HX_("seesPlayer",01,05,0b,46)},
	{::hx::fsObject /*  ::flixel::math::FlxPoint */ ,(int)offsetof(Enemy_obj,playerPosition),HX_("playerPosition",2a,11,41,dd)},
	{::hx::fsBool,(int)offsetof(Enemy_obj,onFire),HX_("onFire",75,dc,45,e6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Enemy_obj_sStaticStorageInfo = 0;
#endif

static ::String Enemy_obj_sMemberFields[] = {
	HX_("SPEED",67,cf,57,ff),
	HX_("brain",b6,22,e9,b8),
	HX_("idleTimer",11,60,35,6d),
	HX_("moveDirection",ee,f4,ef,2a),
	HX_("enemyStart",fa,8c,0e,3f),
	HX_("enemyEnd",73,46,08,e4),
	HX_("type",ba,f2,08,4d),
	HX_("seesPlayer",01,05,0b,46),
	HX_("playerPosition",2a,11,41,dd),
	HX_("onFire",75,dc,45,e6),
	HX_("switchType",ce,72,f9,6b),
	HX_("enemyFire",1e,d6,da,a3),
	HX_("idle",14,a7,b3,45),
	HX_("changeType",4a,28,52,27),
	HX_("update",09,86,05,87),
	::String(null()) };

::hx::Class Enemy_obj::__mClass;

void Enemy_obj::__register()
{
	Enemy_obj _hx_dummy;
	Enemy_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Enemy",28,82,a8,03);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Enemy_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Enemy_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Enemy_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Enemy_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

